<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>오늘도 개발을 한다.</title>
    <link>https://cloudsoswift.github.io/</link>
    <description>오늘도 개발을 한다.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 24 Oct 2023 00:29:13 +0900</lastBuildDate>
    
    <atom:link href="https://cloudsoswift.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[알고리즘 주간 기록] 2023/10/3주차</title>
      <link>https://cloudsoswift.github.io/post/algorithm/2023_october_third_week/</link>
      <pubDate>Tue, 24 Oct 2023 00:29:13 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/algorithm/2023_october_third_week/</guid>
      <description>&lt;p&gt;2023년 10월 셋 째주 풀었던 알고리즘 문제들을 기록합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;회고가 필요하다고 생각하는 문제&lt;/strong&gt;(&lt;em&gt;시간이 많이 걸렸거나, 모르는 알고리즘을 사용해야 했던 문제&lt;/em&gt;)만 별도로 문서를 작성해 정리합니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;일자&lt;/th&gt;
&lt;th&gt;푼 문제&lt;/th&gt;
&lt;th&gt;비고&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10월 16일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/16235&#34;&gt;16235. 나무재테크&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/68078467&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 17일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/9252&#34;&gt;9252. LCS 2&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/68170165&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 18일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/9466&#34;&gt;9466. 텀 프로젝트&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/68177025&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 19일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/12100&#34;&gt;12100. 2048 (Easy)&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/68211948&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 20일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/9328&#34;&gt;9328. 열쇠&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/68268158&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 21일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/12015&#34;&gt;12015. 가장 긴 증가하는 부분 수열 2&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/68287871&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 22일&lt;/td&gt;
&lt;td&gt;ADEX 방문 및 하나은행 면접 준비&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이번 주에도 하루에 한 문제씩은 풀려고 노력했는데 23일에 면접이 있다보니 안타깝게도 streak이 끊겨버렸습니다&amp;hellip; 😓&lt;/p&gt;
&lt;p&gt;개선 하도록 노력하겠습니다 🙇&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://cloudsoswift.github.io/post/algorithm/2023_october_third_week_list.png&#34;&gt;
  &lt;img src=&#34;https://cloudsoswift.github.io/post/algorithm/2023_october_third_week_grass.png&#34;&gt;
  이번 주에도 끊겨버린 streak 😥
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[알고리즘 주간 기록] 2023/10/2주차</title>
      <link>https://cloudsoswift.github.io/post/algorithm/2023_october_second_week/</link>
      <pubDate>Mon, 16 Oct 2023 23:54:33 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/algorithm/2023_october_second_week/</guid>
      <description>&lt;p&gt;2023년 10월 둘 째주 풀었던 알고리즘 문제들을 기록합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;회고가 필요하다고 생각하는 문제&lt;/strong&gt;(&lt;em&gt;시간이 많이 걸렸거나, 모르는 알고리즘을 사용해야 했던 문제&lt;/em&gt;)만 별도로 문서를 작성해 정리합니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;일자&lt;/th&gt;
&lt;th&gt;푼 문제&lt;/th&gt;
&lt;th&gt;비고&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10월 9일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/14890&#34;&gt;14890. 경사로&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67753848&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 10일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/15684&#34;&gt;15684. 사다리 조작&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67818933&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/source/67833362&#34;&gt;개선 시도한 코드&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 11일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/16234&#34;&gt;16234. 인구 이동&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67846150&#34;&gt;코드&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/13458&#34;&gt;13458. 시험 감독&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67855173&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 12일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/3190&#34;&gt;3190. 뱀&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67901770&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 13일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/13460&#34;&gt;13460. 구슬 탈출2&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67958721&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 14일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/15685&#34;&gt;15685. 드래곤 커브&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/68000132&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 15일&lt;/td&gt;
&lt;td&gt;삼성 SW 테스트 응시&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;이번 주는 일요일에 삼성전자 SW 테스트 응시가 예정되어 있어서 최대한 기출문제, 그 중에서도 시뮬레이션이나 구현 위주로 풀었습니다.&lt;/p&gt;
&lt;p&gt;아쉽게도 SW테스트는 한 문제도 맞추지 못한, 0솔로 마감을 했습니다.&lt;br&gt;
원 계획은 3시간 안에 1번을 풀고, 2번은 남은 1시간 동안 최대한 풀어보는 것이었습니다.&lt;/p&gt;
&lt;p&gt;1번 문제를 2시간 가량 풀고, 나머지 2시간 동안 오류나는 부분을 어느정도 고치고 왜 테스트 케이스가 안 맞는지 수 십번 체크를 했는데도 틀려서 스스로 너무 화가 난 시험이었습니다.&lt;br&gt;
그 뒤로 스터디카페 가서 한 3시간은 복기 했는데도 도저히 틀린 부분을 모르겠어서.. 🥲&lt;/p&gt;
&lt;p&gt;빨리 코드트리 같은 문제풀이 사이트에서 복원하면 제대로 풀어보고 싶네요!&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img src=&#34;https://cloudsoswift.github.io/post/algorithm/2023_october_second_week_grass.png&#34;&gt;
  끊겨버린 streak 😥
&lt;/p&gt;
&lt;p&gt;이번 주도 열심히 하겠습니다. 🫡&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[알고리즘 주간 기록] 2023/10/1주차</title>
      <link>https://cloudsoswift.github.io/post/algorithm/2023_october_first_week/</link>
      <pubDate>Mon, 09 Oct 2023 01:25:47 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/algorithm/2023_october_first_week/</guid>
      <description>&lt;p&gt;2023년 10월 첫 째주 풀었던 알고리즘 문제들을 기록합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;회고가 필요하다고 생각하는 문제&lt;/strong&gt;(&lt;em&gt;시간이 많이 걸렸거나, 모르는 알고리즘을 사용해야 했던 문제&lt;/em&gt;)만 별도로 문서를 작성해 정리합니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;일자&lt;/th&gt;
&lt;th&gt;푼 문제&lt;/th&gt;
&lt;th&gt;비고&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10월 2일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/2473&#34;&gt;2473. 세 용액&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67446082&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 3일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/2263&#34;&gt;2263. 트리의 순회&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67478287&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cloudsoswift.github.io/post/algorithm/boj_2263/&#34;&gt;문제 풀이&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 4일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/1238&#34;&gt;1238. 파티&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67534317&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 5일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/7579&#34;&gt;7579. 앱&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67579732&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 6일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/14503&#34;&gt;14503. 로봇 청소기&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67629642&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 7일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/14891&#34;&gt;14891. 톱니 바퀴&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67673262&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10월 8일&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/14499&#34;&gt;14499. 주사위 굴리기&lt;/a&gt; - &lt;a href=&#34;https://www.acmicpc.net/source/67710519&#34;&gt;코드&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;하루에 여러 문제를 풀 진 못했지만 잔디가 차곡차곡 쌓여가는 걸 보니 기분이 좋네요 :)&lt;br&gt;
&lt;img src=&#34;https://cloudsoswift.github.io/post/algorithm/2023_october_first_week_grass.png&#34; alt=&#34;grass&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[백준]2263. 트리의 순회</title>
      <link>https://cloudsoswift.github.io/post/algorithm/boj_2263/</link>
      <pubDate>Sun, 08 Oct 2023 02:02:47 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/algorithm/boj_2263/</guid>
      <description>&lt;p&gt;백준의 &lt;strong&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/2263&#34;&gt;2263. 트리의 순회&lt;/a&gt;&lt;/strong&gt; 문제에 대한 정리이다.&lt;/p&gt;
&lt;h2 id=&#34;문제-설명&#34; &gt;문제 설명
&lt;span&gt;
    &lt;a href=&#34;#%eb%ac%b8%ec%a0%9c-%ec%84%a4%eb%aa%85&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;1~N 까지 번호가 매겨져 있는 N개의 정점을 가지는 이진 트리가 있다.&lt;br&gt;
이 트리의 *In-Order와 *Post-Order가 주어질 때, *Pre-Order를 구하는 프로그램을 작성하면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In-Order: 트리를 &amp;lsquo;①왼쪽 노드 - ②루트 노드 - ③오른쪽 노드&amp;rsquo; 순서대로 탐색하는 것&lt;/li&gt;
&lt;li&gt;Post-Order: 트리를 &amp;lsquo;①왼쪽 노드 - ②오른쪽 노드 - ③루트 노드&amp;rsquo; 순서대로 탐색하는 것&lt;/li&gt;
&lt;li&gt;Pre-Order: 트리를 &amp;lsquo;①루트 노드 - ②왼쪽 노드 - ③오른쪽 노드&amp;rsquo; 순서대로 탐색하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cloudsoswift.github.io/post/algorithm/boj_2263/traversal.png&#34; alt=&#34;traversal&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;출처: &lt;a href=&#34;https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/&#34;&gt;https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;원래-생각한-아이디어&#34; &gt;원래 생각한 아이디어
&lt;span&gt;
    &lt;a href=&#34;#%ec%9b%90%eb%9e%98-%ec%83%9d%ea%b0%81%ed%95%9c-%ec%95%84%ec%9d%b4%eb%94%94%ec%96%b4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;이 문제를 풀기 이전에, 유사한 문제를 푼 경험이 있어서 해당 문제에서 사용했던 아이디어를 차용하려고 했다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acmicpc.net/problem/5639&#34;&gt;5639. 이진 검색 트리&lt;/a&gt; 라는 문제인데, 해당 문제는 전위 순회(Pre-Order)한 결과가 주어지면 해당 트리를 후위 순회(Post-Order)한 결과를 반환해야 하는 문제이다.&lt;/p&gt;
&lt;p&gt;이 문제에서 주어지는 &amp;lsquo;&lt;mark style=&#34;background: pink;&#34;&gt;현재 노드의 왼쪽 서브트리의 모든 노드 키&lt;/mark&gt; &amp;lt; 현재 노드의 키 &amp;lt; &lt;mark style=&#34;background: skyblue;&#34;&gt; 현재 노드의 오른쪽 서브트리의 모든 노드 키&lt;/mark&gt;&amp;rsquo; 라는 조건을 활용하는 문제였다.&lt;br&gt;
&lt;img src=&#34;https://cloudsoswift.github.io/post/algorithm/boj_2263/5639_tree.png&#34; alt=&#34;5639_tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;먼저 전위 순회한 값들을 배열에 저장한 뒤, &amp;lsquo;start - end&amp;rsquo; 범위 내에서 맨 왼쪽의 키 값을 뽑아낸 뒤 그 값보다 작은값을 만날 때 까지, 큰 값을 만날 때 까지 탐색 한다.&lt;br&gt;
그리고 &lt;mark style=&#34;background: pink;&#34;&gt;&amp;lsquo;start+1 ~ 큰 값을 만난 위치&amp;rsquo;&lt;/mark&gt;, &lt;mark style=&#34;background: skyblue;&#34;&gt;&amp;lsquo;큰 값을 만난 위치 ~ end&amp;rsquo;&lt;/mark&gt; 두 가지 서브 트리로 쪼갠 뒤 분할 탐색을 하는 것을 반복하는 식으로 해결하면 되는 문제였다.
&lt;img src=&#34;https://cloudsoswift.github.io/post/algorithm/boj_2263/5639_tree_array.png&#34; alt=&#34;5639_tree_array&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;lsquo;트리의 순회&amp;rsquo;문제에서 Post-Order가 주어지기 때문에, 비슷한 방식으로 풀 수 있다고 생각했다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;먼저 &amp;lsquo;start - end&amp;rsquo; 범위 내 맨 오른쪽 값(&lt;em&gt;= 루트 값&lt;/em&gt;)을 뽑아낸 뒤, 해당 값 바로 왼쪽 값을 찾아낸다. 그 값이 오른쪽 서브 트리의 루트 노드 값이다.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;오른쪽 서브트리 루트 값 보다 낮은 값&lt;/em&gt;이 나올 때 까지 start 쪽으로(&lt;em&gt;= 왼쪽으로&lt;/em&gt;) 탐색한다.&lt;/li&gt;
&lt;li&gt;그리고 &lt;strong&gt;낮은 값&lt;/strong&gt;을 찾으면 해당 값이 &lt;strong&gt;왼쪽 서브트리 루트 값&lt;/strong&gt;이다.&lt;/li&gt;
&lt;li&gt;&lt;mark style=&#34;background: pink;&#34;&gt;&amp;lsquo;start ~ 왼쪽 서브트리 루트 값 idx&amp;rsquo;&lt;/mark&gt;, &lt;mark style=&#34;background: skyblue;&#34;&gt;&amp;lsquo;왼쪽 서브트리 루트 값 idx+1, end-1&amp;rsquo;&lt;/mark&gt; 으로 분할 탐색을 하면? 문제가 풀릴 줄 알았다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cloudsoswift.github.io/post/algorithm/boj_2263/post_order.png&#34; alt=&#34;post_order&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;발생한-문제&#34; &gt;발생한 문제
&lt;span&gt;
    &lt;a href=&#34;#%eb%b0%9c%ec%83%9d%ed%95%9c-%eb%ac%b8%ec%a0%9c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;하지만 순탄하게 풀리지 않았는데, 바로 이 문제에는 &amp;lsquo;이진 검색 트리&amp;rsquo; 문제 처럼 &lt;em&gt;조건이 주어지는게 &lt;strong&gt;아니기&lt;/strong&gt; 때문에&lt;/em&gt; &lt;strong&gt;해당 공식이 성립하지 않는다&lt;/strong&gt;는 것이었다.&lt;br&gt;
실제로 코드를 제출 했을때도 오답으로 나왔고, 백준에 다른 유저분들이 올려주신 반례들을 보니 저 조건이 성립하지 않고 번호가 무작위로 매겨져 있었다.&lt;br&gt;
&lt;strong&gt;특히&lt;/strong&gt;, &lt;strong&gt;한 쪽으로 편향된 케이스&lt;/strong&gt;의 경우 &lt;em&gt;Post-Order는 같지만&lt;/em&gt; &lt;strong&gt;In-Order는 달라&lt;/strong&gt; 이 방법이 아님을 알게 되었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloudsoswift.github.io/post/algorithm/boj_2263/narrow_case.png&#34; alt=&#34;narrow_case&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;답안-아이디어&#34; &gt;답안 아이디어
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%b5%ec%95%88-%ec%95%84%ec%9d%b4%eb%94%94%ec%96%b4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;그래서 이 문제를 거의 이틀 정도 계속 붙잡고 풀어 본 결과, In-Order와 Post-Order에서 규칙을 발견할 수 있었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Post-Order에서 범위 내 &lt;strong&gt;맨 오른쪽 값&lt;/strong&gt;은 root다.&lt;/li&gt;
&lt;li&gt;해당 root 값을 In-Order에서 찾아내면, 그 위치를 기준 좌/우로 서브트리가 나뉜다.&lt;/li&gt;
&lt;li&gt;In-Order에서 root의 바로 오른쪽 원소 값의 Post-Order 상 idx를 찾아내면, Post-Order에서 &lt;mark style=&#34;background: pink;&#34;&gt;[start ~ idx-1]&lt;/mark&gt;, &lt;mark style=&#34;background: skyblue;&#34;&gt;[idx ~ end-1]&lt;/mark&gt;로 서브트리를 탐색할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이를 그림으로 나타내면 다음과 같다.&lt;br&gt;
&lt;img src=&#34;https://cloudsoswift.github.io/post/algorithm/boj_2263/answer_idea.png&#34; alt=&#34;answer_idea&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;다만, 왼쪽이나, 오른쪽에 서브트리가 없을 수 있으므로 탐색 범위 체크가 필요하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;해당 방법대로 계속 범위를 줄여나가며 분할 정복하며 만나는 root들을 StringBuffer에 저장했다가 탐색이 끝나고 출력해주면 문제를 해결할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;코드&#34; &gt;코드
&lt;span&gt;
    &lt;a href=&#34;#%ec%bd%94%eb%93%9c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.BufferedReader&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.IOException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.InputStreamReader&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 주어지는 In-Order, Post-Order의 순서는 다음과 같음
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ---------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// In-Order -&amp;gt; 왼쪽 - 루트 - 오른쪽 순서대로 탐색
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Post-Order -&amp;gt; 왼쪽 - 오른쪽 - 루트 순서대로 탐색
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ---------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 답으로 출력해야 하는 Pre-Order의 순서는 다음과 같음
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ---------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Pre-Order -&amp;gt; 루트 - 왼쪽 - 오른쪽 순서대로 탐색
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ---------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 답 아이디어
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 1. Post-Order 순서에서는 현재 서브트리의 맨 오른쪽의 원소가 Root임
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 2. In-Order 순서에서는 현재 서브트리의 Root 노드 번호 를 기준으로 왼쪽, 오른쪽 서브트리가 나뉨.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 3. 따라서, Post-Order에서 맨 오른쪽 요소를 뽑아내 Root 노드 번호를 찾고,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 	해당 노드 번호의 In-Order에서의 idx를 알아내면, 해당 idx 좌, 우로 서브트리를 탐색할 수 있다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 또한, root의 In-Order idx의 바로 오른쪽 원소 값의 Post-Order 상 idx를 찾아내면,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Post-Order에서 [start ~ idx-1], [idx ~ end-1] 로 서브트리를 탐색할 수 있다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 이러한 방식으로 루트, 좌/우 서브트리를 계속 탐색하면서 발견하는 원소값을 StringBuffer에 누적시켜
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 탐색이 다 끝난 뒤 출력하면 Pre-Order 순서대로 출력할 수 있다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; inOrder&lt;span style=&#34;color:#f92672&#34;&gt;[][],&lt;/span&gt; postOrder&lt;span style=&#34;color:#f92672&#34;&gt;[][],&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; StringBuffer sb&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; NumberFormatException&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		BufferedReader br &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BufferedReader&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InputStreamReader&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		sb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; StringBuffer&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parseInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;br&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;readLine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		inOrder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		postOrder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;N&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		String strArr&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; br&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;readLine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// inOrder[0][] -&amp;gt; index가 inOrder[1]에서 몇 번째 위치인지
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// inOrder[1][] -&amp;gt; 입력 순서대로 받은 inOrder
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			inOrder&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parseInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;strArr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			inOrder&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;inOrder&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		strArr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; br&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;readLine&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// postOrder[0][] -&amp;gt; index가 postOrder[1]에서 몇 번째 위치인지
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// postOrder[1][] -&amp;gt; 입력 순서대로 받은 postOrder
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;N&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			postOrder&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parseInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;strArr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			postOrder&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;postOrder&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// preOrder 탐색 시작
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		search&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// postOrder 상에서의 탐색 시작, 종료 범위 start, end
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// inOrder 상에서의 탐색 시작, 종료 범위 s, e
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;search&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; start&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; end&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 탐색 범위값이 엇나갔으면 탐색 종료
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;start &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// root 노드 출력에 추가
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; root &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; postOrder&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;end&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		sb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		sb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 하위 노드가 없는 상태, 즉 더 탐색할 수 없는 경우 탐색 종료
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;start &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; end&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// root 노드의 inOrder 상 idx 추출
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; centeridx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inOrder&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;root&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 좌/우 서브트리를 구분하는 임계점 저장할 변수
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; threshHold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// inOrder에서 root 노드 기준 오른쪽이 탐색 범위를 벗어나지 않는 경우
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 즉 오른쪽 서브노드 탐색 가능한 경우
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;centeridx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// inOrder에서 root 노드 바로 오른쪽 노드 값 추출
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rightLast &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inOrder&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;centeridx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// 해당 값의 postOrder 상의 idx 추출
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// 이 값이 postOrder상에서 왼쪽/오른쪽 서브트리 나누는 임계값
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			threshHold &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; postOrder&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;rightLast&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// inOrder에서 root 노드 기준 왼쪽이 탐색 범위를 벗어나지 않는 경우
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// 즉 왼쪽 서브노드 탐색이 가능한 경우
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;centeridx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#75715e&#34;&gt;// 임계점 기준으로 왼쪽 먼저 탐색한 뒤, 오른쪽 탐색
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				search&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;start&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; threshHold&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; centeridx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				search&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;threshHold&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; centeridx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#75715e&#34;&gt;// 오른쪽은 탐색 가능하지만 왼쪽은 탐색할 수 없는 경우 이므로
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#75715e&#34;&gt;// 오른쪽으로만 탐색
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				search&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;start&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; end&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; centeridx&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// 오른쪽 탐색 불가능 하므로 왼쪽으로 탐색
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			search&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;start&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; threshHold&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; centeridx&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;결론&#34; &gt;결론
&lt;span&gt;
    &lt;a href=&#34;#%ea%b2%b0%eb%a1%a0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;처음 시작을 잘못된 방향으로 생각을 해서 거기에 옳메인게 너무 컸던것 같다.&lt;br&gt;
앞으로는 비슷한 유형의 문제라도 다른 방법으로 먼저 생각해보는 방향으로 문제를 풀어야 겠다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloudsoswift.github.io/post/algorithm/boj_2263/2263_result.png&#34; alt=&#34;2263_result&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js 스터디 1주차 - Node.js의 Thread에 대하여</title>
      <link>https://cloudsoswift.github.io/post/develop/230804/about-thread-of-node-js/</link>
      <pubDate>Fri, 04 Aug 2023 05:16:01 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/develop/230804/about-thread-of-node-js/</guid>
      <description>&lt;h1 id=&#34;발단&#34; &gt;발단
&lt;span&gt;
    &lt;a href=&#34;#%eb%b0%9c%eb%8b%a8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Node.js의 경우 Multi-Thread이지만 하나의 Thread만 유저가 사용가능하게 하고, 나머지는 내부적으로 사용&lt;/li&gt;
&lt;li&gt;최근에는 worker_thread와 같은 기능으로 유저도 Multi-Thread 환경에서 개발할 수 있도록 하는것으로 알고있음.&lt;/li&gt;
&lt;li&gt;여기서 Node.js의 Thread는 어떻게 구성되어 있고, 어떻게 작동하는지, 왜 하나의 Thread만 유저가 사용할 수 있게 한건지, worker_thread 기능은 또 뭔지 궁금해졌음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;궁금한-점&#34; &gt;궁금한 점
&lt;span&gt;
    &lt;a href=&#34;#%ea%b6%81%ea%b8%88%ed%95%9c-%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Node.js의 &lt;strong&gt;Thread 구조&lt;/strong&gt;는 어떻게 될 까?&lt;/li&gt;
&lt;li&gt;Node.js의 &lt;strong&gt;Thread는 어떻게 작동&lt;/strong&gt;할까?&lt;/li&gt;
&lt;li&gt;왜 Node.js는 하나의 Thread만 유저가 사용할 수 있게 한걸까?(&lt;strong&gt;왜 싱글스레드 모델을 선택&lt;/strong&gt;했을까?)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;worker_threads&lt;/strong&gt; 기능은 무엇일까?&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;진행&#34; &gt;진행
&lt;span&gt;
    &lt;a href=&#34;#%ec%a7%84%ed%96%89&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;h2 id=&#34;1-nodejs의-thread-구조는-어떻게-될까&#34; &gt;1. Node.js의 Thread 구조는 어떻게 될까?
&lt;span&gt;
    &lt;a href=&#34;#1-nodejs%ec%9d%98-thread-%ea%b5%ac%ec%a1%b0%eb%8a%94-%ec%96%b4%eb%96%bb%ea%b2%8c-%eb%90%a0%ea%b9%8c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Node.js는 Event-Driven Architecture를 채용해 &lt;mark style=&#34;background: #FFF3A3A6;&#34;&gt;(1) 오케스트레이션을 위한 Event Loop&lt;/mark&gt;와 &lt;mark style=&#34;background: #FFF3A3A6;&#34;&gt;(2)고비용 작업을 위한 Worker Pool&lt;/mark&gt;을 포함하고 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;event-loop&#34; &gt;Event Loop
&lt;span&gt;
    &lt;a href=&#34;#event-loop&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;main loop, main thread, event thread 라고도 부릅니다.&lt;br&gt;
간단히 말하면 Event에 등록된 Javascript callback 함수를 실행하고, Non-Blocking 비동기 요청(ex. 네트워크 I/O) 역시 처리하는 스레드 입니다.&lt;br&gt;
Node.js 애플리케이션이 시작되면 먼저 초기화 phase를 완료하고, module들을 require하고 Event에 대한 callback들을 등록합니다.&lt;br&gt;
그 다음 Node.js 애플리케이션은 Event Loop에 진입해 들어오는 Client 요청들에 대해 그에 해당하는 callback들을 실행시키므로써 응답합니다. 이러한 callback들은 동기적으로 실행되며, 완료된 후에도 계속 처리하기 위해 비동기 요청들을 등록할 수도 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;worker-poolthread-pool&#34; &gt;Worker Pool(Thread Pool)
&lt;span&gt;
    &lt;a href=&#34;#worker-poolthread-pool&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Task를 처리하는 Worker로 이루어진 Pool 입니다.&lt;br&gt;
Node.js의 Worker Pool은 &lt;a href=&#34;https://docs.libuv.org/en/v1.x/threadpool.html&#34;&gt;libuv&lt;/a&gt;의 구현체로, libuv는 일반적인 Task Submission API(&lt;code&gt;uv_queue_work&lt;/code&gt;)를 노출하고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int uv_queue_work(*loop, *req, work_cb, after_work_cb)&lt;/code&gt; : threadpool의 스레드에서,  &lt;code&gt;work_cb&lt;/code&gt;를 실행하는 작업 request를 initialize 합니다. &lt;code&gt;work_cb&lt;/code&gt;가 완료되고 나면, loop thread에서 &lt;code&gt;after_work_cb&lt;/code&gt;를 호출합니다.&lt;br&gt;
Node.js에서는 Worker Pool을 &lt;strong&gt;&amp;ldquo;비싼&amp;rdquo;&lt;/strong&gt; 작업을 처리하기 위해 사용합니다. &lt;strong&gt;&amp;ldquo;비싼&amp;rdquo;&lt;/strong&gt; 작업으로는 OS단에서 non-blocking 버전을 제공하지 않는 I/O 작업(특히 CPU 집약적인 작업)이 있습니다.&lt;br&gt;
Worker Pool을 사용하는 Node.js Module API는 다음과 같습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;io-집약적인-api&#34; &gt;I/O-집약적인 API
&lt;span&gt;
    &lt;a href=&#34;#io-%ec%a7%91%ec%95%bd%ec%a0%81%ec%9d%b8-api&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/dns.html&#34;&gt;DNS&lt;/a&gt; : Node.js에서 Name Resolution을 가능케 해주는 Module로, host name의 IP 주소를 조회하는 등의 작업을 수행할 때 사용할 수 있습니다.&lt;br&gt;
(조회시 항상 DNS 프로토콜을 사용하는 건 아니고, OS 기능을 이용해 이름 확인을 할 수도 있습니다.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/fs.html#fs_threadpool_usage&#34;&gt;File System&lt;/a&gt; : (&lt;code&gt;fs.FSWatcher()&lt;/code&gt;와 명시적으로 동기 방식인 API를 제외한) 대부분의 File System API가 libuv의 threadpool을 사용합니다.
&lt;ul&gt;
&lt;li&gt;참고로 libuv이 제공하는 threadpool은 내부적으로 모든 File System 작업과 &lt;code&gt;getaddrinfo&lt;/code&gt;, &lt;code&gt;getnameinfo&lt;/code&gt;와 같은 요청을 실행하는데 사용됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;cpu-집약적인-api&#34; &gt;CPU-집약적인 API
&lt;span&gt;
    &lt;a href=&#34;#cpu-%ec%a7%91%ec%95%bd%ec%a0%81%ec%9d%b8-api&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/crypto.html&#34;&gt;Crypto&lt;/a&gt;: Node.js에서 암호화를 위해 사용하는 Module로, 주로 Hashing같은 고비용 작업을 처리하는데에 libuv의 threadpool을 사용합니다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;crypto.pbkdf2()&lt;/code&gt;, &lt;code&gt;crypto.scrypt()&lt;/code&gt;, &lt;code&gt;crypto.randomBytes()&lt;/code&gt;,&lt;br&gt;
&lt;code&gt;crypto.randomFill()&lt;/code&gt;, &lt;code&gt;crypto.generateKeyPair()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/zlib.html#zlib_threadpool_usage&#34;&gt;Zlib&lt;/a&gt;: Node.js에서 파일 압축을 위해 사용하는 Module로, 명시적으로 동기적인 몇몇을 제외하면 대부분의 작업이 libuv의 threadpool을 사용합니다.&lt;br&gt;
이러한 API들만이 Worker Pool의 task 원천입니다.&lt;br&gt;
&lt;a href=&#34;https://nodejs.org/api/addons.html&#34;&gt;C++ add-on&lt;/a&gt;을 사용하는 애플리케이션과 모듈은 다른 task들을 Worker Pool에 submit 할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-nodejs의-thread는-어떻게-작동할까&#34; &gt;2. Node.js의 Thread는 어떻게 작동할까?
&lt;span&gt;
    &lt;a href=&#34;#2-nodejs%ec%9d%98-thread%eb%8a%94-%ec%96%b4%eb%96%bb%ea%b2%8c-%ec%9e%91%eb%8f%99%ed%95%a0%ea%b9%8c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&#34;api-호출과-task-submit&#34; &gt;API 호출과 task submit
&lt;span&gt;
    &lt;a href=&#34;#api-%ed%98%b8%ec%b6%9c%ea%b3%bc-task-submit&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;위에서 언급한 API들 중 하나를 Event Loop의 callback 에서 호출한다면, Event Loop는 해당 API에 대한 Node.js C++ bindings에 들어가 task를 submit할 때 약간의 설정 비용(setup cost)를 지불합니다.&lt;br&gt;
설정 비용들은 task의 전체 비용에 비해 무시할 수 있는 수준이라 Event Loop는 이를 &lt;code&gt;offloading&lt;/code&gt; 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offloading&lt;/code&gt;: 리소스 집약적인 컴퓨팅 작업을 하드웨어 가속기와 같은 별도의 프로세서나 클러스터, 그리드 또는 클라우드와 같은 외부 플랫폼으로 전송하는 것.&lt;br&gt;
task를 submit할 때, Node.js는 Node.js C++ bindings 내부의 해당 C++ 함수에 대한 Pointer를 제공합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nodejs가-다음으로-실행할-code를-정하는-방법&#34; &gt;Node.js가 다음으로 실행할 code를 정하는 방법
&lt;span&gt;
    &lt;a href=&#34;#nodejs%ea%b0%80-%eb%8b%a4%ec%9d%8c%ec%9c%bc%eb%a1%9c-%ec%8b%a4%ed%96%89%ed%95%a0-code%eb%a5%bc-%ec%a0%95%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Event Loop와 Worker Pool은 각각 대기중인 event, 대기중인 task들 위한 Queue를 추상적으로 유지합니다.&lt;br&gt;
&lt;strong&gt;추상적&lt;/strong&gt;이라고 말한 이유는, 사실 Event Loop는 queue를 유지하고 있지 않습니다.&lt;br&gt;
대신 OS에 요청한 file descriptor들의 집합을 갖고 있는데, 이를 통해 OS에 OS별 메커니즘(epoll (linux), kqueue (OSX), event ports (Solaris), IOCP (Windows))을 이용해 모니터링을 요청합니다.&lt;br&gt;
file descriptor로는 &lt;strong&gt;network socket&lt;/strong&gt;, &lt;strong&gt;감시중인 파일&lt;/strong&gt;들이 있습니다.&lt;br&gt;
OS가 이들 중 하나 준비되었다고 말하면, Event Loop는 이를 적절한 Event로 변환하고 해당 Event와 관련된 callback을 호출합니다.&lt;br&gt;
반면 이와 대조적으로 Worker Pool은 실행되어야 하는 Task들에 대한 실제 Queue를 사용합니다. Worker는 queue에서 task를 pop하여 처리한 뒤, task가 완료되면 &lt;em&gt;&amp;ldquo;적어도 하나의 작업이 완료되었음(At least one task is finished)&amp;rdquo;&lt;/em&gt; event를 Event Loop에 발생시킵니다.&lt;/p&gt;
&lt;h3 id=&#34;개발자가-구현시-중요하게-생각해야-할-점&#34; &gt;개발자가 구현시 중요하게 생각해야 할 점
&lt;span&gt;
    &lt;a href=&#34;#%ea%b0%9c%eb%b0%9c%ec%9e%90%ea%b0%80-%ea%b5%ac%ed%98%84%ec%8b%9c-%ec%a4%91%ec%9a%94%ed%95%98%ea%b2%8c-%ec%83%9d%ea%b0%81%ed%95%b4%ec%95%bc-%ed%95%a0-%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;위에서 언급한 (적은 thread로 많은 client를 처리하는)Node.js의 구조상, thread가 어떤 request 때문에 block될 경우 끼치는 피해가 더 막대하므로 공정한 스케줄링(fair scheduling)을 개발자가 보장할 필요가 있게 됩니다.&lt;br&gt;
따라서 개발자는 구현시 requset에 대한 scheduling에 좀 더 신경써야 합니다.&lt;br&gt;
다시 한 번 말하면, 모든 들어오는 요청과 나가는 응답이 Event Loop를 통과하므로 Event Loop가 한 작업에 대해 너무 오래걸리지 않도록, 즉 &lt;strong&gt;Block&lt;/strong&gt;되지 않도록 Javascript callback들이 빠르게 처리되도록 해야합니다.&lt;br&gt;
따라서 개발자는 input에 제한을 걸고, input이 너무 긴 작업은 거절하는 것을 고려해야 합니다.&lt;br&gt;
이를 통해 callback의 복잡성이 크더라도, input을 제한하여 callback이 worst-case 작업시간보다 오래 걸리지 않도록 할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사실 뒤에 block을 유발할 수 있는 작업들에 대한 내용이 있는데, 이러한 내용은 공식 문서를 정리하는 것만 해도 길어질 것 같아 추후 따로 글을 작성하도록 하겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-nodejs의-싱글-스레드-모델-선택-이유&#34; &gt;3. Node.js의 싱글-스레드 모델 선택 이유
&lt;span&gt;
    &lt;a href=&#34;#3-nodejs%ec%9d%98-%ec%8b%b1%ea%b8%80-%ec%8a%a4%eb%a0%88%eb%93%9c-%eb%aa%a8%eb%8d%b8-%ec%84%a0%ed%83%9d-%ec%9d%b4%ec%9c%a0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/about&#34;&gt;Node.js 공식문서&lt;/a&gt;에 따르면, Node.js는 &lt;em&gt;(싱글 스레드 모델을 선택하므로써)&lt;/em&gt; &lt;strong&gt;현대의 일반적인 동시성 모델들과 달리&lt;/strong&gt;&lt;mark style=&#34;background: #FFF3A3A6;&#34;&gt; 비효율적이고 사용하기 어려운 &amp;lsquo;스레드-기반 네트워킹&amp;rsquo;&lt;/mark&gt;을 피할 수 있으며, lock이 발생하지 않아 사용자들이 dead-lock의 위험으로 부터 자유로울 수 있게 됐다고 말하고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js에서는 적은 수의 Thread를 사용하므로써, Thread의 Memory, Context Switching으로 인해 발생하는 공간과 시간 Overhead를 줄일 수 있다고 말합니다.&lt;br&gt;
그를 통해 시스템에서는 더 많은 시간과 메모리를 클라이언트들에게 사용할 수 있다는 이점을 얻을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;영향-받은-모델&#34; &gt;영향 받은 모델
&lt;span&gt;
    &lt;a href=&#34;#%ec%98%81%ed%96%a5-%eb%b0%9b%ec%9d%80-%eb%aa%a8%eb%8d%b8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;또한 Node.js의 Event Loop Runtime 구조는 Ruby의 &lt;code&gt;Event Machine&lt;/code&gt;과 Python의 &lt;code&gt;Twisted&lt;/code&gt;로 부터 영향을 받았으며, 유사한 설계를 갖고있다고 말합니다.&lt;/p&gt;
&lt;h4 id=&#34;event-machine&#34; &gt;Event Machine
&lt;span&gt;
    &lt;a href=&#34;#event-machine&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Ruby를 위한 Event-Driven IO 및 경량 동시성 라이브러리로, Node.js, libev와 마찬가지로 &lt;strong&gt;&lt;code&gt;Reactor&lt;/code&gt;&lt;/strong&gt; 패턴을 사용해 Event-Driven I/O를 제공합니다.&lt;br&gt;
Event Machine은 &amp;lsquo;높은 확장성, 성능, 안정성&amp;rsquo; 그리고 &amp;lsquo;개발자가 애플리케이션의 로직에 집중할 수 있도록 하는 API(스레드 네트워크 프로그래밍의 복잡성을 제거한)&amp;rsquo; 이라는 두 핵심 요구사항을 만족하도록 설계되어 있습니다.&lt;br&gt;
정리하자면,  &amp;lsquo;&lt;em&gt;Scalable해서 규모를 증감&lt;/em&gt;시킬 수 있으면서, &lt;strong&gt;Thread에 대해 신경쓰지 않고 개발&lt;/strong&gt;할 수 있는 &lt;strong&gt;동시성을 지닌 API&lt;/strong&gt;를 만들도록 돕는 라이브러리&amp;rsquo; 라고 정리할 수 있을 것 같습니다.&lt;/p&gt;
&lt;h5 id=&#34;reactor-패턴&#34; &gt;&lt;strong&gt;&lt;code&gt;Reactor 패턴&lt;/code&gt;&lt;/strong&gt;
&lt;span&gt;
    &lt;a href=&#34;#reactor-%ed%8c%a8%ed%84%b4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;참고 문서
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dre.vanderbilt.edu/~schmidt/PDF/reactor-siemens.pdf&#34;&gt;Reactor - An Object Behavioral Pattern for Demultiplexing and Dispatching Handles for Synchronous Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Reactor_pattern&#34;&gt;Reactor pattern - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service Handler에 &lt;em&gt;동시에 전달&lt;/em&gt;되는 Request를 처리하기 위한 &lt;strong&gt;Event Handling 패턴&lt;/strong&gt;.&lt;br&gt;
Service Handler는 들어오는 요청을 &lt;strong&gt;역다중화&lt;/strong&gt;(Demultiplex)한 뒤, 관련된 Request Handler(service provider)에게 동기적으로 전송합니다.&lt;br&gt;
모든 Reactor 시스템은 정의대로라면 싱글-스레드이지만, 멀티스레드 환경에서도 존재할 수 있습니다.&lt;br&gt;
애플리케이션 부분 코드를 Reactor 구현과 분리해 코드를 모듈화해 재사용이 가능하다는 장점이 있지만, 제어의 흐름이 역전되어 있어 절차적 패턴(Procedural Pattern)보다 디버깅하기 힘들고 Request Handler 호출이 동기적이라는 점과 Demultiplexer 때문에 최대 동시성이 제한(&lt;em&gt;대칭형 멀티프로세싱 하드웨어에서 특히&lt;/em&gt;) 된다는 한계가 존재합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;역다중화&lt;/strong&gt; : 물리적 장치의 효율성을 높이기 위해 최소한의 물리적 요소를 사용해 최대한 데이터를 전달하는 &lt;strong&gt;다중화(Multiplex)&lt;/strong&gt; 작업을 거쳐 전달받은 데이터를 다시 합치는 작업. &lt;a href=&#34;https://dbehdrhs.tistory.com/98&#34;&gt;#&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Event Demultiplexer의 경우 &lt;code&gt;Handles&lt;/code&gt;에서 발생하는 이벤트를 Block하며, Blocking 없이 Handle에 대한 작업을 시작할 수 있을 때 반환됩니다.&lt;/li&gt;
&lt;li&gt;I/O Event에 대한 일반적인 Demultiplexer는 &lt;code&gt;select&lt;/code&gt;라는, UNIX 및 WIN32 OS에서 제공되는 Event Demultiplexing System Call 입니다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt; call은 어떤 handles가 &lt;em&gt;애플리케이션 프로세스를 Block하지 않고&lt;/em&gt; &lt;mark style=&#34;background: #FFF3A3A6;&#34;&gt;동시에&lt;/mark&gt; 작업을 호출할 수 있는지를 나타내는 작업입니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Handles&lt;/code&gt; : 일반적으로 OS에서 관리하는 자원을 식별합니다. Logging Server에서 Socket Endpoint를 식별하여, Synchronous Event Demultiplexer가 Endpoint에서 이벤트가 발생할 때 까지 기다리도록 해줍니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;참고할만한 글
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/leveraging-event-multiplexing-even-driven-guillermo-wrba/&#34;&gt;Leveraging Event Multiplexing in Even-Driven Architectures | Guillermo Wrba&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.linecorp.com/ko/blog/do-not-block-the-event-loop-part1&#34;&gt;비동기 서버에서 이벤트 루프를 블록하면 안 되는 이유 1부 - 멀티플렉싱 기반의 다중 접속 서버로 가기까지 (linecorp.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.naver.com/n_cloudplatform/222189669084&#34;&gt;[네이버클라우드 기술&amp;amp;경험] IO Multip.. : 네이버블로그 (naver.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dbehdrhs.tistory.com/98&#34;&gt;12장 IO 멀티플렉싱(Multiplexing) (tistory.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/what-is-a-demultiplexer/&#34;&gt;What is a demultiplexer ? - GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;twisted&#34; &gt;Twisted
&lt;span&gt;
    &lt;a href=&#34;#twisted&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Python으로 작성된 Event-Driven Networking Engine으로  Event-Driven Web Server는 물론 mail, SSH Client 등을 포함하고 있어 웹 애플리케이션이 구현 가능합니다.&lt;br&gt;
Event Engine과 마찬가지로 &lt;code&gt;Reactor&lt;/code&gt; 패턴이 적용되어 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고할만한 글
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dataonair.or.kr/db-tech-reference/d-lounge/expert-column/?mod=document&amp;amp;uid=53875&#34;&gt;네트워크 프로그램 개발을 위한 파이썬 프레임워크 – DATA ON-AIR (dataonair.or.kr)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.twisted.org/en/stable/&#34;&gt;Twisted 22.10.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-worker_threads&#34; &gt;4. worker_threads
&lt;span&gt;
    &lt;a href=&#34;#4-worker_threads&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;worker_threads&lt;/code&gt;는 Javascript를 병렬 실행하는 Thread를 사용할 수 있게 해주는 모듈입니다.&lt;br&gt;
Node.js에 내장되어 있는 동기 I/O 작업이 더 효율적이므로 I/O-집약적인 작업보다 CPU-집약적인 연산을 수행하는 Javascript 실행에 더 유용합니다.&lt;br&gt;
&lt;code&gt;isMainThread&lt;/code&gt;, &lt;code&gt;Worker&lt;/code&gt;, &lt;code&gt;parentPort&lt;/code&gt;등을 통해 메인 스레드로 부터 Worker들을 만들고, Worker들이 어떤 작업을 수행할 지를 지정할 수 있습니다.&lt;br&gt;
또한 메인 스레드 &amp;lt;-&amp;gt; Worker 간 &lt;code&gt;message&lt;/code&gt; 이벤트를 발생시키거나, 메시지를 송수신할 port(&lt;code&gt;MessageChannel&lt;/code&gt;)를 만들어 데이터를 주고받을 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;worker_threads 역시 이 문서에서 다루면 너무 길어질 것 같아 추후 따로 글을 작성하겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;정리-후기&#34; &gt;정리 후기
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%95%eb%a6%ac-%ed%9b%84%ea%b8%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;공식 문서를 찾기보다 검색을 먼저 하는 습관이 어느순간부터 들어있었는데, 이번에 여러 공식 문서들을 찾아보며 공식 문서만 잘 찾아봐도 검색할 일이 많이 줄겠다는 생각이 들었다.&lt;/li&gt;
&lt;li&gt;개인적으로 역다중화, 다중화와 같은 개념부터 I/O Blocking, Non-Blocking 등 모르던 개념들을 많이 알게 되어서 나중에 이들에 대해 따로 정리하는 글을 작성해보고 싶어졌다.&lt;/li&gt;
&lt;li&gt;FE만 공부하던 입장에서 이런 동시성 관련된 문제에 공부하니 머리가 많이 깨질것 같지만(&amp;hellip;) 흥미도 많이 생기게 되었다!&lt;/li&gt;
&lt;li&gt;다음 주는 주제를 하나만 잡던가 좀 쉬운걸로 잡아야겠다.. 다른 것들도 하면서 글 정리하려니 한 주 가지고는 택도 없을 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;이외-참고한-문서-및-블로그-포스트&#34; &gt;이외 참고한 문서 및 블로그 포스트
&lt;span&gt;
    &lt;a href=&#34;#%ec%9d%b4%ec%99%b8-%ec%b0%b8%ea%b3%a0%ed%95%9c-%eb%ac%b8%ec%84%9c-%eb%b0%8f-%eb%b8%94%eb%a1%9c%ea%b7%b8-%ed%8f%ac%ec%8a%a4%ed%8a%b8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/worker_threads.html&#34;&gt;Worker threads | Node.js v20.5.0 Documentation (nodejs.org)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/docs/guides/dont-block-the-event-loop&#34;&gt;Don&amp;rsquo;t Block the Event Loop (or the Worker Pool) | Node.js (nodejs.org)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.dev/en/learn/introduction-to-nodejs/&#34;&gt;Introduction to Node.js (nodejs.dev)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick&#34;&gt;The Node.js Event Loop, Timers, and process.nextTick() | Node.js (nodejs.org)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/leveraging-event-multiplexing-even-driven-guillermo-wrba/&#34;&gt;Leveraging Event Multiplexing in Even-Driven Architectures | LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.linecorp.com/ko/blog/do-not-block-the-event-loop-part1&#34;&gt;비동기 서버에서 이벤트 루프를 블록하면 안 되는 이유 1부 - 멀티플렉싱 기반의 다중 접속 서버로 가기까지 (linecorp.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.linecorp.com/ko/blog/do-not-block-the-event-loop-part3&#34;&gt;비동기 서버에서 이벤트 루프를 블록하면 안 되는 이유 3부 - Reactor 패턴과 이벤트 루프 (linecorp.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.naver.com/n_cloudplatform/222189669084&#34;&gt;[네이버클라우드 기술&amp;amp;경험] IO Multiplexing (IO 멀티플렉싱) 기본 개념부터 심화까지 -1부- : 네이버블로그 (naver.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dbehdrhs.tistory.com/98&#34;&gt;12장 IO 멀티플렉싱(Multiplexing) (tistory.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://plummmm.tistory.com/68&#34;&gt;입출력 다중화 (I/O Multiplexing) (tistory.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>뉴스 스크랩을 위한 서비스 찾기</title>
      <link>https://cloudsoswift.github.io/post/self-development/230709/news-scrap/</link>
      <pubDate>Sun, 09 Jul 2023 03:07:19 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/self-development/230709/news-scrap/</guid>
      <description>&lt;h1 id=&#34;발단&#34; &gt;발단
&lt;span&gt;
    &lt;a href=&#34;#%eb%b0%9c%eb%8b%a8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;슬슬 SSAFY도 끝났겠다, 취업준비에 박차를 가해야 하는 상황을 맞닥들이게 되었다.&lt;br&gt;
가장 중요한건 끊임없는 CS 공부, Problem Solving 이겠지만 추후 토이프로젝트, 면접 대비를 위해서 지속적으로 IT 분야 뿐만 아니라&lt;br&gt;
전반적인 사회 흐름을 알 필요가 있다고 생각하게 되었다.
이러한 부분에 있어, 이따금씩 네이버 뉴스나 Chrome 앱의 Discover를 통해 정보를 알 순 있었긴 했다.&lt;/p&gt;
&lt;h2 id=&#34;정보-정리의-필요성을-느끼다&#34; &gt;정보 정리의 필요성을 느끼다
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%95%eb%b3%b4-%ec%a0%95%eb%a6%ac%ec%9d%98-%ed%95%84%ec%9a%94%ec%84%b1%ec%9d%84-%eb%8a%90%eb%81%bc%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;하지만 이렇게 단편적으로 기사를 보기만 하는건 Chrome 앱의 탭만 늘리거나, Obsidian의 &amp;lsquo;나중에 정리할 글&amp;rsquo; 문서의 양만 늘리고 있었다.&lt;br&gt;
그래서 이를 정리해야 겠다는 필요성을 느끼게 되었고, 옛날에 사용했던 &lt;a href=&#34;https://keep.google.com/&#34;&gt;Google Keep&lt;/a&gt;과 같은 서비스를 사용해봐야 겠다고 생각했다.&lt;br&gt;
그리고 이와 유사한 서비스들을 찾아보고 이를 정리해 블로그에 올리게 되었다.&lt;br&gt;
+ 몰랐는데 이러한 서비스들을 &lt;strong&gt;Read It Later(RIL)&lt;/strong&gt; 서비스 라고 하는 것 같다.&lt;/p&gt;
&lt;h1 id=&#34;뉴스-스크랩-서비스들&#34; &gt;뉴스 스크랩 서비스들
&lt;span&gt;
    &lt;a href=&#34;#%eb%89%b4%ec%8a%a4-%ec%8a%a4%ed%81%ac%eb%9e%a9-%ec%84%9c%eb%b9%84%ec%8a%a4%eb%93%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;주로 사용되는 뉴스 스크랩 서비스들은 다음과 같았다.&lt;/p&gt;
&lt;h2 id=&#34;notion-httpswwwnotionso&#34; &gt;Notion &lt;a href=&#34;https://www.notion.so/&#34;&gt;#&lt;/a&gt;
&lt;span&gt;
    &lt;a href=&#34;#notion-httpswwwnotionso&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;장점&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;익숙하다.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;SSAFY 생활할 때 배운 내용들 정리할 때 사용해서 익숙한 플랫폼이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;멀티 플랫폼이 된다.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;PC, 모바일 모두 가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;이미지 첨부가 간단하다.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;직접 이미지를 업로드 하는건 물론, 클립보드의 이미지도 업로드 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;원하는 부분에 &lt;strong&gt;하이라이트 및 댓글을 달 수있다&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;강조나 요약, 해석같은걸 기록하고 싶은 부분에 댓글을 달 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UI가 불편하다.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;데이터베이스 - 표&lt;/code&gt; 형식을 사용하게 될 텐데, 평소에 정보 정리할 때도 많이 불편했어서 좀 그렇다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이따금씩 &lt;strong&gt;버벅인다.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;멀티 플랫폼이라 동기화를 해서 그런지, 문서 작성 및 수정시  버벅이는 현상이 가끔 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pocket-httpsgetpocketcomko&#34; &gt;Pocket &lt;a href=&#34;https://getpocket.com/ko&#34;&gt;#&lt;/a&gt;
&lt;span&gt;
    &lt;a href=&#34;#pocket-httpsgetpocketcomko&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;참고한 리뷰&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kfact.tistory.com/309&#34;&gt;블로그 포스팅에 유용한 어플 추천(Keep, Pocket, Over)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;장점-1&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;어플이 &lt;strong&gt;깔끔하다&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;멀티 플랫폼&lt;/strong&gt;을 지원한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;광고 없이&lt;/strong&gt; 기사를 &lt;strong&gt;텍스트로 저장&lt;/strong&gt; 가능하다.&lt;/li&gt;
&lt;li&gt;기사 저장시, 원문이 변경되어도 &lt;strong&gt;저장 시점의 기사가 저장&lt;/strong&gt;되어 있다.
&lt;ul&gt;
&lt;li&gt;Pocket에 송부하는 시점의 텍스트가 저장되므로, 원본 기사가 변경되어도 저장된 기사가 남아있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점-1&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;추가 &lt;strong&gt;코멘트를 달 수 없다&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;태그&lt;/strong&gt;를 달 순 있지만, 개인적인 견해나 요약을 달기에는 부적절 해보인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;저장한 &lt;strong&gt;내용이 사라질 수도 있다&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;다른 서비스로 이주한 분의 글(&lt;a href=&#34;https://www.canda.blog/reader-by-readwise/&#34;&gt;새로운 읽는 경험: Reader by Readwise&lt;/a&gt;)을 봤는데,&lt;br&gt;
유료로 멤버십을 구독했음에도 영구저장이 기능이 제대로 동작하지 않는다고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;강력한 검색&lt;/em&gt;을 &lt;strong&gt;지원하지 못한다&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;이것도 위 단점과 마찬가지로 글에서 알게된 단점인데, 검색시 검색한 키워드와 관련없는 콘텐츠들이 검색된다고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;instapaper-httpswwwinstapapercom&#34; &gt;Instapaper &lt;a href=&#34;https://www.instapaper.com/&#34;&gt;#&lt;/a&gt;
&lt;span&gt;
    &lt;a href=&#34;#instapaper-httpswwwinstapapercom&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;참고한 리뷰&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;amp;blogId=2icct&amp;amp;logNo=220992519547&#34;&gt;[앱 리뷰 / iOS&amp;amp;Android] 깔끔하게 뉴스 기사 모아보기, &amp;lsquo;Instapaper&amp;rsquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;장점-2&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90-2&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;멀티 플랫폼&lt;/strong&gt;을 지원한다.
&lt;ul&gt;
&lt;li&gt;Web, iOS, Android를 지원한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메모&lt;/strong&gt;가 가능하다.&lt;/li&gt;
&lt;li&gt;메모, 하이라이트를 &lt;strong&gt;한 곳에서 모아볼 수 있다&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;기사를 Instapaper에서 제공하는 여러 폰트로 볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점-2&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90-2&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;태그를 지원하지 않는다&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;폴더만을 이용해서 구분해야 한다. 즉, 두 가지 이상의 기준으로 문서를 분리할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;evernote-httpsevernotecomintlko&#34; &gt;Evernote &lt;a href=&#34;https://evernote.com/intl/ko&#34;&gt;#&lt;/a&gt;
&lt;span&gt;
    &lt;a href=&#34;#evernote-httpsevernotecomintlko&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;참고한 리뷰&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jayouda.tistory.com/entry/%EB%85%B8%EC%85%98NOTION-vs-%EC%97%90%EB%B2%84%EB%85%B8%ED%8A%B8Evernote-%EB%B9%84%EA%B5%90-%EB%85%B8%ED%8A%B8-%EC%95%B1%EC%97%85%EB%AC%B4-%EC%83%9D%EC%82%B0%EC%84%B1-%ED%96%A5%EC%83%81&#34;&gt;노션(NOTION) vs 에버노트(Evernote) 비교 노트 앱(업무 생산성 향상)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;장점-3&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90-3&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;초보자&lt;/strong&gt;가 사용하기 &lt;strong&gt;편리&lt;/strong&gt;하다.
&lt;ul&gt;
&lt;li&gt;노트 -&amp;gt; 노트북 -&amp;gt; 스택의 구조로 관리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점-3&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90-3&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;메모 이동이 불편&lt;/strong&gt;하다.
&lt;ul&gt;
&lt;li&gt;여러 메모를 한 번에 이동하는게 되지 않아, 하나 하나 이동해야 한다. &lt;a href=&#34;https://jayouda.tistory.com/entry/%EB%85%B8%EC%85%98NOTION-vs-%EC%97%90%EB%B2%84%EB%85%B8%ED%8A%B8Evernote-%EB%B9%84%EA%B5%90-%EB%85%B8%ED%8A%B8-%EC%95%B1%EC%97%85%EB%AC%B4-%EC%83%9D%EC%82%B0%EC%84%B1-%ED%96%A5%EC%83%81&#34;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;여러 환경&lt;/strong&gt;에서 사용하려면 &lt;strong&gt;추가 요금&lt;/strong&gt;을 내야 한다.
&lt;ul&gt;
&lt;li&gt;무료로는 두 개의 기기에서만 사용 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;feedly-httpsfeedlycomi&#34; &gt;Feedly &lt;a href=&#34;https://feedly.com/i&#34;&gt;#&lt;/a&gt;
&lt;span&gt;
    &lt;a href=&#34;#feedly-httpsfeedlycomi&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;참고한 리뷰&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kingpinstudio.net/feedly-%ED%94%BC%EB%93%A4%EB%A6%AC/&#34;&gt;Feedly 후기. 얼마 남지 않은 RSS 리더 앱. 역시 괜히 살아남은 게 아닌&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;장점-4&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90-4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;기본적인 &lt;strong&gt;기능 및 가독성&lt;/strong&gt;이 좋다&lt;/li&gt;
&lt;li&gt;RSS를 사용하시려면 &lt;strong&gt;거의 없는 선택지&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RSS 자체가 많이 사장되다 보니 경쟁자가 많지 않다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점-4&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90-4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;내가 원하는 문서를 추가할 순 없다.
&lt;ul&gt;
&lt;li&gt;특정 토픽이나 주제를 Follow 하는 형태이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RSS 자체를 &lt;strong&gt;요즘 잘 쓰지 않는다&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RSS 자체의 &lt;strong&gt;한계점이 많다&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;유료 서비스가 &lt;strong&gt;비싸다&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;월 8달러 꼴이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;별도 &lt;strong&gt;메모가 안되는 것 같다?&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;한 번 기사를 봤는데 별도로 메모나 하이라이팅 하는 부분이 없었던 것으로 기억한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;liner-httpsgetlinercomko&#34; &gt;Liner &lt;a href=&#34;https://getliner.com/ko&#34;&gt;#&lt;/a&gt;
&lt;span&gt;
    &lt;a href=&#34;#liner-httpsgetlinercomko&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;장점-5&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90-5&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;멀티 플랫폼&lt;/strong&gt;을 지원한다.&lt;/li&gt;
&lt;li&gt;GPT-4를 이용해 &lt;strong&gt;AI가 전문을 요약&lt;/strong&gt;해준다.&lt;/li&gt;
&lt;li&gt;뉴스 뿐만 아니라 유튜브 등 다양한 곳에서 사용 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점-5&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90-5&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;추가 &lt;strong&gt;코멘트를 달 수 없다&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;태그&lt;/strong&gt;를 달 순 있지만, 개인적인 견해나 요약을 달기에는 부적절 해보인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;직접-필기-아이패드-good-note-이용-httpswww457deepcom56qytoxontzojeyoijrzxl3b3jkx3r5cguio3m6mzoiywxsijt9bmodeviewidx6412760tboard&#34; &gt;직접 필기 (아이패드 Good Note 이용) &lt;a href=&#34;https://www.457deep.com/56/?q=YToxOntzOjEyOiJrZXl3b3JkX3R5cGUiO3M6MzoiYWxsIjt9&amp;amp;bmode=view&amp;amp;idx=6412760&amp;amp;t=board&#34;&gt;#&lt;/a&gt;
&lt;span&gt;
    &lt;a href=&#34;#%ec%a7%81%ec%a0%91-%ed%95%84%ea%b8%b0-%ec%95%84%ec%9d%b4%ed%8c%a8%eb%93%9c-good-note-%ec%9d%b4%ec%9a%a9-httpswww457deepcom56qytoxontzojeyoijrzxl3b3jkx3r5cguio3m6mzoiywxsijt9bmodeviewidx6412760tboard&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;장점-6&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90-6&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;보기 깔끔하다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;직접 &lt;strong&gt;원하는 부분을 강조&lt;/strong&gt;할 수 있고, &lt;strong&gt;필기&lt;/strong&gt;도 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점-6&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90-6&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;아무래도 &lt;strong&gt;귀찮다&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;멀티 플랫폼이 아니다.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;PC에서 보려면 일일히 PDF로 만들어서 iCloud로 동기화 해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;google-keep-httpskeepgooglecom&#34; &gt;Google Keep &lt;a href=&#34;https://keep.google.com/&#34;&gt;#&lt;/a&gt;
&lt;span&gt;
    &lt;a href=&#34;#google-keep-httpskeepgooglecom&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;참고한 리뷰&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kfact.tistory.com/309&#34;&gt;블로그 포스팅에 유용한 어플 추천(Keep, Pocket, Over)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;장점-7&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90-7&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;메모&lt;/strong&gt;를 달 수있다.
&lt;ul&gt;
&lt;li&gt;그리고 이를 &lt;strong&gt;검색&lt;/strong&gt;할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;추 후 알려주는 &lt;strong&gt;알림 기능&lt;/strong&gt;을 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;사진 내에서 글자를 추출해주는 **OCR 기능(Grab Image Text)**이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점-7&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90-7&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;태그(라벨)를 하나&lt;/strong&gt; 밖에 못 단다.&lt;/li&gt;
&lt;li&gt;글을 저장할 순 없다.
&lt;ul&gt;
&lt;li&gt;링크 거는것만 가능하고, &lt;strong&gt;자동으로 글을 저장해주진 않는것&lt;/strong&gt;으로 보인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;omnivore&#34; &gt;Omnivore
&lt;span&gt;
    &lt;a href=&#34;#omnivore&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;참고한 리뷰&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s-ji.tistory.com/20&#34;&gt;옵시디언 스크랩 방법 - 내가 써본 무료앱 중 가장 편한 방법&amp;hellip;.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;장점-8&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90-8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;멀티 플랫폼&lt;/strong&gt;을 지원한다.
&lt;ul&gt;
&lt;li&gt;PC(브라우저 확장앱, Obsidian 플러그인), 모바일(iOS, Android)을 지원한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;무료&lt;/strong&gt;이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점-8&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90-8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;기사 &lt;strong&gt;저장이 안된다&lt;/strong&gt;?
&lt;ul&gt;
&lt;li&gt;테스트로 네이버 뉴스 기사를 Add Link 했는데 에러가 발생한다.&lt;/li&gt;
&lt;li&gt;근데 로그인도 안했는데 기사 저장하는 페이지가 왜 나오는거지?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;가입이 안된다!&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;어떤 username을 입력하던 &lt;strong&gt;This username is not available&lt;/strong&gt;라면서 가입이 이뤄지지 않는다.&lt;/li&gt;
&lt;li&gt;콘솔로 확인해보니 graphQL을 통해 username 중복을 체크하는듯 한데, CORS 에러로 이 절차가 정상적으로 이뤄지지 않는 것 같다.&lt;br&gt;
&lt;img src=&#34;post/self-development/230709/20230709_065008.png&#34; alt=&#34;Error_Pic&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;readwise-httpsreadwiseio&#34; &gt;Readwise &lt;a href=&#34;https://readwise.io/&#34;&gt;#&lt;/a&gt;
&lt;span&gt;
    &lt;a href=&#34;#readwise-httpsreadwiseio&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;참고한 리뷰&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.naver.com/millie-kasten/222918204997&#34;&gt;생산성도구 리뷰 #1: Readwise 리드와이즈&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;장점-9&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90-9&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Notion, Roam, Evernote, Obsidian 등의 서비스로 &lt;strong&gt;하이라이트 한 내용을 내보낼 수 있다&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;이메일&lt;/strong&gt;을 통해 &lt;strong&gt;하이라이트 한 부분을 랜덤으로 보내주는 기능&lt;/strong&gt;이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점-9&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90-9&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;유료&lt;/strong&gt;다
&lt;ul&gt;
&lt;li&gt;30일 체험 이후 월 $7.99를 결제해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reader-by-readwise-httpsreadwiseioread&#34; &gt;Reader by Readwise &lt;a href=&#34;https://readwise.io/read&#34;&gt;#&lt;/a&gt;
&lt;span&gt;
    &lt;a href=&#34;#reader-by-readwise-httpsreadwiseioread&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;참고한 리뷰&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.canda.blog/reader-by-readwise/&#34;&gt;새로운 읽는 경험: Reader by Readwise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;장점-10&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90-10&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UI가 깔끔&lt;/strong&gt;하다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;검색(Full-context search)&lt;/strong&gt; 기능이 &lt;strong&gt;강력&lt;/strong&gt;하다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;태그&lt;/strong&gt;, &lt;strong&gt;노트&lt;/strong&gt; 모두 &lt;strong&gt;지원&lt;/strong&gt;한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점-10&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90-10&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;노트 기준&lt;/strong&gt;으론 &lt;strong&gt;검색이 안 된다&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;유료&lt;/strong&gt;다.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Readwise 구독&lt;/strong&gt;이 필요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;조건&#34; &gt;조건
&lt;span&gt;
    &lt;a href=&#34;#%ec%a1%b0%ea%b1%b4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;어플&lt;/strong&gt;로 서비스 되고 있어야 한다.
&lt;ul&gt;
&lt;li&gt;물론 &lt;strong&gt;PC에서도 사용 가능&lt;/strong&gt;하여야 하며, 따라서 &lt;strong&gt;멀티 플랫폼으로 동기화&lt;/strong&gt;가 되어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;요약을 달기 위해 추가적인 &lt;strong&gt;코멘트를 달 수 있는 기능&lt;/strong&gt;이 있어야 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;기사 내용을 저장&lt;/strong&gt;할 수 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;후보군&#34; &gt;후보군
&lt;span&gt;
    &lt;a href=&#34;#%ed%9b%84%eb%b3%b4%ea%b5%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;크게 위의 두 조건을 만족하는 서비스는 아래와 같았다.
&lt;ul&gt;
&lt;li&gt;Notion&lt;/li&gt;
&lt;li&gt;Instapaper&lt;/li&gt;
&lt;li&gt;Evernote&lt;/li&gt;
&lt;li&gt;Readwise&lt;/li&gt;
&lt;li&gt;Omnivore&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;그래서-뭐-쓸건데&#34; &gt;그래서 뭐 쓸건데?
&lt;span&gt;
    &lt;a href=&#34;#%ea%b7%b8%eb%9e%98%ec%84%9c-%eb%ad%90-%ec%93%b8%ea%b1%b4%eb%8d%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;솔직히 이렇게 많은 RIL 서비스들이 있는줄 몰랐고, 다들 장,단점이 있어서 고르기 많이 힘들었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;특히 한글로 정리되어 있는 글이 많이 없어서 더 힘들었던 것도 있다.&lt;br&gt;
(리뷰 올려주신 분들 정말 감사합니다&amp;hellip; (_ _))&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;좀 믿을만한(운영 주체가 대기업인) 서비스의 경우, &lt;em&gt;한 두군데씩 나사빠진 부분&lt;/em&gt;(&lt;em&gt;노트가 불가능하다거나, 사용이 불편하다거나&amp;hellip;&lt;/em&gt;)이 있었고,&lt;br&gt;
나한테 맞고 쓸만해보이는 서비스의 경우 신생이거나 점유율이 높지않아&lt;br&gt;
&lt;em&gt;데이터 보관&lt;/em&gt;에 대한 &lt;strong&gt;신뢰성&lt;/strong&gt;이 떨어져서 고민이 되었다.&lt;/p&gt;
&lt;h2 id=&#34;결론&#34; &gt;결론
&lt;span&gt;
    &lt;a href=&#34;#%ea%b2%b0%eb%a1%a0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;데이터 저장이 믿을만한 &lt;strong&gt;Notion&lt;/strong&gt; 또는 &lt;strong&gt;Obsidian&lt;/strong&gt;을 사용하기로 했다.
&lt;ul&gt;
&lt;li&gt;그 중에서도 Local 단에서 데이터 저장이 가능한 &lt;strong&gt;Obsidian&lt;/strong&gt;을 Main으로 사용할 것 같다.&lt;/li&gt;
&lt;li&gt;대신 기사 스크랩에 있어 효율성을 높이기 위해 &lt;strong&gt;Readwise&lt;/strong&gt; 또는 &lt;strong&gt;Omnivore&lt;/strong&gt;를 사용할 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Omnivore&lt;/strong&gt;를 시도해보고, 원활한 작동이 이뤄지지 않는다면 &lt;strong&gt;Readwise&lt;/strong&gt;가 제공하는 30일 free trial을 시도해보고 결제할지 말지 고민할 듯 싶다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps. 이 문서는 많이 정리가 부족하다고 느껴져서 추후에 Omnivore, Readwise를 시도해보고 업데이트 할 예정이다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Javascript] 순환 참조 (Circular Import)</title>
      <link>https://cloudsoswift.github.io/post/develop/230219/circular_import/</link>
      <pubDate>Sun, 19 Feb 2023 11:22:33 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/develop/230219/circular_import/</guid>
      <description>&lt;p&gt;오늘은 Javascript, Python같은 언어에서 import시 발생할 수 있는 순환 참조 에러에 대한 포스트를 작성하고자 한다.&lt;/p&gt;
&lt;h1 id=&#34;순환-참조&#34; &gt;순환 참조
&lt;span&gt;
    &lt;a href=&#34;#%ec%88%9c%ed%99%98-%ec%b0%b8%ec%a1%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;h2 id=&#34;메모리-관점에서의-순환-참조--in-javascript-&#34; &gt;메모리 관점에서의 순환 참조 ( In Javascript )
&lt;span&gt;
    &lt;a href=&#34;#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b4%80%ec%a0%90%ec%97%90%ec%84%9c%ec%9d%98-%ec%88%9c%ed%99%98-%ec%b0%b8%ec%a1%b0--in-javascript-&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;간단히 요약하자면, 서로 다른 두 객체가 서로를 참조하여, 가비지 컬렉션 알고리즘의 대상에 포함되지 않아 해당 객체들이 불필요해져도 메모리 회수되지 않고 존속하게되는 문제이다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management&#34;&gt;Mozilla Developer Network의 문서&lt;/a&gt;의 예시를 드는게 이해하기 쉽다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;;         &lt;span style=&#34;color:#75715e&#34;&gt;// x는 y를 참조합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;;         &lt;span style=&#34;color:#75715e&#34;&gt;// y는 x를 참조합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azerty&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;다음 예제에서는 두 객체가 서로 참조하는 속성으로 생성되어 순환 구조를 생성합니다.&lt;br&gt;
함수 호출이 완료되면 이 두 객체는 스코프를 벗어나게 될 것이며, 그 시점에서 두 객체는 불필요해지므로 할당된 메모리는 회수되어야 합니다.&lt;br&gt;
그러나 두 객체가 서로를 참조하고 있으므로, &lt;strong&gt;참조-세기 알고리즘&lt;/strong&gt;은 둘 다 가비지 컬렉션의 대상으로 표시하지 않습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;참조-세기(Reference-counting) 알고리즘&lt;/strong&gt; : 가비지 컬렉션시 사용하는 알고리즘으로, &amp;ldquo;어떤 다른 객체도 참조하지 않는 객체&amp;quot;를 더 이상 필요없는 객체로 인식하고 가비지 컬렉션을 수행.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;import에서의-순환-참조circular-dependencies-in-javascript&#34; &gt;import에서의 순환 참조(Circular Dependencies) (In Javascript)
&lt;span&gt;
    &lt;a href=&#34;#import%ec%97%90%ec%84%9c%ec%9d%98-%ec%88%9c%ed%99%98-%ec%b0%b8%ec%a1%b0circular-dependencies-in-javascript&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2가지 이상의 모듈에서 import가 꼬리의 꼬리를 물어 순환 구조를 이루어 에러가 발생하는 경우.&lt;/li&gt;
&lt;li&gt;예시
&lt;img src=&#34;https://cloudsoswift.github.io/post/develop/230219/circular.png&#34; alt=&#34;circular import&#34;&gt;&lt;/li&gt;
&lt;li&gt;위와 같이 참조의 순환 고리가 발생하게 될 경우, 그 고리의 어느 한 모듈(&lt;em&gt;순환 고리안의 다른 모듈을 참조하는&lt;/em&gt;)을 이용하려 하면&lt;br&gt;
&lt;code&gt;ReferenceError: Cannot access &#39;모듈 이름&#39; before initialization&lt;/code&gt;&lt;br&gt;
라며 에러가 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;나의-사례&#34; &gt;나의 사례
&lt;span&gt;
    &lt;a href=&#34;#%eb%82%98%ec%9d%98-%ec%82%ac%eb%a1%80&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;본인은 &lt;em&gt;Axios 모듈&lt;/em&gt;, &lt;em&gt;Redux 객체(store)를 export 하는 모듈&lt;/em&gt;, &lt;em&gt;Redux Toolkit의 slice 객체를 export하는 모듈&lt;/em&gt;를 사용하며 React 프로젝트를 개발하고 있었다.&lt;/li&gt;
&lt;li&gt;개발 초-중반기에만 해도 &lt;em&gt;&lt;strong&gt;&amp;lsquo;Redux 객체 -&amp;gt; Redux Toolkit의 Slice 객체&amp;rsquo;&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;&amp;lsquo;Slice 객체 -&amp;gt; Axios 모듈&amp;rsquo;&lt;/strong&gt;&lt;/em&gt; 로의 참조 외에는 모듈간의 연관관계가 존재하지 않아 순환 참조가 발생하지 않아 에러가 발생하지 않았다.
&lt;img src=&#34;https://cloudsoswift.github.io/post/develop/230219/before_circular_import.png&#34; alt=&#34;before_circular_import&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;&amp;lsquo;Redux 객체 -&amp;gt; Redux Toolkit의 Slice 객체&amp;rsquo;&lt;/strong&gt;&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;Redux Toolkit Slice들의 Reducer를 모은 rootReducer를 메인 Redux객체(store)에 할당하기 위해 Slice 객체를 참조.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;&amp;lsquo;Slice 객체 -&amp;gt; Axios 모듈&amp;rsquo;&lt;/strong&gt;&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;비동기 작업 후 state를 update하는 로직을 위해, Redux 액션 생성함수(Action Creator)를 만들어서 사용하였다.&lt;/li&gt;
&lt;li&gt;이 때, 비동기 작업을 위해 Axios 모듈을 사용했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;사건의-발단&#34; &gt;사건의 발단
&lt;span&gt;
    &lt;a href=&#34;#%ec%82%ac%ea%b1%b4%ec%9d%98-%eb%b0%9c%eb%8b%a8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;그러다 Axios 모듈에 interceptor를 설정해, request를 보내기 전 &amp;lsquo;유저 Slice&amp;rsquo;에 저장된 AccessToken을 불러와 Header에 첨부해주려 했는데 순환 참조 에러가 발생했다.&lt;br&gt;
&lt;code&gt;Uncaught ReferenceError: Cannot access &#39;__WEBPACK_DEFAULT_EXPORT__&#39; before initialization&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;해당 에러를 맞닥들인 당시, 나는 &amp;lsquo;순환 참조&amp;rsquo;라는 개념도 잘 알지 못했고 이러한 행위가 에러를 발생시킨다는 것 역시 알지 못했다.&lt;/li&gt;
&lt;li&gt;그리고 여러 글들을 찾아 보다가, 관련된 &lt;a href=&#34;https://stackoverflow.com/questions/65038253/uncaught-referenceerror-cannot-access-webpack-default-export-before-initi&#34;&gt;stackoverflow 글&lt;/a&gt;을 보고 어느정도 왜 에러를 발생시키는 행위인지 알 수 있었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;원인&#34; &gt;원인
&lt;span&gt;
    &lt;a href=&#34;#%ec%9b%90%ec%9d%b8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;request를 보내기 전에 Redux Store를 확인하고 만약 AccessToken이 존재하면 해당 값 가져와서 &lt;em&gt;Header의 Authorization&lt;/em&gt;으로 설정한 뒤 요청을 보내는 로직을 수행하는 interceptor를 Axios 모듈에다 달아주고 싶었다.&lt;/li&gt;
&lt;li&gt;React에서 자주 쓰던것 처럼, &lt;code&gt;useDispatch()&lt;/code&gt;훅을 통해 dispatch 함수를 반환 받아, Action Creator를 통해 만든 Action을 dispatch하는 방식으로 AccessToken을 가져오는 것이 원래 계획이었다.&lt;/li&gt;
&lt;li&gt;그러나 &lt;em&gt;Axios 모듈&lt;/em&gt;은 React Component가 아니기 때문에, React Component 외부에서는 &lt;em&gt;Redux Store 모듈&lt;/em&gt;을 불러와 Store 객체가 갖고있는 dispatch 함수를 호출해야 했다.&lt;/li&gt;
&lt;li&gt;그래서 &lt;em&gt;Redux Store 모듈&lt;/em&gt;을 불러와 dispatch를 함수를 호출하려 했는데, Redux Store를 불러오는 로직을 추가하니 상기한 내용의 에러를 내놓고 있었다.&lt;/li&gt;
&lt;li&gt;즉, &lt;em&gt;Axios 모듈&lt;/em&gt;에서 &lt;em&gt;Redux Store 모듈&lt;/em&gt;을 import함으로써 아래와 같은 구조가 형성되어 버린것이었다.
&lt;img src=&#34;https://cloudsoswift.github.io/post/develop/230219/after_circular_import.png&#34; alt=&#34;after_circular_import&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;store 객체를 생성하려면 &lt;em&gt;user-slice의 reducer가 필요&lt;/em&gt;해 &lt;em&gt;&lt;strong&gt;user-slice.js를 import&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;user-slice.js 내부에 정의된 Action Creator 함수는 비동기 작업을 처리하기 위해 &lt;em&gt;Axios 모듈이 필요&lt;/em&gt;해 &lt;em&gt;&lt;strong&gt;http.js를 import&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Axios 모듈에서는 store 객체 안에 저장된 AccessToken을 가져오기 위해 &lt;em&gt;store 객체가 필요&lt;/em&gt;해 &lt;em&gt;&lt;strong&gt;store.js를 import&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;해결&#34; &gt;해결?
&lt;span&gt;
    &lt;a href=&#34;#%ed%95%b4%ea%b2%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Action Creator 함수&lt;/em&gt;, Store에 접근하는 &lt;em&gt;interceptor&lt;/em&gt;, Slice들의 reducer를 combine해 사용하는 &lt;em&gt;store 객체&lt;/em&gt; 모두 놓치고 싶지 않았지만, 에러를 해결해야 해 어쩔 수 없이 &lt;em&gt;&lt;strong&gt;Action Creator 함수&lt;/strong&gt;&lt;/em&gt;를 사용하지 않는 방향으로 코드를 수정했다.
&lt;ul&gt;
&lt;li&gt;Axios 모듈을 사용하는 Action Creator 함수로 로그인, 로그아웃이 있었는데, 해당 작업을 각 기능을 사용하는 component(로그인 - 로그인 페이지, 로그아웃 - 네비게이션 바)에서 정의하도록 하여 순환 관계를 끊었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;결론&#34; &gt;결론?
&lt;span&gt;
    &lt;a href=&#34;#%ea%b2%b0%eb%a1%a0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;순환 참조가 발생할 경우, 순환 고리에 포함된 모듈(객체)들은 생성이 안 되어 사용이 불가능하므로 순환 참조가 발생하지 않도록 코드를 짜는것이 중요하다는걸 몇 시간의 실랑이 끝에 알 수 있었다&amp;hellip;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>블로그 시작</title>
      <link>https://cloudsoswift.github.io/post/etc/230124/2023-01-24-start/</link>
      <pubDate>Tue, 24 Jan 2023 08:35:50 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/etc/230124/2023-01-24-start/</guid>
      <description>&lt;p&gt;블로그를 시작하면서 마주치는 선택지와 내가 선택한 것들을 정리해보고자 한다.&lt;/p&gt;
&lt;h2 id=&#34;플랫폼&#34; &gt;플랫폼
&lt;span&gt;
    &lt;a href=&#34;#%ed%94%8c%eb%9e%ab%ed%8f%bc&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;기존의-blog-서비스--tistory-naver-velog-등-&#34; &gt;기존의 blog 서비스 ( Tistory, Naver, velog 등&amp;hellip; )
&lt;span&gt;
    &lt;a href=&#34;#%ea%b8%b0%ec%a1%b4%ec%9d%98-blog-%ec%84%9c%eb%b9%84%ec%8a%a4--tistory-naver-velog-%eb%93%b1-&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;안정적으로 서비스 됨. ( 배포, 댓글 이런거 신경 안 써도 됨. )&lt;/li&gt;
&lt;li&gt;미리 어느정도 템플릿이 잡혀있음.
&lt;ul&gt;
&lt;li&gt;커스터마이징에 제한.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;github-pages를-이용&#34; &gt;Github Pages를 이용
&lt;span&gt;
    &lt;a href=&#34;#github-pages%eb%a5%bc-%ec%9d%b4%ec%9a%a9&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;배포, 댓글 같은 점들을 내가 직접 설정&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 이용.&lt;/li&gt;
&lt;li&gt;기존의 Blog 서비스를 이용하는게 더 stable하다는건 알지만, 그래도 뭔가 새로운 시도를 해보고싶어서 Github Pages를 이용해 배포하는걸로 결정!
&lt;ul&gt;
&lt;li&gt;+ 올해 들어 Obsidian을 통해 markdown으로 생각이나 정보같은걸 정리하고 있었는데, 이 방식을 통해 Markdown 문서를 더 많이 작성하면 Markdown에 더 익숙해 질 것 같았다!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;블로그github-pages-프레임워크static-site-generator&#34; &gt;블로그(Github Pages) 프레임워크(Static Site Generator)
&lt;span&gt;
    &lt;a href=&#34;#%eb%b8%94%eb%a1%9c%ea%b7%b8github-pages-%ed%94%84%eb%a0%88%ec%9e%84%ec%9b%8c%ed%81%acstatic-site-generator&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;jekyll&#34; &gt;Jekyll
&lt;span&gt;
    &lt;a href=&#34;#jekyll&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ruby 기반&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Github Pages에서 사용하고 있어 호환성이 높다&lt;/li&gt;
&lt;li&gt;윈도우를 공식적으로ㅠㅠ 지원ㅠㅠ 하지않음ㅠㅠ.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hexo&#34; &gt;Hexo
&lt;span&gt;
    &lt;a href=&#34;#hexo&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;js 기반&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;만든 사람이 대만인.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hugo&#34; &gt;Hugo
&lt;span&gt;
    &lt;a href=&#34;#hugo&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Go 기반&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;반응속도가 다른 프레임워크들 보다 월등히 빠르다.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;윈도우를 공 식 적 으 로 지 원 함.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hugo를-선택한-이유&#34; &gt;Hugo를 선택한 이유
&lt;span&gt;
    &lt;a href=&#34;#hugo%eb%a5%bc-%ec%84%a0%ed%83%9d%ed%95%9c-%ec%9d%b4%ec%9c%a0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Star 갯수 (2023. 01. 22 기준)
&lt;ul&gt;
&lt;li&gt;Hugo (64.9k) &amp;raquo;&amp;raquo;&amp;gt; Jekyll (46k) &amp;raquo;&amp;gt; hexo ( 36.1k )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows를 공식적으로 지원한다는 점.&lt;/li&gt;
&lt;li&gt;Go를 이번 기회에 한 번 써보고 싶었음.&lt;/li&gt;
&lt;li&gt;소위 홍대병이라고 하는 힙스터 기질이 발동해서(&amp;hellip;.)&lt;/li&gt;
&lt;li&gt;+ &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo Themes&lt;/a&gt;에서 Theme를 찾아보는데, 맘에 드는 &lt;a href=&#34;https://themes.gohugo.io/themes/hugo-theme-stack/&#34;&gt;Theme&lt;/a&gt;를 발견했다. &lt;br/&gt;(반응형도 잘 되길래 더 꽂혀버림&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hugo-설치-및-설정&#34; &gt;Hugo 설치 및 설정
&lt;span&gt;
    &lt;a href=&#34;#hugo-%ec%84%a4%ec%b9%98-%eb%b0%8f-%ec%84%a4%ec%a0%95&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 환경에 Hugo를 설치할 때, &lt;a href=&#34;https://gohugo.io/installation/windows/&#34;&gt;다양한 방법&lt;/a&gt;이 있지만 이미 빌드된 바이너리들을 사용하는 방법으로 설치하기로 했다.
&lt;ul&gt;
&lt;li&gt;Hugo의 Github Repository의 &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;최신 release&lt;/a&gt;를 다운받고, 시스템 전역변수에 Path로 추가해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;사이트-생성&#34; &gt;사이트 생성
&lt;span&gt;
    &lt;a href=&#34;#%ec%82%ac%ec%9d%b4%ed%8a%b8-%ec%83%9d%ec%84%b1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo new site myHugo&lt;/code&gt; 명령어를 통해 새로운 site를 생성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;테마-추가&#34; &gt;테마 추가
&lt;span&gt;
    &lt;a href=&#34;#%ed%85%8c%eb%a7%88-%ec%b6%94%ea%b0%80&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo Themes&lt;/a&gt;에 들어가서 원하는 테마를 찾아본다.&lt;/li&gt;
&lt;li&gt;본인의 경우, &lt;a href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;&gt;Hugo Theme Stack&lt;/a&gt; 이라는 테마를 선택함.&lt;/li&gt;
&lt;li&gt;웬만하면 Downloads 링크가 Github Repository로 연결되어 있을 것인데, 해당 Repo를 Site 폴더의 submodule로 추가해준다.&lt;br&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git init
git submodule add [theme repo 주소] themes/[테마 이름] 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;이후 추가적인 설정을 위해 theme 폴더 안의 config 파일이나, site 폴더 안의 config 파일을 수정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;글-쓰기&#34; &gt;글 쓰기
&lt;span&gt;
    &lt;a href=&#34;#%ea%b8%80-%ec%93%b0%ea%b8%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo new post/파일명.md&lt;/code&gt; 를 통해 새 문서를 만든다.&lt;/li&gt;
&lt;li&gt;이러면 Hugo가 해당 위치에 &lt;a href=&#34;https://gohugo.io/content-management/front-matter/&#34;&gt;Front Matter&lt;/a&gt;라고 부르는 해당 글에대한 metadata가 미리 작성되어 있는 Markdown 파일을 만들어 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;로컬단에서-확인해보기&#34; &gt;로컬단에서 확인해보기
&lt;span&gt;
    &lt;a href=&#34;#%eb%a1%9c%ec%bb%ac%eb%8b%a8%ec%97%90%ec%84%9c-%ed%99%95%ec%9d%b8%ed%95%b4%eb%b3%b4%ea%b8%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo server&lt;/code&gt; 명령어를 통해 로컬단에서 미리 블로그가 어떻게 보일지를 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;보통 &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;로 접근할 수 있다.&lt;/li&gt;
&lt;li&gt;VS Code에서 Live Server 쓰는것 마냥 변경사항이 바로바로 반영되어서 확인하기 편했다!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;build-및-git에-올리기&#34; &gt;Build 및 Git에 올리기
&lt;span&gt;
    &lt;a href=&#34;#build-%eb%b0%8f-git%ec%97%90-%ec%98%ac%eb%a6%ac%ea%b8%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;build&#34; &gt;Build
&lt;span&gt;
    &lt;a href=&#34;#build&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo -t [테마 이름]&lt;/code&gt; 명령어를 사용하면, &lt;code&gt;/public&lt;/code&gt; 폴더 안에 빌드된 Site 데이터들이 저장된다.&lt;/li&gt;
&lt;li&gt;참고로 밑에서 git에서 submodule을 추가할 때, public 폴더가 이미 존재하면 추가가 안되니 먼저 submodule add를 해주고 build 작업을 진행해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;git에-올리기&#34; &gt;Git에 올리기
&lt;span&gt;
    &lt;a href=&#34;#git%ec%97%90-%ec%98%ac%eb%a6%ac%ea%b8%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;아까 Theme 설치할 때, Git init 작업을 진행했으므로, init은 생략한다.
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote add origin [Hugo Site 폴더 저장할 Repo 주소]
git submodule add -b master [실제 Github Pages에 올릴 Repo 주소] public
&lt;/code&gt;&lt;/pre&gt;이후 두 Git Repo에 대해 각각 add -&amp;gt; commit -&amp;gt; push 과정을 수행하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;참고한-글&#34; &gt;참고한 글
&lt;span&gt;
    &lt;a href=&#34;#%ec%b0%b8%ea%b3%a0%ed%95%9c-%ea%b8%80&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ialy1595.github.io/post/blog-construct-1/&#34;&gt;IALY1595님 블로그&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;되게 자세하게 문서화 해주시고, 추가로 Theme Customizing에 관한 글도 써두셔서 블로그 만드는데 도움이 정말 많이 되었습니다&amp;hellip; 감사합니다 (_ _)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://selfinvestfriends.tistory.com/79&#34;&gt;self invest님 블로그&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;마찬가지로 자세히 문서화 해주시고, 추가로 github action으로 자동화하는 방법까지 작성해주셨다. 아직 자동화까진 적용 안해봤지만 참고할 예정&amp;hellip; 감사합니다 (_ _)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>첫 글</title>
      <link>https://cloudsoswift.github.io/post/etc/2023-01-23-first-init/</link>
      <pubDate>Mon, 23 Jan 2023 01:32:17 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/etc/2023-01-23-first-init/</guid>
      <description>&lt;h1 id=&#34;블로그에-쓰는-첫-글이다&#34; &gt;블로그에 쓰는 첫 글이다.
&lt;span&gt;
    &lt;a href=&#34;#%eb%b8%94%eb%a1%9c%ea%b7%b8%ec%97%90-%ec%93%b0%eb%8a%94-%ec%b2%ab-%ea%b8%80%ec%9d%b4%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ol start=&#34;2023&#34;&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;23&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cloudsoswift.github.io/archives/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cloudsoswift.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://cloudsoswift.github.io/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cloudsoswift.github.io/about/</guid>
      <description>&lt;p&gt;추후 작성 예정입니다&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
