<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DBeaver on 오늘도 개발을 한다.</title>
    <link>https://cloudsoswift.github.io/tags/dbeaver/</link>
    <description>오늘도 개발을 한다. (DBeaver)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Wed, 18 Dec 2024 09:12:20 +0900</lastBuildDate>
    
    <atom:link href="https://cloudsoswift.github.io/tags/dbeaver/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[DB] PostgreSQL 알아보기 &#43; PostGIS를 활용한 연산해보기 (w. DBeaver, GiST)</title>
      <link>https://cloudsoswift.github.io/post/develop/database/postgresql-common/</link>
      <pubDate>Wed, 18 Dec 2024 09:12:20 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/develop/database/postgresql-common/</guid>
      <description>&lt;h1 id=&#34;서론&#34; &gt;서론
&lt;span&gt;
    &lt;a href=&#34;#%ec%84%9c%eb%a1%a0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/orm712/CS-712&#34;&gt;CS 스터디&lt;/a&gt;에서 12월 17일 발표한 &lt;a href=&#34;https://github.com/orm712/CS-712/blob/main/04-DATABASE/19_PostgreSQL/Readme.md&#34;&gt;PostgreSQL 알아보기&lt;/a&gt;에 대해 정리하고, 이를 실습해본 문서를 블로그에 공유하고자 한다.&lt;/p&gt;
&lt;h1 id=&#34;개요&#34; &gt;개요
&lt;span&gt;
    &lt;a href=&#34;#%ea%b0%9c%ec%9a%94&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&#34;postgresql&#34; &gt;&lt;code&gt;PostgreSQL&lt;/code&gt;?
&lt;span&gt;
    &lt;a href=&#34;#postgresql&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;복잡한 데이터 워크로드들을 안전하게 저장 및 확장할 수 있는 기능들을 제공하는 오픈 소스 &lt;code&gt;객체-관계형 데이터베이스 시스템&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;객체-관계형 DB(Object-relational DB, ORD)&lt;/code&gt;: 일반적인 &lt;code&gt;관계형 DB&lt;/code&gt;와 유사하지만, &lt;code&gt;객체지향 개념&lt;/code&gt;이 추가적으로 지원되는 DB. 즉, DB단에서 &lt;code&gt;클래스&lt;/code&gt;, &lt;code&gt;객체&lt;/code&gt; 및 &lt;code&gt;상속&lt;/code&gt;의 개념을 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2001년부터 &lt;code&gt;ACID&lt;/code&gt;를 지원해왔으며, 대부분의 &lt;code&gt;주요 OS들을 지원&lt;/code&gt;함
&lt;ul&gt;
&lt;li&gt;Linux(Debian, Ubuntu, Redhat 등..), macOS, Windows, BSD(OpenBSD, FreeBSD, ..), Solaris&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;지리공간 데이터&lt;/code&gt;를 효과적으로 저장 및 인덱싱하고 관련 쿼리를 지원하는 &lt;a href=&#34;https://postgis.net/&#34;&gt;&lt;code&gt;PostGIS&lt;/code&gt;&lt;/a&gt;, DB단에서 암호화를 수행할 수 있는 기능들을 제공하는 &lt;a href=&#34;https://www.postgresql.org/docs/current/pgcrypto.html&#34;&gt;&lt;code&gt;pgcrypto&lt;/code&gt;&lt;/a&gt;와 같은 다양한 확장 기능들을 사용할 수 있음&lt;/li&gt;
&lt;li&gt;(2023년 기준) &lt;a href=&#34;https://en.wikipedia.org/wiki/SQL:2023&#34;&gt;&lt;code&gt;SQL:2023(*또는 ISO/IEC 9075*)&lt;/code&gt;&lt;/a&gt;의 필수 기능 177개 중 170 이상을 준수하는, &lt;code&gt;가장 표준을 완벽하게 준수하는 관계형 DB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;기원&#34; &gt;기원
&lt;span&gt;
    &lt;a href=&#34;#%ea%b8%b0%ec%9b%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PostgreSQL&lt;/code&gt;은 버클리 캘리포니아 대학교에서 작성된 &lt;code&gt;POSTGRE&lt;/code&gt; 패키지로부터 파생됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;postgres-프로젝트&#34; &gt;&lt;code&gt;POSTGRES&lt;/code&gt; 프로젝트
&lt;span&gt;
    &lt;a href=&#34;#postgres-%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Michael_Stonebraker&#34;&gt;마이클 스톤브레이커&lt;/a&gt; 교수가 주도한 프로젝트로, 1986년 구현이 시작됨&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POSTGRES&lt;/code&gt;는 &lt;code&gt;INGRES&lt;/code&gt;의 후속으로 1986년 개발되기 시작한 DBMS
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.seas.upenn.edu/~zives/cis650/papers/INGRES.PDF&#34;&gt;&lt;code&gt;INGRES&lt;/code&gt;&lt;/a&gt;: 1975년 개발되기 시작한 &lt;code&gt;관계형 DBMS&lt;/code&gt;로, UNIX 운영체제 상에서 동작하며 쿼리 언어로 &lt;code&gt;QUEL&lt;/code&gt;을 사용(이후 SQL도 지원)
&lt;ul&gt;
&lt;li&gt;참고
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1499949.1500029&#34;&gt;INGRES—A relational data base system* - by G. D. HELD, M. R. STONEBRAKER and E. WONG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.seas.upenn.edu/~zives/cis650/papers/INGRES.PDF&#34;&gt;The Design and Implementation of Ingres&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INGRES&lt;/code&gt;의 초기 설계로는 스톤브레이커 교수를 포함한 개발진들이 &lt;strong&gt;추가 및 확장하고 싶은 기능들을 &lt;code&gt;INGRES&lt;/code&gt;에 통합할 수 없어&lt;/strong&gt;, 새로운 데이터베이스 시스템인 &lt;code&gt;POSTGRES&lt;/code&gt;를 구축하게 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POSTGRES&lt;/code&gt;의 목표는 크게 다음과 같음 &lt;a href=&#34;https://dsf.berkeley.edu/papers/ERL-M85-95.pdf&#34;&gt;#&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;복잡한 객체&lt;/code&gt;를 더 원활하게 지원할 것
&lt;ul&gt;
&lt;li&gt;기존의 관계형 데이터베이스가 적합하지 않았던 &lt;code&gt;CAD 시스템&lt;/code&gt;, &lt;code&gt;지리 데이터&lt;/code&gt; 등의  환경에 대한 지원&lt;/li&gt;
&lt;li&gt;즉, 이러한 환경에서 사용되는 &lt;code&gt;지오메트리&lt;/code&gt;(&lt;code&gt;Point&lt;/code&gt;, &lt;code&gt;Polygon&lt;/code&gt;, &amp;hellip;)와 같은 타입의 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터 타입, 연산자 및 접근 방법에 대한 &lt;code&gt;사용자 확장성&lt;/code&gt; 제공
&lt;ul&gt;
&lt;li&gt;이 역시, CAD용 &lt;code&gt;기하학 자료형&lt;/code&gt;이나, 매핑 애플리케이션용 &lt;code&gt;위도/경도&lt;/code&gt;와 같은 &lt;code&gt;자료형&lt;/code&gt;과 &lt;code&gt;연산자&lt;/code&gt;를 DBMS에 &lt;code&gt;추가할 수 있는 기능&lt;/code&gt;을 제공하고, 일부 유형에 적합한 &lt;code&gt;액세스 방법&lt;/code&gt;(ex. &lt;code&gt;Point&lt;/code&gt; -&amp;gt; &lt;code&gt;K-D-B 트리&lt;/code&gt;, &lt;code&gt;Polygon&lt;/code&gt; -&amp;gt; &lt;code&gt;R-트리&lt;/code&gt;) 방법을 추가할 수 있도록 하는 것을 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;활성 데이터베이스&lt;/code&gt;(알림 및 트리거)와 &lt;code&gt;포워드/백워드 체이닝&lt;/code&gt;에 대한 추론을 위한 기능 제공
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;활성 데이터베이스&lt;/code&gt; &lt;a href=&#34;https://dl.acm.org/doi/10.1145/311531.311623&#34;&gt;#&lt;/a&gt;: 데이터베이스 내/외부에서 발생하는 &lt;code&gt;이벤트에 대응&lt;/code&gt;할 수 있는 &lt;code&gt;이벤트-기반 구조&lt;/code&gt;를 포함하는 데이터베이스.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;포워드/백워드 체이닝&lt;/code&gt; &lt;a href=&#34;https://www.geeksforgeeks.org/difference-between-backward-and-forward-chaining/&#34;&gt;#&lt;/a&gt;: 데이터 기반 추론에서, &amp;lsquo;알려진 사실에 규칙을 적용해 나가 목표까지 도달하는 추론 기법&amp;rsquo;(&lt;code&gt;포워드 체이닝&lt;/code&gt;)과 &amp;lsquo;목표에서 시작해 역방향으로 알려진 사실에 도달하는 추론 기법&amp;rsquo;(&lt;code&gt;백워드 체이닝&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;버그 리포트 시스템처럼, 특정 이벤트가 발생시 관리자에게 알림을 보내거나(&lt;code&gt;alerter&lt;/code&gt;) 특정 데이터의 업데이트 발생시 일관성 유지를 위해 업데이트를 전파(&lt;code&gt;trigger&lt;/code&gt;) 할 수 있도록 &lt;code&gt;활성 데이터베이스&lt;/code&gt;와 &lt;code&gt;규칙(rule)&lt;/code&gt;을 지원하는 것
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;규칙&lt;/code&gt;의 경우, 일정한 규칙(ex. 수업 일정 DB에서 교수는 N학점 이상 강의를 개설 및 진행하고 &amp;hellip; 와 같은 규칙)을 따르는 테이블이라면, 복잡한 제약 조건들로 이를 강제하는 것이 아니라, 데이터들을 기반으로 이러한 &lt;code&gt;규칙&lt;/code&gt;을 추론하는 방향으로 구현해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;충돌 복구&lt;/code&gt;를 위한 &lt;code&gt;DBMS 코드 간소화&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;대부분의 DBMS는 &lt;em&gt;작성하기 까다롭고, 희귀한 케이스로 가득하며, 테스트 및 디버깅이 힘든&lt;/em&gt; 충돌 복구 코드들이 존재&lt;/li&gt;
&lt;li&gt;게다가 앞선 목표 중 &lt;code&gt;사용자 정의 접근 기법&lt;/code&gt;을 제공하는 것이 있었으므로, &lt;code&gt;충돌 복구 모델&lt;/code&gt;은 &lt;strong&gt;가능한 간단하고 확장하기 쉬워야 함&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;따라서, &lt;code&gt;로그&lt;/code&gt;를 &lt;code&gt;일반 데이터로 취급&lt;/code&gt;해 &lt;code&gt;복구 코드를 단순화&lt;/code&gt;하고, &lt;code&gt;기록 데이터에 대한 접근&lt;/code&gt;을 &lt;code&gt;지원&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;광디스크, 워크스테이션(여러개의 프로세서로 이뤄진), 커스텀 &lt;code&gt;VLSI 칩&lt;/code&gt; 등의 이점을 취할 수 있는 설계
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VLSI(초고밀도 집적회로) 칩&lt;/code&gt;: 수십억개의 MOS 트랜지스터를 결합해 단일 칩에 올리는 집적 회로 칩&lt;/li&gt;
&lt;li&gt;워크스테이션의 CPU 자원을 활용할 수 있고, 광디스크와 VLSI 칩을 효과적으로 활용할 수 있는 설계를 조사&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;관계형 모델을 가능한 적게 변경(가급적이면 변경 X)
&lt;ul&gt;
&lt;li&gt;많은 사용자들이 관계형 모델에 익숙해질 것이고, 관계형 모델이 데이터를 단순한 테이블 수준으로 강제하고, 관계형 대수 연산을 통해 테이블을 생성할 수 있는, 이른바 &lt;a href=&#34;https://finance.yahoo.com/news/simplifying-big-data-keyark-allows-122000982.html&#34;&gt;&lt;code&gt;스파르탄 단순성(Spartan Simplicity)&lt;/code&gt;&lt;/a&gt;이라는 이점이 있기 때문&lt;/li&gt;
&lt;li&gt;또한, &lt;em&gt;일반적인 계층 구조부터 CAD 데이터와 같은 복잡한 구조&lt;/em&gt;를 &lt;strong&gt;모두 다룰 수 있는&lt;/strong&gt; &lt;em&gt;&lt;code&gt;크고 복잡한 데이터 모델&lt;/code&gt; 보단&lt;/em&gt;, &lt;code&gt;확장 가능한 작고 단순한 모델&lt;/code&gt;을 &lt;strong&gt;기반으로 시스템&lt;/strong&gt;을 구축해야 한다고 생각&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;왜-postgresql을-써야할까&#34; &gt;왜 &lt;code&gt;PostgreSQL&lt;/code&gt;을 써야할까?
&lt;span&gt;
    &lt;a href=&#34;#%ec%99%9c-postgresql%ec%9d%84-%ec%8d%a8%ec%95%bc%ed%95%a0%ea%b9%8c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&#34;장점&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;함수, 데이터 유형, 언어 등을 추가할 수 있는 &lt;code&gt;확장성이 높음&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;구조화되지 않은 데이터 유형 지원&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;XML&lt;/code&gt;, &lt;code&gt;H-Store(키-값 쌍으로 데이터를 저장하는 자료형)&lt;/code&gt;와 같은 다양한 데이터 유형을 지원하며, NoSQL기능을 지원.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;교착 상태가 거의 발생하지 않고 동시 처리가 가능하며 트랜잭션 속도가 빠른 &lt;code&gt;MVCC&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MVCC(Multi-Version Concurrency Control, 다중버전 동시성 제어)&lt;/code&gt;: 동시 접근이 가능한 환경에서, 원본의 스냅샷과 변경중인 데이터를 동시에 유지해 별도의 락이 필요하지 않아 더 빠르게 동작하는 동시성 제어 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;고가용성&lt;/code&gt; 및 &lt;code&gt;서버 오류 복구&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;데이터 암호화, SSL 인증서, 고급 인증 방법과 같은 &lt;code&gt;고급 보안 기능&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;활발한 오픈소스 커뮤니티&lt;/code&gt;가 &lt;code&gt;지속적으로 솔루션을 개선하고 업데이트&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이외의 추가적인 장점은 &lt;a href=&#34;https://www.postgresql.org/about/&#34;&gt;PostgreSQL: About&lt;/a&gt;의 &lt;code&gt;Why use PostgreSQL?&lt;/code&gt;에 나와 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;단점&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQL Server 및 MySQL과 같은 &lt;code&gt;다른 RDBMS보다 성능이 느림&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;다만 이는 경우에 따라 다름&lt;/li&gt;
&lt;li&gt;일반적으로 읽기 작업만 수행할 경우, MySQL/MariaDB 대비 PostgreSQL이 느리다고 알려져 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;호환성에 더 주력&lt;/code&gt;, &lt;em&gt;속도 향상을 위해서는&lt;/em&gt; &lt;code&gt;추가 작업&lt;/code&gt;이 필요함&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MVCC&lt;/code&gt; 모델로 인해 발생하는 여러 문제점 &lt;a href=&#34;https://www.cs.cmu.edu/~pavlo/blog/2023/04/the-part-of-postgresql-we-hate-the-most.html&#34;&gt;참고 1 - The Part of PostgreSQL We Hate the Most // Blog // Andy Pavlo - Carnegie Mellon University&lt;/a&gt; &lt;a href=&#34;https://techblog.woowahan.com/9478/&#34;&gt;참고 2 - PostgreSQL Vacuum에 대한 거의 모든 것 | 우아한형제들 기술블로그&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;쿼리가 한 튜플을 업데이트하면, DBMS는 모든 컬럼을 새로운 버전에 복사함&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dead Tuple&lt;/code&gt;(기존 원본 데이터를 저장하여, 어디에도 참조되지 않는 Tuple)을 정리하는 &lt;code&gt;Vaccum&lt;/code&gt;(Java로 비유하자면 &lt;code&gt;GC&lt;/code&gt;)이 워크로드의 &lt;code&gt;write&lt;/code&gt; 작업 속도를 따라잡지 못할 경우 쿼리 성능 저하(&lt;code&gt;DBMS&lt;/code&gt;는 &lt;code&gt;Dead Tuple&lt;/code&gt;을 메모리에 로드해야 하므로), &lt;code&gt;Dead Tuple&lt;/code&gt;에 의한 부실한 쿼리 플랜 최적화 등이 발생할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql---postgresql로-마이그레이션-하기&#34; &gt;MySQL -&amp;gt; PostgreSQL로 마이그레이션 하기
&lt;span&gt;
    &lt;a href=&#34;#mysql---postgresql%eb%a1%9c-%eb%a7%88%ec%9d%b4%ea%b7%b8%eb%a0%88%ec%9d%b4%ec%85%98-%ed%95%98%ea%b8%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PostgreSQL&lt;/code&gt; 생태계에는 다른 데이터베이스에서 자료를 가져올 수 있는 컨버터 툴들이 존재
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.postgresql.org/wiki/Converting_from_other_Databases_to_PostgreSQL#MySQL&#34;&gt;Converting from other Databases to PostgreSQL - PostgreSQL wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MySQL&lt;/code&gt;의 경우 &lt;a href=&#34;https://github.com/dimitri/pgloader&#34;&gt;pgloader&lt;/a&gt;, &lt;a href=&#34;https://pypi.org/project/pg-chameleon/&#34;&gt;pg-chameleon&lt;/a&gt;,  &lt;a href=&#34;https://github.com/lanyrd/mysql-postgresql-converter&#34;&gt;lanyrd/mysql-postgresql-converter&lt;/a&gt;, &lt;a href=&#34;https://github.com/philipsoutham/py-mysql2pgsql&#34;&gt;philipsoutham/py-mysql2pgsql&lt;/a&gt; 등 다양한 툴들이 존재함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하지만 이들을 본인의 경우 사용하기 쉽지 않았음
&lt;ul&gt;
&lt;li&gt;대부분의 툴들이 Linux 환경에서나 원활하게 동작하기 때문(특히, &lt;code&gt;pgloader&lt;/code&gt;와 &lt;code&gt;pg-chameleon&lt;/code&gt;은 Windows를 사실상 지원 X)&lt;/li&gt;
&lt;li&gt;또한, &lt;code&gt;mysqldump&lt;/code&gt;를 통해 MySQL 데이터를 추출한 뒤, &lt;code&gt;pg_store&lt;/code&gt;를 통해 복구하는 방법을 시도하는 사람들도 있었지만 두 DBMS의 규격이 달라 실패&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 다음과 같이 &lt;code&gt;DBeaver&lt;/code&gt;를 활용해 자료를 CSV로 변환하고, 이를 PostgreSQL에서 import하는 방식으로 마이그레이션을 진행
&lt;ul&gt;
&lt;li&gt;먼저, &lt;code&gt;CSV 파일&lt;/code&gt;로 MySQL 테이블을 export함
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;mysql-export.png&#34; alt=&#34;mysql-export.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이후, &lt;code&gt;PostgreSQL&lt;/code&gt; DB의 &lt;code&gt;Schemas&amp;gt;Tables&lt;/code&gt;에서 데이터 가져오기를 수행
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;postgresql-import.png&#34; alt=&#34;postgresql-import.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이때, 사양의 차이로 &lt;code&gt;MySQL&lt;/code&gt;의 &lt;code&gt;지오메트리 타입&lt;/code&gt;이 온전히 옮겨지는 것이 아닌, &lt;code&gt;WKT&lt;/code&gt;의 형태로 옮겨짐
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;point-to-varchar.png&#34; alt=&#34;point-to-varchar.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;컬럼 값을 확인해보면, 아래와 같이 &lt;code&gt;WKT&lt;/code&gt; 포맷으로 varchar 타입의 문자열들이 기록되어 있음을 알 수 있음
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;point-to-varchar2.png&#34; alt=&#34;point-to-varchar2.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이를 &lt;code&gt;지오메트리 타입&lt;/code&gt;으로 변환하는 과정을 수행해야 함
&lt;ul&gt;
&lt;li&gt;먼저, 지오메트리 타입 컬럼을 테이블에 추가하는 &lt;a href=&#34;https://postgis.net/docs/AddGeometryColumn.html&#34;&gt;&lt;code&gt;AddGeometryColumn&lt;/code&gt;&lt;/a&gt; 함수를 호출&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;`AddGeometryColumn(varchar table_name, varchar column_name, integer srid, varchar type, integer dimension, boolean use_typmod=true) 함수를 호출
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; addgeometrycolumn(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;geotesttable&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;geotesttable&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;location_geom&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4326&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POINT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;이후, &lt;code&gt;update geotesttable set location_geom = ST_GeomFromText(location);&lt;/code&gt; 문을 통해 기존 컬럼의 &lt;code&gt;WKT&lt;/code&gt;를 기반으로 &lt;code&gt;지오메트리&lt;/code&gt; 데이터를 생성해 컬럼 갱신&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;postgis의-공간-인덱스-및-공간-연산&#34; &gt;PostGIS의 공간 인덱스 및 공간 연산
&lt;span&gt;
    &lt;a href=&#34;#postgis%ec%9d%98-%ea%b3%b5%ea%b0%84-%ec%9d%b8%eb%8d%b1%ec%8a%a4-%eb%b0%8f-%ea%b3%b5%ea%b0%84-%ec%97%b0%ec%82%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;공간 연산&lt;/code&gt;을 수행해보기 전, 먼저 &lt;code&gt;공간 인덱스&lt;/code&gt;를 생성하여 &lt;code&gt;SELECT 쿼리&lt;/code&gt;의 속도를 개선할 수 있도록 해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;공간-인덱스-생성하기&#34; &gt;공간 인덱스 생성하기
&lt;span&gt;
    &lt;a href=&#34;#%ea%b3%b5%ea%b0%84-%ec%9d%b8%eb%8d%b1%ec%8a%a4-%ec%83%9d%ec%84%b1%ed%95%98%ea%b8%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://postgis.net/documentation/faq/spatial-indexes/&#34;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PostGIS&lt;/code&gt;에서 &lt;code&gt;공간 인덱스&lt;/code&gt;를 생성하는 구문은 다음과 같음
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CREATE INDEX mytable_geom_x ON mytable USING GIST (geom)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CREATE SPATIAL INDEX&lt;/code&gt; 구문을 사용하던 &lt;code&gt;MySQL&lt;/code&gt;과 다르게, &lt;code&gt;PostGIS&lt;/code&gt;에서는 &lt;code&gt;USING GIST&lt;/code&gt; 구문을 사용함
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;USING GIST&lt;/code&gt;: 인덱스에서 &lt;code&gt;GiST(Generalized Search Tree)&lt;/code&gt; 구조를 사용할 것을 의미
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GiST(Generalized Search Tree)&lt;/code&gt;: 단순한, 일반적인 자료형 뿐만 아니라, &lt;em&gt;지리 정보 시스템, 멀티미디어 시스템&lt;/em&gt; 등 &lt;code&gt;다양한 환경&lt;/code&gt;에서 사용되는 &lt;code&gt;자료 유형&lt;/code&gt;을 지원하기 위해 &amp;lsquo;&lt;strong&gt;확장 가능한&lt;/strong&gt; &lt;code&gt;쿼리&lt;/code&gt; 및 &lt;code&gt;데이터 유형 집합&lt;/code&gt;&amp;lsquo;을 지원하는 &lt;code&gt;인덱스 구조&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;B+ 트리&lt;/code&gt;, &lt;code&gt;R-트리&lt;/code&gt; 등 다양한 트리 구조를 지원함&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.cmu.edu/~15721-f24/papers/GiST.pdf&#34;&gt;참고1&lt;/a&gt;, &lt;a href=&#34;https://dsf.berkeley.edu/papers/UW-CS-TR-1274.pdf&#34;&gt;참고2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이 키워드를 통해 인덱스를 설정할 경우, &lt;code&gt;기본 인덱스&lt;/code&gt;가 &lt;code&gt;R-트리&lt;/code&gt;로 설정되며, 해당 키워드를 사용하지 않을 경우 &lt;code&gt;표준 PostgreSQL B-트리&lt;/code&gt; 인덱스를 생성함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;공간-연산-사용하기&#34; &gt;공간 연산 사용하기
&lt;span&gt;
    &lt;a href=&#34;#%ea%b3%b5%ea%b0%84-%ec%97%b0%ec%82%b0-%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PostGIS&lt;/code&gt;와 &lt;code&gt;공간 인덱스&lt;/code&gt;의 성능을 확인하기 위해, 다음 두 가지 케이스를 비교해보려 함
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;공간 인덱스&lt;/code&gt;를 사용해 &lt;code&gt;사전 필터링&lt;/code&gt;을 거친 쿼리&lt;/li&gt;
&lt;li&gt;&lt;code&gt;공간 인덱스&lt;/code&gt;를 사용하지 않는 함수를 사용하는 쿼리&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;참고로 &lt;code&gt;공간 인덱스를 사용하는 함수&lt;/code&gt;는 다음과 같음
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;functions-which-use-spatial-index.png&#34; alt=&#34;functions-which-use-spatial-index.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;예시
&lt;ul&gt;
&lt;li&gt;한 점(&lt;code&gt;POINT(128.593317 35.865807)&lt;/code&gt;)으로 부터 5km 떨어진 점들 검색하기
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;약 237만개의 POINT가 기록된 테이블에서 이를 검색하고자 함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;먼저, 공간 인덱스를 사용하지 않는 &lt;code&gt;ST_DistanceSphere&lt;/code&gt; 함수를 사용해봄&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 경우, 쿼리는 다음과 같음
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; geotesttable &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; ST_DistanceSphere(ST_GeomFromText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POINT(128.593317 35.865807)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4326&lt;/span&gt;), location_geom) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;;&lt;span style=&#34;color:#f92672&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;위 쿼리에 대해 &lt;code&gt;EXPLAIN&lt;/code&gt;문을 사용해 실행 계획을 살펴보면 &lt;code&gt;공간 인덱스&lt;/code&gt;가 &lt;code&gt;활용되지 않으며&lt;/code&gt;(&lt;code&gt;Seq Scan&lt;/code&gt;), 많은 양의 row들을 살펴봄을 알 수 있음
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;query-plan-with-distance-sphere.png&#34; alt=&#34;query-plan-with-distance-sphere.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;또한, 쿼리문을 수행하고 데이터를 가져오는데 약 3초정도 소요됨
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;time-taken-by-query-with-distance-sphere.png&#34; alt=&#34;time-taken-by-query-with-distance-sphere.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;time-taken-by-query-with-distance-sphere2.png&#34; alt=&#34;time-taken-by-query-with-distance-sphere2.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;반면, &lt;code&gt;ST_DWithin(g1, g2, distance)&lt;/code&gt; 함수를 사용할 경우 &lt;code&gt;공간 인덱스를 사용&lt;/code&gt;해 더 빠르게 탐색이 이뤄짐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ST_DWithin(g1, g2, distance)&lt;/code&gt;는 주어진 두 &lt;code&gt;geometry&lt;/code&gt;(또는 &lt;code&gt;geography&lt;/code&gt;) g1, g2 사이의 거리가 &lt;code&gt;distance&lt;/code&gt;이내인지 &lt;code&gt;여부를 반환&lt;/code&gt;하는 함수
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;추가하자면, &lt;code&gt;ST_DWithin()&lt;/code&gt;에 g1, g2로 &lt;code&gt;geography&lt;/code&gt; 인자가 주어질 경우, &lt;code&gt;지구타원형&lt;/code&gt; 형태를 기준으로 하게 됨
&lt;ul&gt;
&lt;li&gt;따라서 &lt;code&gt;ST_DistanceSphere&lt;/code&gt; 와 동일한 기준 상에서 검색하려면 4번째 선택 인자인 &lt;code&gt;use_spheroid&lt;/code&gt;을 false로 해주어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이 경우, 쿼리는 다음과 같음
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; geotesttable &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; ST_DWITHIN(location_geom::geography, ST_GeomFromText(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POINT(128.593317 35.865807)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4326&lt;/span&gt;)::geography , &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;이때, 지오메트리 자료형인 &lt;code&gt;location_geom&lt;/code&gt;과 &lt;code&gt;ST_GeomFromText&lt;/code&gt;의 결과값을 &lt;a href=&#34;https://postgis.net/workshops/postgis-intro/geography.html&#34;&gt;&lt;code&gt;geography&lt;/code&gt;&lt;/a&gt; 타입으로 캐스팅 하고 있음을 알 수 있음&lt;/li&gt;
&lt;li&gt;이는 &lt;code&gt;ST_DWITHIN&lt;/code&gt; 함수가 &lt;code&gt;geometry&lt;/code&gt; 값 2개를 인자로 받을 경우, &lt;code&gt;distance&lt;/code&gt;의 단위가 &lt;code&gt;SRID:4326&lt;/code&gt;의 단위인 &lt;code&gt;도(degree)&lt;/code&gt;로 바뀌어버리기 때문에, 미터를 사용하려면 &lt;code&gt;geography&lt;/code&gt; 값 2개를 인자로 주어야 하기 때문임
&lt;ul&gt;
&lt;li&gt;그리고 이렇게 할 경우, &lt;code&gt;공간 인덱스&lt;/code&gt; 역시 하나 더 만들어 주어야 함&lt;/li&gt;
&lt;li&gt;위에서 만들었던 &lt;code&gt;공간 인덱스&lt;/code&gt;는 &lt;code&gt;geometry&lt;/code&gt; 타입인 &lt;code&gt;location_geom&lt;/code&gt;을 기준으로 했기 때문에, &lt;code&gt;geography&lt;/code&gt;로 캐스팅하여 &lt;code&gt;DWITHIN&lt;/code&gt; 함수를 호출할 경우 인덱스를 사용하지 못하기 때문&lt;/li&gt;
&lt;li&gt;따라서 아래 구문을 통해 &lt;code&gt;geography&lt;/code&gt; 형태의 &lt;code&gt;인덱스&lt;/code&gt;를 하나 더 만들어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INDEX&lt;/span&gt; location_idx_geo  &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; geotesttable  &lt;span style=&#34;color:#66d9ef&#34;&gt;USING&lt;/span&gt; GIST ((location_geom::geography));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;위 쿼리에 대해 &lt;code&gt;EXPLAIN&lt;/code&gt;문을 사용해 실행 계획을 살펴보면, &lt;code&gt;공간 인덱스가 잘 활용되고 있으며&lt;/code&gt;(&lt;code&gt;Index Scan&lt;/code&gt;), 탐색하는 row 갯수도 훨씬 줄어들었음을 알 수 있음
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;query-plan-with-dwithin.png&#34; alt=&#34;query-plan-with-dwithin.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;또한, 쿼리 수행도 총 0.4초가량으로 빠르게 이뤄짐
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;time-taken-by-query-with-dwithin.png&#34; alt=&#34;time-taken-by-query-with-dwithin.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;time-taken-by-query-with-dwithin2.png&#34; alt=&#34;time-taken-by-query-with-dwithin2.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;참고&#34; &gt;참고
&lt;span&gt;
    &lt;a href=&#34;#%ec%b0%b8%ea%b3%a0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dsf.berkeley.edu/papers/ERL-M85-95.pdf&#34;&gt;THE DESIGN OF POSTGRES - Michael Stonebraker and Lawrence A. Rowe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/learn/postgresql-vs-sql&#34;&gt;PostgreSQL과 SQL Server 비교: 차이점은 무엇인가요? | Google Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.cmu.edu/~pavlo/blog/2023/04/the-part-of-postgresql-we-hate-the-most.html&#34;&gt;The Part of PostgreSQL We Hate the Most // Blog // Andy Pavlo - Carnegie Mellon University&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://postgis.net/workshops/postgis-intro/indexing.html&#34;&gt;15. Spatial Indexing — Introduction to PostGIS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://postgis.net/workshops/postgis-intro/geography.html&#34;&gt;18. Geography — Introduction to PostGIS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://postgis.net/docs/ST_DWithin.html&#34;&gt;ST_DWithin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://postgis.net/docs/ST_DistanceSphere.html&#34;&gt;ST_DistanceSphere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/9.1/textsearch-indexes.html&#34;&gt;PostgreSQL: Documentation: 9.1: GiST and GIN Index Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
