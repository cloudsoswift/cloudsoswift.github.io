<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 오늘도 개발을 한다.</title>
    <link>https://cloudsoswift.github.io/tags/java/</link>
    <description>오늘도 개발을 한다. (Java)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Thu, 26 Oct 2023 02:22:40 +0900</lastBuildDate>
    
    <atom:link href="https://cloudsoswift.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>빌더 패턴</title>
      <link>https://cloudsoswift.github.io/post/develop/java/builder-pattern/</link>
      <pubDate>Thu, 26 Oct 2023 02:22:40 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/develop/java/builder-pattern/</guid>
      <description>&lt;p&gt;디자인 패턴에서의 빌더 패턴과, Java에서의 빌더 패턴에 대해 알아보고자 한다.&lt;/p&gt;
&lt;h2 id=&#34;디자인-패턴에서의-빌더-패턴&#34; &gt;디자인 패턴에서의 빌더 패턴
&lt;span&gt;
    &lt;a href=&#34;#%eb%94%94%ec%9e%90%ec%9d%b8-%ed%8c%a8%ed%84%b4%ec%97%90%ec%84%9c%ec%9d%98-%eb%b9%8c%eb%8d%94-%ed%8c%a8%ed%84%b4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;빌더 패턴은 복잡한 객체의 &amp;lsquo;구성&amp;rsquo;과 &amp;lsquo;표현&amp;rsquo;을 분리하여, 동일한 생성 절차가 다른 표현을 생성할 수 있도록 하는 패턴이다.&lt;br&gt;
한 마디로, 복잡한 객체의 생성을 단계적이고, 관리 가능하며, 상호 교환 가능한 작업들로 분해하는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;구성-요소&#34; &gt;구성 요소
&lt;span&gt;
    &lt;a href=&#34;#%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;디렉터director&#34; &gt;디렉터(Director)
&lt;span&gt;
    &lt;a href=&#34;#%eb%94%94%eb%a0%89%ed%84%b0director&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;빌더 인터페이스를 사용해 객체의 생성을 조절하는 요소. 객체 생성의 순서를 명시함.&lt;/p&gt;
&lt;h4 id=&#34;빌더-인터페이스builder-interface&#34; &gt;빌더 인터페이스(Builder Interface)
&lt;span&gt;
    &lt;a href=&#34;#%eb%b9%8c%eb%8d%94-%ec%9d%b8%ed%84%b0%ed%8e%98%ec%9d%b4%ec%8a%a4builder-interface&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;생성 단계에 대해 개략적으로 설명하는 요소.&lt;/p&gt;
&lt;h4 id=&#34;콘크리트-빌더concrete-builder&#34; &gt;콘크리트 빌더(Concrete Builder)
&lt;span&gt;
    &lt;a href=&#34;#%ec%bd%98%ed%81%ac%eb%a6%ac%ed%8a%b8-%eb%b9%8c%eb%8d%94concrete-builder&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;빌더 인터페이스를 구현하여, 각 생성 단계별 세부 사항을 제공하며 조합을 관리함.&lt;/p&gt;
&lt;h4 id=&#34;프로덕트product&#34; &gt;프로덕트(Product)
&lt;span&gt;
    &lt;a href=&#34;#%ed%94%84%eb%a1%9c%eb%8d%95%ed%8a%b8product&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;생성 중인 복잡한 객체. 일반적으로 시스템은 디렉터와 프로덕트와만 접촉하고, 콘크리트 빌더의 존재는 알지못함.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gofpattern.com/creational/patterns/builder-pattern.php&#34;&gt;Builder Pattern (Seperate construction of complex object : GofPatterns(gofpattern.com))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Builder_pattern&#34;&gt;Builder pattern - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java에서의-빌더-패턴&#34; &gt;Java에서의 빌더 패턴
&lt;span&gt;
    &lt;a href=&#34;#java%ec%97%90%ec%84%9c%ec%9d%98-%eb%b9%8c%eb%8d%94-%ed%8c%a8%ed%84%b4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;점층적 생성자 패턴&lt;/code&gt;의 &lt;strong&gt;안정성&lt;/strong&gt;과 &lt;code&gt;자바빈즈 패턴&lt;/code&gt;의 &lt;strong&gt;가독성&lt;/strong&gt;을 겸비한 패턴.&lt;br&gt;
빌더 클래스는 보통 생성할 클래스 안에 정적 멤버 클래스로 만들어 두며, 이러한 빌드 패턴은 &lt;code&gt;명명된 선택적 매개변수(Named Optional Parameters)&lt;/code&gt;를 흉내낸 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;명명된 선택적 매개변수(Named Optional Parameters)&lt;/code&gt; : &lt;code&gt;위치 매개변수(Positional Parameters)&lt;/code&gt; 와 달리 값이 전달 될 때, &lt;strong&gt;이름도 함께 전달&lt;/strong&gt;되어야 하는 매개변수.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;사용하게-된-배경&#34; &gt;사용하게 된 배경
&lt;span&gt;
    &lt;a href=&#34;#%ec%82%ac%ec%9a%a9%ed%95%98%ea%b2%8c-%eb%90%9c-%eb%b0%b0%ea%b2%bd&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;../static-factory-method/&#34;&gt;정적 팩토리 메서드&lt;/a&gt;와 &lt;code&gt;public 생성자&lt;/code&gt;의 공통적인 단점인 &amp;lsquo;선택적 매개변수(Optional Parameter)&amp;lsquo;가 많은 경우 적절한 대응이 힘들다는 점을 대처하기 위해 여러 패턴이 만들어지게 되었다.&lt;/p&gt;
&lt;h4 id=&#34;점층적-생성자-패턴telescoping-constructor-pattern&#34; &gt;점층적 생성자 패턴(Telescoping Constructor Pattern)
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%90%ec%b8%b5%ec%a0%81-%ec%83%9d%ec%84%b1%ec%9e%90-%ed%8c%a8%ed%84%b4telescoping-constructor-pattern&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;필수 매개변수만 받는 생성자, 필수 매개변수와 선택 매개변수 1개를 받는 생성자, &amp;hellip; 형태로 선택 매개변수를 모두 받는 생성자까지 모든 경우의 수를 충족하는 방식이다.&lt;/p&gt;
&lt;h5 id=&#34;단점&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;h6 id=&#34;1-사용자가-설정하기-원치않는-매개변수까지-포함하기-쉽다&#34; &gt;1. 사용자가 설정하기 원치않는 매개변수까지 포함하기 쉽다.
&lt;span&gt;
    &lt;a href=&#34;#1-%ec%82%ac%ec%9a%a9%ec%9e%90%ea%b0%80-%ec%84%a4%ec%a0%95%ed%95%98%ea%b8%b0-%ec%9b%90%ec%b9%98%ec%95%8a%eb%8a%94-%eb%a7%a4%ea%b0%9c%eb%b3%80%ec%88%98%ea%b9%8c%ec%a7%80-%ed%8f%ac%ed%95%a8%ed%95%98%ea%b8%b0-%ec%89%bd%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;h6 id=&#34;2-매개변수-개수가-많아지면-코드를-작성읽는게-힘들다&#34; &gt;2. 매개변수 개수가 많아지면, 코드를 작성/읽는게 힘들다.
&lt;span&gt;
    &lt;a href=&#34;#2-%eb%a7%a4%ea%b0%9c%eb%b3%80%ec%88%98-%ea%b0%9c%ec%88%98%ea%b0%80-%eb%a7%8e%ec%95%84%ec%a7%80%eb%a9%b4-%ec%bd%94%eb%93%9c%eb%a5%bc-%ec%9e%91%ec%84%b1%ec%9d%bd%eb%8a%94%ea%b2%8c-%ed%9e%98%eb%93%a4%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;p&gt;코드를 읽을 때, 각 값이 무엇을 의미하는지, 몇 개인지 파악하기 힘들고 실수로 순서가 바뀌면 런타임에 에러가 발생할 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;자바빈즈-패턴javabeans-pattern&#34; &gt;자바빈즈 패턴(JavaBeans Pattern)
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%90%eb%b0%94%eb%b9%88%ec%a6%88-%ed%8c%a8%ed%84%b4javabeans-pattern&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;매개변수가 없는 기본 생성자로 객체를 만든 뒤, setter 메서드를 호출해 원하는 필드의 값을 설정하는 방식이다.&lt;/p&gt;
&lt;h5 id=&#34;장점&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;h6 id=&#34;1-인스턴스를-만들기-쉽고-가독성도-좋다&#34; &gt;1. 인스턴스를 만들기 쉽고, 가독성도 좋다.
&lt;span&gt;
    &lt;a href=&#34;#1-%ec%9d%b8%ec%8a%a4%ed%84%b4%ec%8a%a4%eb%a5%bc-%eb%a7%8c%eb%93%a4%ea%b8%b0-%ec%89%bd%ea%b3%a0-%ea%b0%80%eb%8f%85%ec%84%b1%eb%8f%84-%ec%a2%8b%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;h5 id=&#34;단점-1&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;h6 id=&#34;1-객체-하나를-만들기-위해-여러-메서드-호출이-필요하다&#34; &gt;1. 객체 하나를 만들기 위해 여러 메서드 호출이 필요하다.
&lt;span&gt;
    &lt;a href=&#34;#1-%ea%b0%9d%ec%b2%b4-%ed%95%98%eb%82%98%eb%a5%bc-%eb%a7%8c%eb%93%a4%ea%b8%b0-%ec%9c%84%ed%95%b4-%ec%97%ac%eb%9f%ac-%eb%a9%94%ec%84%9c%eb%93%9c-%ed%98%b8%ec%b6%9c%ec%9d%b4-%ed%95%84%ec%9a%94%ed%95%98%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;h6 id=&#34;2-객체가-완전히-생성되기-전에는-일관성이-무너진-상태에-놓이게-된다&#34; &gt;2. 객체가 완전히 생성되기 전에는 일관성이 무너진 상태에 놓이게 된다.
&lt;span&gt;
    &lt;a href=&#34;#2-%ea%b0%9d%ec%b2%b4%ea%b0%80-%ec%99%84%ec%a0%84%ed%9e%88-%ec%83%9d%ec%84%b1%eb%90%98%ea%b8%b0-%ec%a0%84%ec%97%90%eb%8a%94-%ec%9d%bc%ea%b4%80%ec%84%b1%ec%9d%b4-%eb%ac%b4%eb%84%88%ec%a7%84-%ec%83%81%ed%83%9c%ec%97%90-%eb%86%93%ec%9d%b4%ea%b2%8c-%eb%90%9c%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;p&gt;&lt;code&gt;점층적 생성자 패턴&lt;/code&gt;에서는 매개변수들의 유효 여부만 확인하면 일관성이 유지 되었지만, 자바빈즈 패턴에서는 그렇지 않음.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일관성 : 객체의 모든 프로퍼티들이 정상적으로 값들로 채워져 있는지 여부.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 특성 때문에 자바빈즈 패턴에서는 불변 클래스를 만들 수 없고, 스레드 안정성을 위한 추가 작업이 수반된다.&lt;/p&gt;
&lt;p&gt;이러한 단점을 보완하기 위해 객체를 freezing 하는 방법도 있지만, 개발자가 &lt;code&gt;freeze&lt;/code&gt;를 호출했는지를 컴파일러가 보증할 수 없어 런타임 오류에 취약하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체를 freeze하면, 속성 값을 수정하거나 삭제하는 것이 불가능해 진다. &lt;a href=&#34;https://ui.toast.com/posts/ko_20220420&#34;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;객체-생성과정&#34; &gt;객체 생성과정
&lt;span&gt;
    &lt;a href=&#34;#%ea%b0%9d%ec%b2%b4-%ec%83%9d%ec%84%b1%ea%b3%bc%ec%a0%95&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;필수 매개변수로 &lt;strong&gt;생성자&lt;/strong&gt;(&lt;em&gt;또는 정적 팩토리 메서드&lt;/em&gt;)를 호출해 빌더 객체를 얻는다.&lt;/li&gt;
&lt;li&gt;빌더 객체가 제공하는 setter 메서들로 원하는 선택 매개변수들을 설정한다.&lt;/li&gt;
&lt;li&gt;매개변수가 없는 &lt;code&gt;build&lt;/code&gt; 메서드를 호출해 (&lt;em&gt;웬만하면 불변인&lt;/em&gt;)객체를 얻는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;빌더의 setter 메서드들은 &lt;strong&gt;빌더 자신을 반환&lt;/strong&gt;해, 연쇄적으로 호출하는 플루언트API(&lt;em&gt;또는 메서드 연쇄&lt;/em&gt;)의 형태를 띈다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;플루언트 API(Fluent API)&lt;/code&gt; / &lt;code&gt;메서드 연쇄(Method Chaining)&lt;/code&gt; : 메서드 호출이 흐르듯 연결되는 형태. &lt;strong&gt;소스 코드의 가독성&lt;/strong&gt;을 &lt;em&gt;산문과 유사하게&lt;/em&gt; 만드는 것이 목적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;유효성-검사&#34; &gt;유효성 검사
&lt;span&gt;
    &lt;a href=&#34;#%ec%9c%a0%ed%9a%a8%ec%84%b1-%ea%b2%80%ec%82%ac&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;빌더 패턴을 사용할 땐 생성자 내에서, 그리고 &lt;code&gt;build&lt;/code&gt; 메서드 내에서도 유효성 검사가 필요하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;빌더 클래스는 생성할 클래스 내에 멤버 클래스로 존재하므로 클래스의 &lt;code&gt;private 생성자&lt;/code&gt;에 접근할 수 있고, &lt;code&gt;build&lt;/code&gt; 메서드는 보통 &lt;code&gt;private 생성자&lt;/code&gt;를 호출하므로 해당 &lt;code&gt;private 생성자&lt;/code&gt; 내에서 객체가 유효한 상태를 갖고 생성되는지 확인해야 한다.&lt;/li&gt;
&lt;li&gt;빌더는 필드 값들이 복사 될 때 변형될 수 있어, 빌더의 필드가 아닌 &lt;code&gt;defensive copy&lt;/code&gt;를 생성해 이 새로운 객체의 필드 값을 검증 해야한다. &lt;a href=&#34;https://stackoverflow.com/questions/38173274/builder-pattern-validation-effective-java&#34;&gt;#&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;방어적 복사(Defensive Copy)&lt;/code&gt;&lt;/strong&gt; : &lt;code&gt;가변적인 객체(Mutable Object)&lt;/code&gt;의 단점인 &lt;strong&gt;&lt;code&gt;검사시점/사용시점 공격(TOC/TOU)&lt;/code&gt;&lt;/strong&gt; 의 위험을 방지하기 위해, 직접 필드 값을 반환하지 않고 매 번 생성자를 활용해 필드 값을 새로운 객체로 반환하는 것. &lt;a href=&#34;https://abcstudyguide.com/java-defensive-copying/&#34;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;빌더와-계층적으로-설계된-클래스&#34; &gt;빌더와 계층적으로 설계된 클래스
&lt;span&gt;
    &lt;a href=&#34;#%eb%b9%8c%eb%8d%94%ec%99%80-%ea%b3%84%ec%b8%b5%ec%a0%81%ec%9c%bc%eb%a1%9c-%ec%84%a4%ea%b3%84%eb%90%9c-%ed%81%b4%eb%9e%98%ec%8a%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;빌더 패턴은 계층적으로 설계된 클래스와 조합이 좋다.&lt;br&gt;
각 계층의 클래스에 관한 빌더를 멤버로 정의한다.&lt;br&gt;
즉, &lt;mark style=&#34;background: #ADCCFFA6;&#34;&gt;추상 클래스&lt;/mark&gt;는 &lt;mark style=&#34;background: #ADCCFFA6;&#34;&gt;추상 빌더&lt;/mark&gt;를, &lt;code&gt;구체 클래스(Concrete Class)&lt;/code&gt;는 &lt;code&gt;구체 빌더&lt;/code&gt;를 갖게 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;구체 클래스(Concrete Class)&lt;/code&gt;: 모든 메서드가 구현되어 있는, 즉 &lt;code&gt;new&lt;/code&gt; 키워드를 통해 인스턴스를 만들 수 있는 클래스.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 추상 클래스
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pizza&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 추상 빌더
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Builder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 구체 클래스
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NyPizza&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Pizza &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 구체 빌더
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Pizza&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Builder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이때, 추상 빌더 클래스는 &lt;strong&gt;&lt;code&gt;재귀적 타입 한정(Recirsive Type Bound)&lt;/code&gt;&lt;/strong&gt; 을 이용하는 제네릭 타입이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;재귀적 타입 한정(Recursive Type Bound)&lt;/code&gt;&lt;/strong&gt; : 타입 매개변수가 자신을 포함하는 수식에 의해 한정되는 것.
&lt;ul&gt;
&lt;li&gt;ex) &lt;code&gt;Builder&amp;lt;T extends Builder&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;추상 빌더에서 추상 메서드인 &lt;code&gt;self&lt;/code&gt;를 하위 클래스에서 재정의(하위 클래스의 &lt;code&gt;this&lt;/code&gt; 반환하도록)하게 해 상위&amp;lt;-&amp;gt;하위 형변환 없이 메서드 연쇄를 할 수 있도록 한다. 이러한 방식을 &lt;strong&gt;&lt;code&gt;시뮬레이트한 셀프 타입(Simulated Self-Type)&lt;/code&gt;&lt;/strong&gt; 관용구라 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 추상 클래스
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pizza&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Builder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;Pizza&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; build&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 하위 클래스는 이 메서드를 재정의(overriding)하여
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;this&amp;#34;를 반환하도록 해야 한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;()**;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 구체 클래스
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NyPizza&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Pizza &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Pizza&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Builder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;NyPizza&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; build&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NyPizza&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 재정의해 &amp;#34;this&amp;#34; 반환
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Builder &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;()**&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;또한, 하위 클래스의 빌더가 정의한 &lt;code&gt;build&lt;/code&gt; 메서드는 해당하는 구체 하위 클래스를 반환하는, &lt;code&gt;공변반환 타이핑(Covariant Return Typing)&lt;/code&gt;을 이용해 &lt;mark style=&#34;background: #FFB86CA6;&#34;&gt;형변환에 신경쓰지 않고 빌더를 사용&lt;/mark&gt; 가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;공변반환 타이핑(Covariant Return Typing)&lt;/code&gt; : 하위 클래스 메서드가 override 대상 메서드(상위 클래스의 메서드)가 정의한 반환 타입이 아닌, 그 하위 타입을 반환하는 기능.
&lt;ul&gt;
&lt;li&gt;즉, 위 코드처럼 &lt;code&gt;NyPizza.Builder&lt;/code&gt;는 &lt;code&gt;NyPizza&lt;/code&gt;를 반환.
빌더를 이용하면 &lt;code&gt;가변인수(varargs)&lt;/code&gt; 매개변수를 여러 개 사용 가능하다. 이는 두 가지 방법이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;각각을 메서드들로 나눠서 선언한다.&lt;/li&gt;
&lt;li&gt;다른 매개변수들로 여러 번 호출한 뒤 이를 한 필드로 모은다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;빌더-패턴의-단점&#34; &gt;빌더 패턴의 단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%b9%8c%eb%8d%94-%ed%8c%a8%ed%84%b4%ec%9d%98-%eb%8b%a8%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-객체를-만들기-전-먼저-빌더부터-만들어야-한다&#34; &gt;1. 객체를 만들기 전 먼저 빌더부터 만들어야 한다.
&lt;span&gt;
    &lt;a href=&#34;#1-%ea%b0%9d%ec%b2%b4%eb%a5%bc-%eb%a7%8c%eb%93%a4%ea%b8%b0-%ec%a0%84-%eb%a8%bc%ec%a0%80-%eb%b9%8c%eb%8d%94%eb%b6%80%ed%84%b0-%eb%a7%8c%eb%93%a4%ec%96%b4%ec%95%bc-%ed%95%9c%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;h4 id=&#34;2-성능에-민감한-경우-문제가-될-수-있다&#34; &gt;2. 성능에 민감한 경우 문제가 될 수 있다.
&lt;span&gt;
    &lt;a href=&#34;#2-%ec%84%b1%eb%8a%a5%ec%97%90-%eb%af%bc%ea%b0%90%ed%95%9c-%ea%b2%bd%ec%9a%b0-%eb%ac%b8%ec%a0%9c%ea%b0%80-%eb%90%a0-%ec%88%98-%ec%9e%88%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;h4 id=&#34;3-매개변수가-4개-이상은-되야-값어치를-한다&#34; &gt;3. 매개변수가 4개 이상은 되야 값어치를 한다.
&lt;span&gt;
    &lt;a href=&#34;#3-%eb%a7%a4%ea%b0%9c%eb%b3%80%ec%88%98%ea%b0%80-4%ea%b0%9c-%ec%9d%b4%ec%83%81%ec%9d%80-%eb%90%98%ec%95%bc-%ea%b0%92%ec%96%b4%ec%b9%98%eb%a5%bc-%ed%95%9c%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;점층적 생성자 패턴보다 코드가 장황해지기 때문에 제대로 값어치를 하려면 매개변수가 4개 이상은 되어야 한다.&lt;/p&gt;
&lt;h2 id=&#34;정리&#34; &gt;정리
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%95%eb%a6%ac&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;API는 대게 시간이 갈수록 매개변수가 많아지는 경향을 띄므로 애초에 빌더로 시작하는 편이 나은 경우가 많다.&lt;br&gt;
다시 말하자면, 처리해야 할  매개변수가 많고 특히, 개중에 Optional한 매개변수가 많다면 빌더 패턴을 사용하는게 생성자, 정적 팩토리 메서드 보다 낫다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>정적 팩토리 메서드(Static Factory Method)</title>
      <link>https://cloudsoswift.github.io/post/develop/java/static-factory-method/</link>
      <pubDate>Wed, 25 Oct 2023 00:55:00 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/develop/java/static-factory-method/</guid>
      <description>&lt;p&gt;정적 팩토리 메서드란 무엇인지, 그리고 어떤 장점과 단점이 있는지를 정리해보고자 한다.&lt;/p&gt;
&lt;h2 id=&#34;정적-팩토리-메서드static-factory-method&#34; &gt;정적 팩토리 메서드(Static Factory Method)
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%95%ec%a0%81-%ed%8c%a9%ed%86%a0%eb%a6%ac-%eb%a9%94%ec%84%9c%eb%93%9cstatic-factory-method&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;클래스 인스턴스를 반환하는 단순한 정적 메서드이다.&lt;br&gt;
&lt;code&gt;public 생성자&lt;/code&gt;를 사용하는 방법과 함께 클래스의 인스턴스를 생성하는 대표적인 방법 중 하나이다.&lt;/p&gt;
&lt;h3 id=&#34;예시---boolean클래스의-valueof&#34; &gt;예시 - &lt;code&gt;Boolean&lt;/code&gt;클래스의 &lt;code&gt;valueOf&lt;/code&gt;
&lt;span&gt;
    &lt;a href=&#34;#%ec%98%88%ec%8b%9c---boolean%ed%81%b4%eb%9e%98%ec%8a%a4%ec%9d%98-valueof&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Boolean &lt;span style=&#34;color:#a6e22e&#34;&gt;valueOf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 인자로 받은 boolean 값에 따라 Boolean 클래스 인스턴스를 반환한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; Boolean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Boolean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FALSE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Effective Java의 Item.2.에 따르면 &lt;strong&gt;&lt;code&gt;생성자 대신 정적 팩터리 메서드를 고려하라&lt;/code&gt;&lt;/strong&gt; 라는데, 이를 통해 얻는 이점과 실은 무엇일까?&lt;/p&gt;
&lt;h2 id=&#34;정적-팩토리-메서드의-장점&#34; &gt;정적 팩토리 메서드의 장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%95%ec%a0%81-%ed%8c%a9%ed%86%a0%eb%a6%ac-%eb%a9%94%ec%84%9c%eb%93%9c%ec%9d%98-%ec%9e%a5%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;1-이름을-가질-수-있다&#34; &gt;1. 이름을 가질 수 있다.
&lt;span&gt;
    &lt;a href=&#34;#1-%ec%9d%b4%eb%a6%84%ec%9d%84-%ea%b0%80%ec%a7%88-%ec%88%98-%ec%9e%88%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;em&gt;반환될 객체의 특성을 제대로 설명하지 못하는&lt;/em&gt; &lt;mark style=&#34;background: #ADCCFFA6;&#34;&gt;생성자&lt;/mark&gt;와 달리, &lt;mark style=&#34;background: #FFB86CA6;&#34;&gt;정적 팩토리 메서드&lt;/mark&gt;는 &lt;mark style=&#34;background: #FFB86CA6;&#34;&gt;이름만 잘 지으면 어떤 특성을 지녔는지를 쉽게 묘사&lt;/mark&gt; 할 수 있다.&lt;br&gt;
또한, 생성자는 &lt;mark style=&#34;background: #ADCCFFA6;&#34;&gt;&lt;b&gt;한 시그니처에 하나의 생성자&lt;/b&gt;&lt;/mark&gt;만 만들 수 있다. 이와 달리, 정적 팩토리 메서드는 &lt;em&gt;이름을 가질 수 있기 때문에&lt;/em&gt; 시그니처가 같은 생성자가 여러 개 필요한 경우 &lt;mark style=&#34;background: #FFB86CA6;&#34;&gt;이름을 통해 구분&lt;/mark&gt;지을 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark style=&#34;background: #ADCCFFA6;&#34;&gt;&lt;b&gt;시그니처&lt;/b&gt;&lt;/mark&gt;: 함수의 &lt;em&gt;이름, 공개 범위, 매개 변수&lt;/em&gt; 같은 함수에 대한 일반적인 정보. &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Signature/Function&#34;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// O
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// X : 이미 같은 시그니처의 생성자가 존재해 선언 불가
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-호출될-때마다-인스턴스를-새로-생성하지-않아도-된다&#34; &gt;2. 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.
&lt;span&gt;
    &lt;a href=&#34;#2-%ed%98%b8%ec%b6%9c%eb%90%a0-%eb%95%8c%eb%a7%88%eb%8b%a4-%ec%9d%b8%ec%8a%a4%ed%84%b4%ec%8a%a4%eb%a5%bc-%ec%83%88%eb%a1%9c-%ec%83%9d%ec%84%b1%ed%95%98%ec%a7%80-%ec%95%8a%ec%95%84%eb%8f%84-%eb%90%9c%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;이러한 특성 덕분에 &lt;code&gt;불변 클래스(immutable class)&lt;/code&gt;의 경우, (1)인스턴스를 미리 만들어 놓거나 (2)새로 생성한 인스턴스를 캐싱해 재활용하는 식으로 불필요한 객체 생성을 피할 수 있다.&lt;br&gt;
이를 활용해 같은 객체(&lt;em&gt;특히 생성비용이 큰&lt;/em&gt;)가 자주 요청되는 상황에 성능을 끌어올릴 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;불변 객체(Immuntable Objects)&lt;/code&gt;: &lt;strong&gt;모든 필드가 final, private&lt;/strong&gt;이고, setter를 제공하지 않는 객체. 대표적인 예시론 &lt;code&gt;String&lt;/code&gt; 클래스가 있다. &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html&#34;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;또한, 언제 어느 인스턴스가 살아 있게 할지를 통제하는 &lt;strong&gt;&lt;code&gt;인스턴스 통제 클래스(instance-controlled class)&lt;/code&gt;&lt;/strong&gt; 와 같이 작동할 수 있다.
인스턴스를 통제하면 클래스를 &lt;code&gt;싱글턴&lt;/code&gt;, &lt;code&gt;인스턴스화 불가&lt;/code&gt;로 만들 수 있다. 또한 불변 클래스에서 &lt;strong&gt;동치인 인스턴스가 단 하나임을 보장&lt;/strong&gt;할 수 있다.&lt;br&gt;
인스턴스 통제는 열거 타입이 인스턴스가 하나만 만들어짐을 보장한다.&lt;/p&gt;
&lt;h3 id=&#34;3-반환-타입의-하위-타입-객체를-반환-가능하다&#34; &gt;3. 반환 타입의 &lt;code&gt;하위 타입 객체&lt;/code&gt;를 반환 가능하다.
&lt;span&gt;
    &lt;a href=&#34;#3-%eb%b0%98%ed%99%98-%ed%83%80%ec%9e%85%ec%9d%98-%ed%95%98%ec%9c%84-%ed%83%80%ec%9e%85-%ea%b0%9d%ec%b2%b4%eb%a5%bc-%eb%b0%98%ed%99%98-%ea%b0%80%eb%8a%a5%ed%95%98%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;반환할 객체 클래스를 &lt;strong&gt;자유롭게 선택&lt;/strong&gt; 할 수 있다. 이러한 유연함을 바탕으로 &lt;strong&gt;&lt;code&gt;인터페이스 기반 프레임워크&lt;/code&gt;&lt;/strong&gt; 를 만들 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;인터페이스 기반 프레임워크&lt;/code&gt;&lt;/strong&gt; : 인터페이스와 그 구현으로 설계된 프레임워크로, &lt;mark style=&#34;background: lightskyblue;&#34;&gt;구현자(implementor)에겐 구현에 대한 완전한 제어권을 제공&lt;/mark&gt;하고, &lt;mark style=&#34;background: lightsalmon;&#34;&gt;클라이언트에게는 안정적인 API를 제공&lt;/mark&gt;하는 이점이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Java 8&lt;/code&gt;&lt;/strong&gt; 이전에는 &lt;em&gt;인터페이스에 정적 메서드를 선언할 수 없어서&lt;/em&gt; 인터페이스 &lt;code&gt;XXX&lt;/code&gt;를 반환하는 정적 메서드가 필요하면, &lt;code&gt;XXXs&lt;/code&gt;라는 &lt;strong&gt;&lt;code&gt;동반 클래스&lt;/code&gt;&lt;/strong&gt; (&lt;em&gt;companion class, 인스턴스화 불가한 클래스&lt;/em&gt;)를 만들어 그 안에 정의해왔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Collection&lt;/code&gt;(인터페이스) 과 &lt;code&gt;Collections&lt;/code&gt;(동반 클래스)가 대표적인 예시다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Collection&lt;/code&gt;의 경우 &lt;em&gt;부가 기능들을 포함한 유틸리티 구현체들&lt;/em&gt;이 &lt;strong&gt;인터페이스대로 동작할 것임을 예상할 수 있기 때문&lt;/strong&gt;에 구현체들을 공개하지 않았고, API를 작고 가볍게 만들 수 있었다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Java 8 이후&lt;/code&gt;&lt;/strong&gt; 로는 &lt;strong&gt;인터페이스&lt;/strong&gt;가 디폴트 메서드와 &lt;strong&gt;정적 메서드를 가질 수 있게&lt;/strong&gt; 되므로써 동반 클래스를 둘 이유가 없어졌다.&lt;br&gt;
다만, &lt;code&gt;public static&lt;/code&gt;만 가능하므로 별도의 package-private 클래스에 둬야 할 수도 있다.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;Java 9&lt;/code&gt;&lt;/strong&gt; 에서는 &lt;code&gt;private static&lt;/code&gt; 메서드도 지원하지만, &lt;strong&gt;static 필드&lt;/strong&gt;와 &lt;strong&gt;static 멤버 클래스&lt;/strong&gt;는 &lt;strong&gt;여전히 공개&lt;/strong&gt;되어 있어야 한다.&lt;/p&gt;
&lt;h3 id=&#34;4-입력-매개변수에-따라-매번-다른-클래스의-객체를-반환할-수-있다&#34; &gt;4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.
&lt;span&gt;
    &lt;a href=&#34;#4-%ec%9e%85%eb%a0%a5-%eb%a7%a4%ea%b0%9c%eb%b3%80%ec%88%98%ec%97%90-%eb%94%b0%eb%9d%bc-%eb%a7%a4%eb%b2%88-%eb%8b%a4%eb%a5%b8-%ed%81%b4%eb%9e%98%ec%8a%a4%ec%9d%98-%ea%b0%9d%ec%b2%b4%eb%a5%bc-%eb%b0%98%ed%99%98%ed%95%a0-%ec%88%98-%ec%9e%88%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;반환 타입의 하위 타입이기만 하면 어떤 클래스의 객체건 상관없다.&lt;br&gt;
일례로 &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html&#34;&gt;EnumSet&lt;/a&gt; 클래스의 경우, public 생성자 없이 정적 팩토리만 제공하는데 원소의 수(64개 이하, 초과)에 따라 두 하위 클래스(&lt;code&gt;RegularEnumSet&lt;/code&gt;, &lt;code&gt;JumboEnumSet&lt;/code&gt;) 중 하나의 인스턴스를 반환한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고로, &lt;code&gt;RegularEnumSet&lt;/code&gt;과 &lt;code&gt;JumboEnumSet&lt;/code&gt;은 java 레퍼런스 사이트에는 명세되어 있지 않지만, IDE를 통해 EnumSet의 Declaration을 들어가보면 확인 가능하다.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// EnumSet.class
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;E &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Enum&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; EnumSet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;noneOf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; elementType&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Enum&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; universe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getUniverse&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elementType&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;universe &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ClassCastException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elementType &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; not an enum&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;universe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 원소의 개수가 64개 이하면 RegularEnumSet을 반환.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegularEnumSet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;elementType&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; universe&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 원소의 개수가 64개 초과면 JumboEnumSet을 반환.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; JumboEnumSet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;elementType&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; universe&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;클라이언트는 정적 팩토리가 반환하는 객체가 &lt;strong&gt;어떤 클래스의 인스턴스인지 알 수도, 알 필요도 없다&lt;/strong&gt;.&lt;br&gt;
오직 반환 타입인 &lt;code&gt;EnumSet&lt;/code&gt;의 하위 클래스이기만 하면 된다.&lt;/p&gt;
&lt;h3 id=&#34;5-정적-팩토리-메서드를-작성할-당시엔-반환할-객체의-클래스가-존재하지-않아도-된다&#34; &gt;5. 정적 팩토리 메서드를 작성할 당시엔 반환할 객체의 클래스가 존재하지 않아도 된다.
&lt;span&gt;
    &lt;a href=&#34;#5-%ec%a0%95%ec%a0%81-%ed%8c%a9%ed%86%a0%eb%a6%ac-%eb%a9%94%ec%84%9c%eb%93%9c%eb%a5%bc-%ec%9e%91%ec%84%b1%ed%95%a0-%eb%8b%b9%ec%8b%9c%ec%97%94-%eb%b0%98%ed%99%98%ed%95%a0-%ea%b0%9d%ec%b2%b4%ec%9d%98-%ed%81%b4%eb%9e%98%ec%8a%a4%ea%b0%80-%ec%a1%b4%ec%9e%ac%ed%95%98%ec%a7%80-%ec%95%8a%ec%95%84%eb%8f%84-%eb%90%9c%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;이런 유연함이 &lt;code&gt;JDBC&lt;/code&gt;와 같은 &lt;code&gt;서비스 제공자 프레임워크(Service Provider Framework)&lt;/code&gt;를 만드는데 근간이 된다.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;서비스 제공자 프레임워크&lt;/code&gt;&lt;/strong&gt; 는 서드파티가 &lt;em&gt;서비스를 implement 하거나 extend&lt;/em&gt;해 &lt;strong&gt;제공자(provider, 서비스의 구현체)&lt;/strong&gt; 를 &lt;strong&gt;구현&lt;/strong&gt;하도록 &lt;strong&gt;의도된 API&lt;/strong&gt;이며, 클라이언트에 구현체 제공하는것을 통제해 클라이언트 / 구현체를 분리한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;구현체의 동작 정의된 &lt;strong&gt;&lt;code&gt;서비스 인터페이스(Service Interface)&lt;/code&gt;&lt;/strong&gt; 를 구현하는 구현체를 만든다.&lt;/li&gt;
&lt;li&gt;제공자가 구현체를 &lt;strong&gt;&lt;code&gt;제공자 등록 API(Provider Registration API)&lt;/code&gt;&lt;/strong&gt; 를 통해 등록한다.&lt;/li&gt;
&lt;li&gt;클라이언트가 &lt;strong&gt;&lt;code&gt;서비스 접근 API(Service Access API, 정적 팩터리 메서드)&lt;/code&gt;&lt;/strong&gt; 를 이용해 서비스 인스턴스를 얻는다. 이때, &lt;em&gt;어떤 구현체를 원하는지 조건을 명시&lt;/em&gt;할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이러한 방식을 통해, 제공자가 추후 구현체를 작성하여 프레임워크에 제공해도 정상적으로 작동할 수 있다.&lt;/p&gt;
&lt;p&gt;이렇듯 다양한 장점이 있는 정적 팩토리 메서드이지만, 단점 역시 존재한다.&lt;/p&gt;
&lt;h2 id=&#34;정적-팩토리-메서드의-단점&#34; &gt;정적 팩토리 메서드의 단점
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%95%ec%a0%81-%ed%8c%a9%ed%86%a0%eb%a6%ac-%eb%a9%94%ec%84%9c%eb%93%9c%ec%9d%98-%eb%8b%a8%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;1-정적-팩토리-메서드만-제공하면-하위-클래스-생성이-불가능하다&#34; &gt;1. 정적 팩토리 메서드만 제공하면 하위 클래스 생성이 불가능하다.
&lt;span&gt;
    &lt;a href=&#34;#1-%ec%a0%95%ec%a0%81-%ed%8c%a9%ed%86%a0%eb%a6%ac-%eb%a9%94%ec%84%9c%eb%93%9c%eb%a7%8c-%ec%a0%9c%ea%b3%b5%ed%95%98%eb%a9%b4-%ed%95%98%ec%9c%84-%ed%81%b4%eb%9e%98%ec%8a%a4-%ec%83%9d%ec%84%b1%ec%9d%b4-%eb%b6%88%ea%b0%80%eb%8a%a5%ed%95%98%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;상속을 하려면 &lt;code&gt;public&lt;/code&gt; 또는 &lt;code&gt;protected&lt;/code&gt; 생성자가 필요하기 때문이다.&lt;br&gt;
따라서 개발자는 상속보다 &lt;strong&gt;&lt;code&gt;컴포지션&lt;/code&gt;&lt;/strong&gt; 을 사용하도록 유도된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;컴포지션(Composition)&lt;/code&gt;&lt;/strong&gt; : &lt;strong&gt;has-a 관계&lt;/strong&gt;를 구현하기 위한 설계 기법으로, 객체가 다른 객체를 참조하는 인스턴스 변수를 사용하는 방법이다. &lt;a href=&#34;https://www.geeksforgeeks.org/composition-in-java/&#34;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-네이밍이-정확하지-않으면-다른-사람이-한-번에-알아채기-힘들다&#34; &gt;2. 네이밍이 정확하지 않으면 다른 사람이 한 번에 알아채기 힘들다.
&lt;span&gt;
    &lt;a href=&#34;#2-%eb%84%a4%ec%9d%b4%eb%b0%8d%ec%9d%b4-%ec%a0%95%ed%99%95%ed%95%98%ec%a7%80-%ec%95%8a%ec%9c%bc%eb%a9%b4-%eb%8b%a4%eb%a5%b8-%ec%82%ac%eb%9e%8c%ec%9d%b4-%ed%95%9c-%eb%b2%88%ec%97%90-%ec%95%8c%ec%95%84%ec%b1%84%ea%b8%b0-%ed%9e%98%eb%93%a4%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;생성자 같이 API에 대한 설명이 명확히 드러나지 않아, 클라이언트는 &lt;strong&gt;정적 팩터리 메서드 방식을 채용한 클래스&lt;/strong&gt; 의 인스턴스화 방법을 알아내야 한다.&lt;br&gt;
따라서, &lt;strong&gt;API 문서의 명확한 작성&lt;/strong&gt;과 &lt;strong&gt;적절한 네이밍 규칙&lt;/strong&gt;을 통해 이를 방지해야 한다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
