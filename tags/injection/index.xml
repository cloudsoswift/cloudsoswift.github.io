<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Injection on 오늘도 개발을 한다.</title>
    <link>https://cloudsoswift.github.io/tags/injection/</link>
    <description>오늘도 개발을 한다. (Injection)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sat, 14 Sep 2024 20:29:34 +0900</lastBuildDate>
    
    <atom:link href="https://cloudsoswift.github.io/tags/injection/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[DB] SQL Injection 알아보기 (w. PreparedStatement, Stored Procedures)</title>
      <link>https://cloudsoswift.github.io/post/develop/database/sql-injection/</link>
      <pubDate>Sat, 14 Sep 2024 20:29:34 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/develop/database/sql-injection/</guid>
      <description>&lt;h1 id=&#34;서론&#34; &gt;서론
&lt;span&gt;
    &lt;a href=&#34;#%ec%84%9c%eb%a1%a0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/orm712/CS-712&#34;&gt;CS 스터디&lt;/a&gt;에서 9월 4일에 발표한 &lt;a href=&#34;https://github.com/orm712/CS-712/blob/main/04-DATABASE/16_SQL-Injection/Readme.md&#34;&gt;&lt;strong&gt;SQL Injection&lt;/strong&gt;&lt;/a&gt;에 대해 정리한 문서를 블로그에 공유하고자 한다.&lt;/p&gt;
&lt;h2 id=&#34;sql-injection에-대해-설명해-주세요&#34; &gt;SQL Injection에 대해 설명해 주세요.
&lt;span&gt;
    &lt;a href=&#34;#sql-injection%ec%97%90-%eb%8c%80%ed%95%b4-%ec%84%a4%eb%aa%85%ed%95%b4-%ec%a3%bc%ec%84%b8%ec%9a%94&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;SQL Injection&lt;/code&gt;이란, &lt;em&gt;데이터베이스를 사용하는&lt;/em&gt; 웹 애플리케이션을 공격하는데 사용되는 &lt;code&gt;코드 인젝션 공격 기법&lt;/code&gt;을 말합니다.&lt;br&gt;
주로 공격자가 &lt;code&gt;입력 필드&lt;/code&gt;에 &lt;code&gt;악성 SQL 문&lt;/code&gt;을 삽입해 실행시키는 방식으로 공격하며, &lt;code&gt;데이터베이스의 정보&lt;/code&gt;를 불법적으로 &lt;code&gt;열람&lt;/code&gt; 또는 &lt;code&gt;조작&lt;/code&gt;할 수 있는 취약점입니다.&lt;br&gt;
&lt;code&gt;Injection&lt;/code&gt; 공격은 오픈소스 웹 애플리케이션 보안 프로젝트인 &lt;a href=&#34;https://owasp.org/&#34;&gt;OWASP&lt;/a&gt;에서 매년 &lt;a href=&#34;https://owasp.org/www-project-top-ten/&#34;&gt;상위 10대 취약점&lt;/a&gt;에서 근 20년간 상위권을 차지하고 있으며, 단순히 신원 위조, 기존 데이터 변조와 같은 공격 뿐만 아니라 관리자 탈취, 데이터 삭제, 시스템 데이터 공개와 같이 &lt;code&gt;시스템에 치명적인 공격&lt;/code&gt;을 불러올 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;공격-유형&#34; &gt;공격 유형
&lt;span&gt;
    &lt;a href=&#34;#%ea%b3%b5%ea%b2%a9-%ec%9c%a0%ed%98%95&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;SQL Injection&lt;/code&gt;은 기본적으로 &lt;code&gt;데이터 입력&lt;/code&gt; 란에 &lt;code&gt;메타 문자&lt;/code&gt;(&lt;code&gt;&#39;&#39;&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt; 등 SQL문을 이루는 문자들)를 삽입해 기존에 존재하지 않던 SQL 명령을 &lt;code&gt;제어 영역(control plane, SQL 명령어 및 관련 구조가 위치하는 영역. ~= user input)&lt;/code&gt;에 배치하는 방식으로 이뤄집니다.&lt;br&gt;
이러한 구조적 결함은 SQL이 &lt;code&gt;제어 영역&lt;/code&gt;과 &lt;code&gt;데이터 영역(data plane, 실제 데이터 값이 위치하는 영역. ~= SQL Query)&lt;/code&gt;을 구분하지 않고, 단순히 문자열로 된 명령을 실행한다는 점에서 기인합니다.&lt;br&gt;
&lt;code&gt;SQL Injection&lt;/code&gt;은 크게 아래 3가지 유형으로 구분됩니다.&lt;/p&gt;
&lt;h4 id=&#34;에러-기반-sql-인젝션error-based-sql-injection&#34; &gt;에러 기반 SQL 인젝션(Error-based SQL Injection)
&lt;span&gt;
    &lt;a href=&#34;#%ec%97%90%eb%9f%ac-%ea%b8%b0%eb%b0%98-sql-%ec%9d%b8%ec%a0%9d%ec%85%98error-based-sql-injection&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;에러 기반 SQL 인젝션&lt;/code&gt;은 데이터베이스 서버에서 발생한 &lt;code&gt;오류 메세지&lt;/code&gt;를 바탕으로 현재 API가 &lt;code&gt;어떤 SQL 명령&lt;/code&gt;을 호출하는지, &lt;code&gt;데이터베이스 구조&lt;/code&gt;는 어떤지 등의 &lt;code&gt;정보&lt;/code&gt;를 얻어내 공격하는 기법입니다.&lt;br&gt;
이는 공격당하는 &lt;code&gt;웹 애플리케이션&lt;/code&gt; 서버가 &lt;em&gt;SQL 쿼리 수행시 발생한&lt;/em&gt; &lt;code&gt;오류&lt;/code&gt;를 &lt;code&gt;HTTP 응답&lt;/code&gt;으로 &lt;code&gt;반환&lt;/code&gt;하도록 동작하는 경우 가능한 공격입니다.&lt;/p&gt;
&lt;h5 id=&#34;예시&#34; &gt;예시
&lt;span&gt;
    &lt;a href=&#34;#%ec%98%88%ec%8b%9c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;&lt;img src=&#34;error-based-form.png&#34; alt=&#34;error-based-form.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 입력 폼으로 아이디, 비밀번호를 입력받아 로그인을 수행하는 웹 애플리케이션이 있다고 가정하겠습니다.&lt;br&gt;
위 애플리케이션이 구동되는 Spring 서버에서는 DB에서 일치하는 유저를 불러오기 위해 다음과 같은 코드가 동작하게 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Statement st &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createStatement&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	ResultSet rs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; st&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;executeQuery&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT * FROM member WHERE userid = &amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ID &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39; AND userpw =&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; PW &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;즉, DB에서는 다음과 같은 SQL문이 동작하게 될 것입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; member &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; userid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$ID&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; userpw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$PW&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이때, pw에 &lt;code&gt;&#39;OR 1=1 --&lt;/code&gt;를 입력하거나 &lt;code&gt;extractvalue()&lt;/code&gt; 함수 등을 사용해 DB 정보를 탈취할 수 있습니다.&lt;br&gt;
&lt;code&gt;OR 1=1 --&lt;/code&gt;는 &lt;code&gt;WHERE&lt;/code&gt; 절의 조건을 항상 참이 되도록 하고, 이어지는 조건들을 &lt;code&gt;--&lt;/code&gt;를 통해 &lt;code&gt;주석 처리&lt;/code&gt;하게 됩니다. 따라서 id에 (실제 서비스에 가입된) id중 어떤 것을 입력해도 로그인할 수 있게 됩니다.&lt;br&gt;
&lt;code&gt;extractvalue(xml_frag, xpath_expr)&lt;/code&gt; 함수의 경우 &lt;code&gt;XML&lt;/code&gt;과 &lt;code&gt;XPath 표현식&lt;/code&gt;을 인자로 받아, &lt;code&gt;XML&lt;/code&gt;에서 &lt;code&gt;XPath 표현식&lt;/code&gt;에 일치하는 데이터를 추출 및 반환하는 함수입니다.&lt;br&gt;
이때, &lt;code&gt;두 번째 인수&lt;/code&gt;에 유효하지 않은 XPath 표현식이 사용될 경우 &lt;code&gt;XPATH syntax error&lt;/code&gt;를 통해 해당 인수 값을 &lt;code&gt;출력&lt;/code&gt;하게 되는데, 이것이 &lt;code&gt;SQL 쿼리&lt;/code&gt;일 경우 &lt;code&gt;실행 결과를 에러 메시지에 포함&lt;/code&gt;한다는 점을 활용해 공격에 사용됩니다.&lt;br&gt;
따라서 두 번째 인수에 콜론(&lt;code&gt;&#39;:&#39;&lt;/code&gt; 또는 &lt;code&gt;0x3a&lt;/code&gt;(16진수 표현)을 사용)을 맨 앞에 추가하므로써 항상 유효하지 않은 &lt;code&gt;XPath 표현식&lt;/code&gt;을 만들고, &lt;code&gt;concat()&lt;/code&gt;으로 뒤에 실제 실행할 &lt;code&gt;SQL 쿼리&lt;/code&gt;를 넘겨 정보 탈취를 시도합니다.&lt;br&gt;
가령 PW에 &lt;code&gt;&#39; AND extractvalue(rand(),concat(0x3a,version()))--&lt;/code&gt; 라는 구문을 넣게 된다면 실제 SQL 쿼리 문은 다음과 같게 될것입니다. (&lt;code&gt;version()&lt;/code&gt;은 현재 MySQL 버전을 반환하는 함수입니다.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; member &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; userid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; userpw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; extractvalue(rand(),concat(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;x3a,&lt;span style=&#34;color:#66d9ef&#34;&gt;version&lt;/span&gt;()))&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이를 실행하면 아래 그림처럼 서버의 MySQL 버전을 &lt;code&gt;에러와 함께 반환&lt;/code&gt;하게 됩니다.&lt;br&gt;
&lt;img src=&#34;error-alert.png&#34; alt=&#34;error-alert.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;이를 통해 공격자는 &lt;code&gt;DB 버전&lt;/code&gt;, &lt;code&gt;DB 명&lt;/code&gt;, &lt;code&gt;테이블 명&lt;/code&gt;, &lt;code&gt;컬럼 명&lt;/code&gt; 등 다양한 데이터들을 추출할 수 있게 됩니다.&lt;/p&gt;
&lt;h4 id=&#34;union-기반-sql-인젝션union-based-sql-injection&#34; &gt;UNION 기반 SQL 인젝션(Union-based SQL Injection)
&lt;span&gt;
    &lt;a href=&#34;#union-%ea%b8%b0%eb%b0%98-sql-%ec%9d%b8%ec%a0%9d%ec%85%98union-based-sql-injection&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;UNION 기반 SQL 인젝션&lt;/code&gt;은 웹 애플리케이션이 &lt;code&gt;DB 질의한 결과&lt;/code&gt;를 &lt;code&gt;HTTP 응답&lt;/code&gt;에 포함해 반환하는 경우, &lt;code&gt;SQL&lt;/code&gt;문을 조작하여 &lt;code&gt;DB 구조 및 데이터&lt;/code&gt;를 &lt;code&gt;탈취&lt;/code&gt;하는 공격 기법입니다.&lt;br&gt;
이때, &lt;em&gt;원래 애플리케이션이 반환할 데이터는 필요하지 않으므로&lt;/em&gt; &lt;code&gt;음수 값&lt;/code&gt;과 같이 DB에 존재하지 않을만한 값을 &lt;code&gt;입력 값으로 전달&lt;/code&gt;하고, 이후 &lt;code&gt;UNION&lt;/code&gt; 또는 &lt;code&gt;UNION ALL&lt;/code&gt;을 이용해 DB의 다른 데이터 값을 추출하는 &lt;code&gt;SQL 쿼리를 덧붙여&lt;/code&gt; 서버에 전달하게 됩니다.&lt;/p&gt;
&lt;h5 id=&#34;union과-union-all&#34; &gt;&lt;code&gt;UNION&lt;/code&gt;과 &lt;code&gt;UNION ALL&lt;/code&gt;
&lt;span&gt;
    &lt;a href=&#34;#union%ea%b3%bc-union-all&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;&lt;code&gt;UNION&lt;/code&gt;과 &lt;code&gt;UNION ALL&lt;/code&gt;은 &lt;strong&gt;두 개 이상&lt;/strong&gt;의 &lt;code&gt;SELECT 쿼리 결과&lt;/code&gt;를 하나로 합쳐주는 집합 연산자로, 이때 합쳐질 쿼리들은 다음 조건을 만족해야 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;각 쿼리들은 &lt;code&gt;SELECT&lt;/code&gt;절에서 &lt;code&gt;동일한 갯수&lt;/code&gt;의 &lt;code&gt;열&lt;/code&gt;을 사용해야 한다.&lt;/li&gt;
&lt;li&gt;각 쿼리에서 &lt;code&gt;동일한 순서의 컬럼들&lt;/code&gt;은 서로 호환되는 자료형을 가져야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;또한, &lt;code&gt;UNION&lt;/code&gt;은 쿼리 결과값 통합시 중&lt;code&gt;복된 레코드를 제거&lt;/code&gt;하는 반면, &lt;code&gt;UNION ALL&lt;/code&gt;은 &lt;em&gt;중복 제거 절차 없이&lt;/em&gt; &lt;code&gt;모든 레코드들을 반환&lt;/code&gt;한다는 차이가 있습니다.&lt;/p&gt;
&lt;h5 id=&#34;예시-1&#34; &gt;예시
&lt;span&gt;
    &lt;a href=&#34;#%ec%98%88%ec%8b%9c-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;쇼핑몰 웹 애플리케이션에서 물품의 ID를 사용자로 부터 입력받으면, 해당 물품의 &lt;code&gt;ID&lt;/code&gt;, &lt;code&gt;이름&lt;/code&gt;, &lt;code&gt;가격&lt;/code&gt;을 조회하는 API가 있다고 가정하겠습니다.&lt;br&gt;
해당 API가 DB에 요청할 SQL 쿼리는 다음과 같을 것입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; item_id, item_name, item_price 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; item 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; item_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$item_id&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;또한, 해당 API는 HTTP 응답으로 이름과 가격, 즉 &lt;code&gt;item_name&lt;/code&gt;, &lt;code&gt;item_price&lt;/code&gt;를 반환합니다.&lt;/p&gt;
&lt;p&gt;이러한 상황에서 ID로 &lt;code&gt;-99 UNION ALL SELECT version(), database(), 2--&lt;/code&gt;를 전달한다면 SQL 쿼리는 다음과 같이 바뀌게 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; item_id, item_name, item_price 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; item 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; item_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ALL&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;version&lt;/span&gt;(), &lt;span style=&#34;color:#66d9ef&#34;&gt;database&lt;/span&gt;(), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;당연히 상품 ID가 음수인 상품은 존재하지 않을 것이므로 상품 데이터는 전혀 반환되지 않고 &lt;code&gt;UNION&lt;/code&gt;으로 결합한 &lt;code&gt;SELECT&lt;/code&gt; 쿼리에 포함된 &lt;code&gt;SQL 서버 버전&lt;/code&gt;, &lt;code&gt;DB명&lt;/code&gt;, &lt;code&gt;숫자(컬럼 갯수 및 타입을 맞추기 위한 임의 값)&lt;/code&gt;를 반환하게 됩니다.&lt;/p&gt;
&lt;h5 id=&#34;열-갯수-알아내기&#34; &gt;열 갯수 알아내기
&lt;span&gt;
    &lt;a href=&#34;#%ec%97%b4-%ea%b0%af%ec%88%98-%ec%95%8c%ec%95%84%eb%82%b4%ea%b8%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;그리고 &lt;code&gt;UNION&lt;/code&gt;에서 열의 갯수를 맞춰야 하는 조건 때문에, 현재 쿼리의 컬럼 갯수를 알아야 할 수 있습니다.&lt;br&gt;
이때 &lt;code&gt;ORDER BY&lt;/code&gt; 절을 활용하면, 원래의 &lt;code&gt;SQL 쿼리&lt;/code&gt;의 열 갯수를 알아낼 수 있습니다.&lt;br&gt;
&lt;code&gt;ORDER BY&lt;/code&gt; 절에서 정렬 기준 컬럼을 지정할 때, 열 이름을 직접 기입할 수도 있지만 &lt;code&gt;해당 컬럼의 순번&lt;/code&gt;을 기입할 수도 있습니다.&lt;br&gt;
즉, 위 케이스의 경우 &lt;code&gt;ORDER BY 3&lt;/code&gt;을 기입하면 &lt;code&gt;SQL 쿼리&lt;/code&gt;의 세 번째 컬럼인 &lt;code&gt;item_price&lt;/code&gt;를 기준으로 정렬하게 됩니다.&lt;br&gt;
이러한 순번은 &lt;code&gt;SQL 쿼리가 불러올 컬럼 갯수&lt;/code&gt;만큼 배정되므로 &lt;code&gt;해당 갯수 이상의 숫자&lt;/code&gt;를 기입하게 되면 다음과 같은 &lt;code&gt;오류가 발생&lt;/code&gt;하게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;union-alert.png&#34; alt=&#34;union-alert.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;따라서 &lt;code&gt;ORDER BY&lt;/code&gt; 문에 기입할 순번을 하나씩 &lt;code&gt;차례대로 증가&lt;/code&gt;시키다가 &lt;code&gt;DB에서 오류가 발생&lt;/code&gt;하거나 &lt;code&gt;비정상 응답을 반환&lt;/code&gt;하게 되면, 바로 전의 순번이 원래의 SQL문의 &lt;code&gt;컬럼 갯수&lt;/code&gt;와 같게되는 것입니다.&lt;/p&gt;
&lt;h4 id=&#34;블라인드-sql-인젝션blind-sql-injection&#34; &gt;블라인드 SQL 인젝션(Blind SQL Injection)
&lt;span&gt;
    &lt;a href=&#34;#%eb%b8%94%eb%9d%bc%ec%9d%b8%eb%93%9c-sql-%ec%9d%b8%ec%a0%9d%ec%85%98blind-sql-injection&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;블라인드 SQL 인젝션&lt;/code&gt;은 &lt;em&gt;상기한 SQL 인젝션들과 달리&lt;/em&gt;, 웹 애플리케이션이 &lt;code&gt;HTTP 응답&lt;/code&gt;에 &lt;code&gt;DB 오류 메시지&lt;/code&gt;나 &lt;code&gt;데이터&lt;/code&gt;를 포함하지 않을때 사용할 수 있는 공격 기법입니다.&lt;br&gt;
즉, &lt;em&gt;서버의 직접적인 응답 대신&lt;/em&gt; &lt;code&gt;알고싶은 정보가 포함된 특정 조건&lt;/code&gt;을 SQL 쿼리에 포함시켰을때 &lt;code&gt;HTTP 응답&lt;/code&gt;의 &lt;code&gt;상태&lt;/code&gt;가 달라지거나, &lt;code&gt;응답에 걸리는 시간&lt;/code&gt;의 차이를 통해 해당 조건이 &lt;code&gt;참인지 거짓인지&lt;/code&gt; 알아내므로써 데이터베이스 내 &lt;code&gt;정보를 유추&lt;/code&gt;하는 공격 기법입니다.&lt;br&gt;
크게 응답의 차이를 통해 유추하는 &lt;code&gt;불린 기반&lt;/code&gt; 방식과 서버의 응답 시간 차이를 통해 유추하는 &lt;code&gt;시간 기반&lt;/code&gt; 방식이 있습니다.&lt;/p&gt;
&lt;h5 id=&#34;블라인드-불린-기반-sql-인젝션blind-boolean-based-sql-injection&#34; &gt;블라인드 불린 기반 SQL 인젝션(Blind Boolean-Based SQL Injection)
&lt;span&gt;
    &lt;a href=&#34;#%eb%b8%94%eb%9d%bc%ec%9d%b8%eb%93%9c-%eb%b6%88%eb%a6%b0-%ea%b8%b0%eb%b0%98-sql-%ec%9d%b8%ec%a0%9d%ec%85%98blind-boolean-based-sql-injection&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;&lt;code&gt;블라인드 불린 기반 SQL 인젝션&lt;/code&gt;은 &lt;code&gt;SQL 쿼리&lt;/code&gt;의 &lt;code&gt;참/거짓&lt;/code&gt;여부에 따른  &lt;code&gt;HTTP 응답 내용&lt;/code&gt;, &lt;code&gt;상태 코드&lt;/code&gt; 등의 &lt;code&gt;차이가 존재&lt;/code&gt;할 때 이를 통해 &lt;code&gt;정보를 유추&lt;/code&gt;할 수 있는 공격 기법입니다.&lt;/p&gt;
&lt;h6 id=&#34;예시-2&#34; &gt;예시
&lt;span&gt;
    &lt;a href=&#34;#%ec%98%88%ec%8b%9c-2&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;p&gt;게시판 애플리케이션에서 게시글 id를 URL 인자로 받아 게시물을 불러오는 API를 예시로 들어보겠습니다. 해당 API는 다음과 같은 SQL 쿼리를 요청합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; subject, content, author  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; board  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$id&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;만약 올바른 게시글 id를 전달받았다면 정상적으로 해당 게시글을 가져올 것이고, 그렇지 않다면 아무것도 반환하지 않을 것입니다.&lt;br&gt;
예를 들어 id를 &lt;code&gt;1 AND 1=0--&lt;/code&gt; 로 넘겼다면 SQL문은 다음과 같게 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; subject, content, author  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; board  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;우리가 넘긴 &lt;code&gt;AND 1=0&lt;/code&gt; 조건 때문에 게시물 조회 &lt;code&gt;SQL 쿼리&lt;/code&gt;는 거짓이 되어 아무 것도 불러올 수 없을 것입니다. 반면 &lt;code&gt;1 AND 1=1 --&lt;/code&gt;을 넘겼다면 정상적으로 게시물을 조회해올 것입니다.&lt;br&gt;
이를 바탕으로 데이터베이스의 이름을 알아내고 싶다고 가정해보겠습니다.&lt;br&gt;
그렇다면 먼저 DB 이름의 길이를 알아내야 하므로, SQL의 &lt;code&gt;LENGTH()&lt;/code&gt;을 활용합니다.&lt;br&gt;
id로 &lt;code&gt;1 AND LENGTH(database()) = 1 --&lt;/code&gt;, &lt;code&gt;1 AND LENGTH(database()) = 2 --&lt;/code&gt;, &amp;hellip; 처럼 점점 값을 증가시키며 응답이 정상적으로 반환될 때 까지 반복합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LENGTH&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;database&lt;/span&gt;())&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--+                (결과:거짓)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LENGTH&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;database&lt;/span&gt;())&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--+                (결과:거짓)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LENGTH&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;database&lt;/span&gt;())&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--+                (결과:참) &amp;lt;- 현재 DB의 이름의 길이는 3임
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이후 한글자 한글자씩 비교하며 DB 이름의 각 자리가 무엇인지 확인합니다. 이때 &lt;code&gt;SUBSTRING()&lt;/code&gt; 함수를 활용합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SUBSTRING&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;database&lt;/span&gt;(), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--+                (결과:거짓)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SUBSTRING&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;database&lt;/span&gt;(), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--+                (결과:거짓)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;SUBSTRING&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;database&lt;/span&gt;(), &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--+                (결과:참) &amp;lt;- 현재 DB의 이름의 첫 글자는 &amp;#39;c&amp;#39;임
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이를 반복해 알아낸 각 자리의 문자들을 결합하면 DB의 이름을 알아낼 수 있습니다.&lt;/p&gt;
&lt;h5 id=&#34;블라인드-시간-기반-sql-인젝션blind-time-based-sql-injection&#34; &gt;블라인드 시간 기반 SQL 인젝션(Blind Time-Based SQL Injection)
&lt;span&gt;
    &lt;a href=&#34;#%eb%b8%94%eb%9d%bc%ec%9d%b8%eb%93%9c-%ec%8b%9c%ea%b0%84-%ea%b8%b0%eb%b0%98-sql-%ec%9d%b8%ec%a0%9d%ec%85%98blind-time-based-sql-injection&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;&lt;code&gt;블라인드 불린 기반 SQL 인젝션&lt;/code&gt;은 &lt;code&gt;SQL 쿼리&lt;/code&gt;의 &lt;code&gt;참/거짓&lt;/code&gt;여부에 따른  &lt;code&gt;HTTP 응답 내용&lt;/code&gt;, &lt;code&gt;상태 코드&lt;/code&gt; 등의 차이가 존재를 &lt;code&gt;확인할 수 없지만&lt;/code&gt;, 서버 응답 시간을 제어할 수 있을 경우 사용 가능한 공격 기법입니다.&lt;br&gt;
즉, 기존 &lt;code&gt;SQL 쿼리&lt;/code&gt;에 &lt;code&gt;특정 조건&lt;/code&gt;이 참일 경우 &lt;code&gt;응답을 지연시키는 함수&lt;/code&gt;를 사용해 해당 조건의 참/거짓 여부를 판별하게 됩니다.&lt;br&gt;
응답 시간을 제어하는 함수는 DBMS별로 상이하며, 예시로 들 &lt;code&gt;MySQL&lt;/code&gt;(및 &lt;code&gt;MariaDB&lt;/code&gt;)의 경우 &lt;code&gt;sleep()&lt;/code&gt; 함수를 사용합니다.&lt;/p&gt;
&lt;h6 id=&#34;예시-3&#34; &gt;예시
&lt;span&gt;
    &lt;a href=&#34;#%ec%98%88%ec%8b%9c-3&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;p&gt;위와 마찬가지로 게시판 애플리케이션에서 게시물 조회 API를 사용한다고 가정하겠습니다.&lt;br&gt;
이때 id로 &lt;code&gt;1 AND if(1=1, sleep(5), false)--&lt;/code&gt; 와 같은 구문을 전달했을 때 기존 &lt;code&gt;SQL 쿼리&lt;/code&gt;에 정상적으로 포함된다면, SQL문은 다음과 같게 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; subject, content, author  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; board  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;--
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이때 if문이 동작하기 때문에 첫 번째 인자로 주어진 조건식인 &lt;code&gt;1=1&lt;/code&gt;이 참이므로, 서버는 &lt;code&gt;5초간 대기&lt;/code&gt; 상태에 있다가 응답하게 될 것입니다.&lt;br&gt;
이를 바탕으로 &lt;em&gt;불린 기반 공격 처럼&lt;/em&gt;, 조건문에 &lt;code&gt;원하는 정보에 대한 조건&lt;/code&gt;을 포함해 API 요청을 반복하므로써 원하는 정보를 알아낼 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;LENGTH&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;database&lt;/span&gt;())&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;--+                (결과:거짓)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;LENGTH&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;database&lt;/span&gt;())&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;--+                (결과:거짓)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;LENGTH&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;database&lt;/span&gt;())&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;--+                (결과:참) &amp;lt;- 현재 DB의 이름의 길이는 3임
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;방어법-httpscheatsheetseriesowasporgcheatsheetssql_injection_prevention_cheat_sheethtml&#34; &gt;방어법 &lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html&#34;&gt;#&lt;/a&gt;
&lt;span&gt;
    &lt;a href=&#34;#%eb%b0%a9%ec%96%b4%eb%b2%95-httpscheatsheetseriesowasporgcheatsheetssql_injection_prevention_cheat_sheethtml&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;이러한 &lt;code&gt;SQL 인젝션&lt;/code&gt;을 방지하기 위해서는 ① &lt;code&gt;문자열들을 연결&lt;/code&gt;해 &lt;code&gt;동적 SQL 쿼리&lt;/code&gt;를 &lt;code&gt;생성하지 않거나&lt;/code&gt;, ② 실행된 쿼리에 &lt;code&gt;악성 SQL 입력&lt;/code&gt;이 &lt;code&gt;포함되지 않도록&lt;/code&gt; 해야 합니다.&lt;/p&gt;
&lt;h4 id=&#34;prepared-statement-사용하기&#34; &gt;Prepared Statement 사용하기
&lt;span&gt;
    &lt;a href=&#34;#prepared-statement-%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;준비된 구문(Prepared Statement)&lt;/code&gt;, 또는 &lt;code&gt;파라미터화 된 쿼리(Parameterized Query)&lt;/code&gt;를 사용하게 되면 &lt;code&gt;동적 쿼리&lt;/code&gt;보다 쿼리를 작성 및 이해하는데 쉬우며, 개발자가 먼저 SQL 쿼리를 정의한 뒤 이후에 각 매개변수들을 쿼리에 전달하도록 합니다.&lt;br&gt;
또한 DB 쿼리가 이러한 형태를 띄는 경우 DB는 사용자 입력에 상관없이 항상 코드와 데이터를 구분합니다. 그리고 공격자가 SQL 명령을 삽입해도 쿼리의 원래 의도를 변경할 수 없도록 보장합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 코드 예시
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 매개변수로 사용될 해당 인자는 꼭 검증하는 것이 좋습니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;String custname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;customerName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SELECT account_balance FROM user_data WHERE user_name = ? &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PreparedStatement pstmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;prepareStatement&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; query &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pstmt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; custname&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ResultSet results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pstmt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;executeQuery&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Java의 &lt;code&gt;PreparedStatement&lt;/code&gt;, C# .NET의 &lt;code&gt;OleDbCommand&lt;/code&gt; 등이 이를 구현하고 있으며 이외에도 Ruby, PHP, Perl 등 다양한 언어에 &lt;code&gt;Prepared Statement&lt;/code&gt; 구현체가 존재합니다.&lt;br&gt;
또한 &lt;code&gt;SQL 인젝션&lt;/code&gt;과 유사한 &lt;code&gt;HQL 인젝션&lt;/code&gt;이 존재하는 SQL 추상화 계층인 &lt;code&gt;HQL(Hibernate Query Language)&lt;/code&gt;에도 &lt;code&gt;Prepared Statement&lt;/code&gt; 형태의 구현체가 존재합니다.&lt;/p&gt;
&lt;h4 id=&#34;stored-procedures-사용하기&#34; &gt;Stored Procedures 사용하기
&lt;span&gt;
    &lt;a href=&#34;#stored-procedures-%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;저장 프로시저 (Stored procedure)&lt;/code&gt;란 DBMS에 저장되어 재사용 및 공유할 수 있는 일련의 &lt;code&gt;SQL 쿼리 집합&lt;/code&gt;입니다.&lt;br&gt;
&lt;code&gt;Stored Procedure&lt;/code&gt;가 항상 &lt;code&gt;SQL 인젝션&lt;/code&gt;으로 부터 안전하지 않지만, 특정 표준 &lt;code&gt;Stored Procedure&lt;/code&gt;를 사용하면 &lt;code&gt;Parameterized Query&lt;/code&gt;를 사용하는 것과 동일한 효과를 갖게 됩니다.&lt;br&gt;
다만, &lt;code&gt;Stored Procedure&lt;/code&gt;를 사용할 경우 오히려 시스템이 노출될 경우의 위험을 증가시킬 수 있습니다.&lt;br&gt;
가령 &lt;code&gt;db_datareader&lt;/code&gt;, &lt;code&gt;db_datawriter&lt;/code&gt;, &lt;code&gt;db_owner&lt;/code&gt;세 가지 기본 역할이 존재하는 &lt;code&gt;MS SQL Server&lt;/code&gt;에서는 &lt;code&gt;Stored Procedure&lt;/code&gt; 실행을 위해 &lt;code&gt;실행 권한(Execute right)&lt;/code&gt;이 필요하며, 만약 이 세가지 역할만 사용하는 서비스라면 웹앱이 &lt;code&gt;db_owner&lt;/code&gt; 역할로 실행되어야 &lt;code&gt;Stored Procedure&lt;/code&gt;를 사용할 수 있게 됩니다.&lt;br&gt;
따라서 사용자에게 읽기 접근 권한만 할당하기 위해 &lt;code&gt;db_datareader&lt;/code&gt; 역할을 할당하는게 불가능해지며, 공격자는 DB에 대한 모든 권한을 얻게 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String custname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;customerName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Stored Procedure를 호출할 때, 매개변수들을 인자로 전달한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  CallableStatement cs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; connection&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;prepareCall&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{call sp_getAccountBalance(?)}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; custname&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ResultSet results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;executeQuery&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// … result set handling
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SQLException se&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// … logging and error handling
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;입력-허용-목록을-통한-유효성-검사&#34; &gt;입력 허용 목록을 통한 유효성 검사
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%85%eb%a0%a5-%ed%97%88%ec%9a%a9-%eb%aa%a9%eb%a1%9d%ec%9d%84-%ed%86%b5%ed%95%9c-%ec%9c%a0%ed%9a%a8%ec%84%b1-%ea%b2%80%ec%82%ac&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;p&gt;만약 사용자 입력에 의해 변경될 값이 &lt;code&gt;테이블 이름&lt;/code&gt;, &lt;code&gt;컬럼 명&lt;/code&gt; 처럼 &lt;code&gt;바인드 변수&lt;/code&gt;를 할당할 수 없는 위치라면 쿼리를 재설계 하거나, 설명할 &lt;code&gt;입력 유효성 검사&lt;/code&gt;를 수행하는 것이 알맞은 방어책 입니다.&lt;br&gt;
이때, &lt;code&gt;테이블&lt;/code&gt; 또는 &lt;code&gt;컬럼 명&lt;/code&gt;을 사용자 매개변수 값을 통해 전달 받을 경우, 해당 값이 다른 테이블의 다른 컬럼을 이름을 가질 수도 있습니다.&lt;br&gt;
이러한 경우 근본적으로 이를 막도록 &lt;code&gt;코드를 재작성&lt;/code&gt; 하는것이 좋지만, 이는 현실적으로 쉽지 않습니다.
따라서 사용자 매개변수를 &lt;code&gt;예상 가능한 테이블&lt;/code&gt;에 매핑하여 &lt;code&gt;유효하지 않은 사용자 입력&lt;/code&gt;이 쿼리에 &lt;code&gt;포함되는 것을 막아야&lt;/code&gt; 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String tableName&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 사용자 매개변수 값에 따라 tableName을 코드에서 지정합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PARAM&lt;span style=&#34;color:#f92672&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Value1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; tableName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fooTable&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Value2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; tableName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;barTable&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InputValidationException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unexpected value provided&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                  &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; for table name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;추가로, 꼭 동적 쿼리를 사용해야 한다면 동적 쿼리에 SQL 구문을 삽입할 수 없도록 &lt;code&gt;API&lt;/code&gt; 또는 &lt;code&gt;StoredProcedure&lt;/code&gt;의 매개변수를 가능한 문자열이 아닌 타입으로 받는것이 좋습니다.&lt;br&gt;
즉, 예를 들어 &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt; 등으로 받게 된다면 안전하게 사용자로부터 입력을 받는것이 가능합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;someMethod&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;sortOrder&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;SQLquery&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some SQL ... order by Salary &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sortOrder&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ASC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DESC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;참고&#34; &gt;참고
&lt;span&gt;
    &lt;a href=&#34;#%ec%b0%b8%ea%b3%a0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/types-of-sql-injection-sqli/&#34;&gt;Types of SQL Injection (SQLi) - GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brightsec.com/blog/sql-injection-attack/&#34;&gt;SQL Injection Attack: How It Works, Examples and Prevention (brightsec.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Glossary/SQL_Injection&#34;&gt;SQL 인젝션 (SQL Injection) - MDN Web Docs 용어 사전: 웹 용어 정의 | MDN (mozilla.org)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html&#34;&gt;SQL Injection Prevention - OWASP Cheat Sheet Series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.invicti.com/blog/web-security/sql-injection-cheat-sheet/&#34;&gt;SQL Injection Cheat Sheet | Invicti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://owasp.org/www-community/attacks/SQL_Injection&#34;&gt;SQL Injection | OWASP Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://owasp.org/www-community/attacks/Blind_SQL_Injection&#34;&gt;Blind SQL Injection | OWASP Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.boannews.com/media/view.asp?idx=128286&amp;amp;page=1&amp;amp;mkind=&amp;amp;kind=5&amp;amp;skind=J&amp;amp;search=title&amp;amp;find=&#34;&gt;[카드뉴스] ‘오래된 위협, 그러나 여전히 강력한’ SQL 인젝션 (boannews.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bugbountyclub.com/pentestgym/view/53&#34;&gt;Error 기반 SQL 인젝션 | Pentest Gym | 버그바운티클럽 (bugbountyclub.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bugbountyclub.com/pentestgym/view/54&#34;&gt;UNION 기반 SQL 인젝션 | Pentest Gym | 버그바운티클럽 (bugbountyclub.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bugbountyclub.com/pentestgym/view/55&#34;&gt;Blind SQL 인젝션 | Pentest Gym | 버그바운티클럽 (bugbountyclub.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
