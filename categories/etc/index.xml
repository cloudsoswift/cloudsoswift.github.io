<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>etc on 내자가추 백절불굴</title>
        <link>https://cloudsoswift.github.io/categories/etc/</link>
        <description>Recent content in etc on 내자가추 백절불굴</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Tue, 24 Jan 2023 08:35:50 +0900</lastBuildDate><atom:link href="https://cloudsoswift.github.io/categories/etc/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>블로그 시작</title>
        <link>https://cloudsoswift.github.io/post/etc/230124/2023-01-24-start/</link>
        <pubDate>Tue, 24 Jan 2023 08:35:50 +0900</pubDate>
        
        <guid>https://cloudsoswift.github.io/post/etc/230124/2023-01-24-start/</guid>
        <description>&lt;img src="https://cloudsoswift.github.io/post/etc/230124/2022-01-28-first-init-hugo.png" alt="Featured image of post 블로그 시작" /&gt;&lt;p&gt;블로그를 시작하면서 마주치는 선택지와 내가 선택한 것들을 정리해보고자 한다.&lt;/p&gt;
&lt;h2 id=&#34;플랫폼&#34;&gt;플랫폼&lt;/h2&gt;
&lt;h3 id=&#34;기존의-blog-서비스--tistory-naver-velog-등-&#34;&gt;기존의 blog 서비스 ( Tistory, Naver, velog 등&amp;hellip; )&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;안정적으로 서비스 됨. ( 배포, 댓글 이런거 신경 안 써도 됨. )&lt;/li&gt;
&lt;li&gt;미리 어느정도 템플릿이 잡혀있음.
&lt;ul&gt;
&lt;li&gt;커스터마이징에 제한.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;github-pages를-이용&#34;&gt;Github Pages를 이용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;배포, 댓글 같은 점들을 내가 직접 설정&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; 이용.&lt;/li&gt;
&lt;li&gt;기존의 Blog 서비스를 이용하는게 더 stable하다는건 알지만, 그래도 뭔가 새로운 시도를 해보고싶어서 Github Pages를 이용해 배포하는걸로 결정!
&lt;ul&gt;
&lt;li&gt;+ 올해 들어 Obsidian을 통해 markdown으로 생각이나 정보같은걸 정리하고 있었는데, 이 방식을 통해 Markdown 문서를 더 많이 작성하면 Markdown에 더 익숙해 질 것 같았다!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;블로그github-pages-프레임워크static-site-generator&#34;&gt;블로그(Github Pages) 프레임워크(Static Site Generator)&lt;/h2&gt;
&lt;h3 id=&#34;jekyll&#34;&gt;Jekyll&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ruby 기반&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Github Pages에서 사용하고 있어 호환성이 높다&lt;/li&gt;
&lt;li&gt;윈도우를 공식적으로ㅠㅠ 지원ㅠㅠ 하지않음ㅠㅠ.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hexo&#34;&gt;Hexo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;js 기반&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;만든 사람이 대만인.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hugo&#34;&gt;Hugo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Go 기반&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;반응속도가 다른 프레임워크들 보다 월등히 빠르다.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;윈도우를 공 식 적 으 로 지 원 함.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hugo를-선택한-이유&#34;&gt;Hugo를 선택한 이유&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Star 갯수 (2023. 01. 22 기준)
&lt;ul&gt;
&lt;li&gt;Hugo (64.9k) &amp;raquo;&amp;raquo;&amp;gt; Jekyll (46k) &amp;raquo;&amp;gt; hexo ( 36.1k )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows를 공식적으로 지원한다는 점.&lt;/li&gt;
&lt;li&gt;Go를 이번 기회에 한 번 써보고 싶었음.&lt;/li&gt;
&lt;li&gt;소위 홍대병이라고 하는 힙스터 기질이 발동해서(&amp;hellip;.)&lt;/li&gt;
&lt;li&gt;+ &lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Themes&lt;/a&gt;에서 Theme를 찾아보는데, 맘에 드는 &lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/themes/hugo-theme-stack/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Theme&lt;/a&gt;를 발견했다. &lt;br/&gt;(반응형도 잘 되길래 더 꽂혀버림&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hugo-설치-및-설정&#34;&gt;Hugo 설치 및 설정&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows 환경에 Hugo를 설치할 때, &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/installation/windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;다양한 방법&lt;/a&gt;이 있지만 이미 빌드된 바이너리들을 사용하는 방법으로 설치하기로 했다.
&lt;ul&gt;
&lt;li&gt;Hugo의 Github Repository의 &lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;최신 release&lt;/a&gt;를 다운받고, 시스템 전역변수에 Path로 추가해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;사이트-생성&#34;&gt;사이트 생성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo new site myHugo&lt;/code&gt; 명령어를 통해 새로운 site를 생성한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;테마-추가&#34;&gt;테마 추가&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Themes&lt;/a&gt;에 들어가서 원하는 테마를 찾아본다.&lt;/li&gt;
&lt;li&gt;본인의 경우, &lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Theme Stack&lt;/a&gt; 이라는 테마를 선택함.&lt;/li&gt;
&lt;li&gt;웬만하면 Downloads 링크가 Github Repository로 연결되어 있을 것인데, 해당 Repo를 Site 폴더의 submodule로 추가해준다.&lt;br&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git init
git submodule add [theme repo 주소] themes/[테마 이름] 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;이후 추가적인 설정을 위해 theme 폴더 안의 config 파일이나, site 폴더 안의 config 파일을 수정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;글-쓰기&#34;&gt;글 쓰기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo new post/파일명.md&lt;/code&gt; 를 통해 새 문서를 만든다.&lt;/li&gt;
&lt;li&gt;이러면 Hugo가 해당 위치에 &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/content-management/front-matter/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Front Matter&lt;/a&gt;라고 부르는 해당 글에대한 metadata가 미리 작성되어 있는 Markdown 파일을 만들어 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;로컬단에서-확인해보기&#34;&gt;로컬단에서 확인해보기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo server&lt;/code&gt; 명령어를 통해 로컬단에서 미리 블로그가 어떻게 보일지를 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;보통 &lt;a class=&#34;link&#34; href=&#34;http://localhost:1313/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://localhost:1313/&lt;/a&gt;로 접근할 수 있다.&lt;/li&gt;
&lt;li&gt;VS Code에서 Live Server 쓰는것 마냥 변경사항이 바로바로 반영되어서 확인하기 편했다!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;build-및-git에-올리기&#34;&gt;Build 및 Git에 올리기&lt;/h3&gt;
&lt;h4 id=&#34;build&#34;&gt;Build&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hugo -t [테마 이름]&lt;/code&gt; 명령어를 사용하면, &lt;code&gt;/public&lt;/code&gt; 폴더 안에 빌드된 Site 데이터들이 저장된다.&lt;/li&gt;
&lt;li&gt;참고로 밑에서 git에서 submodule을 추가할 때, public 폴더가 이미 존재하면 추가가 안되니 먼저 submodule add를 해주고 build 작업을 진행해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;git에-올리기&#34;&gt;Git에 올리기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;아까 Theme 설치할 때, Git init 작업을 진행했으므로, init은 생략한다.
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote add origin [Hugo Site 폴더 저장할 Repo 주소]
git submodule add -b master [실제 Github Pages에 올릴 Repo 주소] public
&lt;/code&gt;&lt;/pre&gt;이후 두 Git Repo에 대해 각각 add -&amp;gt; commit -&amp;gt; push 과정을 수행하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;참고한-글&#34;&gt;참고한 글&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ialy1595.github.io/post/blog-construct-1/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IALY1595님 블로그&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;되게 자세하게 문서화 해주시고, 추가로 Theme Customizing에 관한 글도 써두셔서 블로그 만드는데 도움이 정말 많이 되었습니다&amp;hellip; 감사합니다 (_ _)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://selfinvestfriends.tistory.com/79&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;self invest님 블로그&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;마찬가지로 자세히 문서화 해주시고, 추가로 github action으로 자동화하는 방법까지 작성해주셨다. 아직 자동화까진 적용 안해봤지만 참고할 예정&amp;hellip; 감사합니다 (_ _)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>첫 글</title>
        <link>https://cloudsoswift.github.io/post/etc/2023-01-23-first-init/</link>
        <pubDate>Mon, 23 Jan 2023 01:32:17 +0900</pubDate>
        
        <guid>https://cloudsoswift.github.io/post/etc/2023-01-23-first-init/</guid>
        <description>&lt;h1 id=&#34;블로그에-쓰는-첫-글이다&#34;&gt;블로그에 쓰는 첫 글이다.&lt;/h1&gt;
&lt;ol start=&#34;2023&#34;&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;23&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
