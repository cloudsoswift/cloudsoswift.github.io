<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>develop on 오늘도 개발을 한다.</title>
    <link>https://cloudsoswift.github.io/categories/develop/</link>
    <description>오늘도 개발을 한다. (develop)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Fri, 02 Feb 2024 13:19:37 +0900</lastBuildDate>
    
    <atom:link href="https://cloudsoswift.github.io/categories/develop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JVM의 구조 간략하게 알아보기</title>
      <link>https://cloudsoswift.github.io/post/develop/java/architecture-of-jvm/</link>
      <pubDate>Fri, 02 Feb 2024 13:19:37 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/develop/java/architecture-of-jvm/</guid>
      <description>&lt;h1 id=&#34;서론&#34; &gt;서론
&lt;span&gt;
    &lt;a href=&#34;#%ec%84%9c%eb%a1%a0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;p&gt;최근에 시작한 &lt;a href=&#34;https://github.com/orm712/CS-712&#34;&gt;CS 스터디&lt;/a&gt;에서 첫 주제가 &amp;lsquo;JVM&amp;rsquo;에 관해 조사하는것으로 정해져 이를 문서로 정리 후 발표를 진행했었다.&lt;br&gt;
이를 블로그에도 일부분 정리를 해서 포스팅하고자 한다.&lt;br&gt;
여담으로 해당 문서를 작성하면서 최대한 Oracle과 같은 회사에서 올린 공식적인 문서를 참고하고자 노력했는데, &lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se8/html/&#34;&gt;JVM 구현을 위한 스펙 문서&lt;/a&gt;는 발견할 수 있었으나 총체적인 구조에 대한 정보는 없는 것 같아 GeeksforGeeks, Freecodecamp와 같은 학습 사이트도 참고하여 작성하였다.&lt;/p&gt;
&lt;h1 id=&#34;jvm&#34; &gt;JVM
&lt;span&gt;
    &lt;a href=&#34;#jvm&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;h2 id=&#34;jvm이란&#34; &gt;JVM이란?
&lt;span&gt;
    &lt;a href=&#34;#jvm%ec%9d%b4%eb%9e%80&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;JVM(Java Virtual Machine, 자바 가상 머신)&lt;/code&gt;&lt;/strong&gt; 은 Java Application을 실행하는 &lt;strong&gt;런타임 엔진&lt;/strong&gt; 역할을 하는 컴포넌트로, JRE(Java Runtime Environment)의 일부입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-1.html#jvms-1.2&#34;&gt;Java SE8 사양 문서의 설명&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java Platform의 주춧돌 역할을 하는 컴포넌트로 하드웨어 및 운영체제 독립성, 컴파일된 코드의 작은 크기, 악의적인 프로그램으로부터의 사용자 보호를 담당합니다.&lt;br&gt;
JVM은 실제 컴퓨터처럼 &lt;mark style=&#34;background: #FFB86CA6;&#34;&gt;추상적인 연산 기계&lt;/mark&gt;입니다. 따라서 &lt;strong&gt;명령어 셋&lt;/strong&gt;을 가지고 있고, 런타임에 &lt;strong&gt;다양한 메모리 영역을 조작&lt;/strong&gt;합니다.&lt;br&gt;
이러한 형태는 가상 머신을 쓰는 프로그래밍 언어를 구현하는데 있어 일반적인 형태로, JVM 이외에도 &lt;code&gt;P-Code(UCSD Pascal)&lt;/code&gt;, &lt;code&gt;Squeak(Smalltalk)&lt;/code&gt; 등이 있습니다.&lt;br&gt;
JVM의 첫 프로토타입은 썬-마이크로시스템에서 구현되었으며, PDA와 유사한 장비상에 호스팅되는 소프트웨어 안의 JVM 명령어 셋을 에뮬레이트 했습니다.&lt;br&gt;
Oracle의 현재 구현은 JVM을 모바일, 데스크톱 및 서버장치상에서 에뮬레이트 하지만, JVM은 특정 구현 기술, 종속 하드웨어, 종속 운영체제를 가정하지 않습니다. 이는 선천적으로 해석(interpret)되지 않지만, JVM의 명령어 셋을 실리콘 CPU의 명령어 셋으로 컴파일링하므로써 구현할 수 있습니다.&lt;br&gt;
유효한 클래스 파일로 표현될 수 있는 기능성(&lt;strong&gt;functionality&lt;/strong&gt;)을 갖춘 모든 언어는 JVM에 의해 호스팅 될 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;jvm의-구조-httpswwwgeeksforgeeksorgjvm-works-jvm-architecture&#34; &gt;JVM의 구조 &lt;a href=&#34;https://www.geeksforgeeks.org/jvm-works-jvm-architecture/&#34;&gt;#&lt;/a&gt;
&lt;span&gt;
    &lt;a href=&#34;#jvm%ec%9d%98-%ea%b5%ac%ec%a1%b0-httpswwwgeeksforgeeksorgjvm-works-jvm-architecture&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;architecture_of_jvm.png&#34; alt=&#34;architecture_of_jvm&#34;&gt;
JVM의 구조는 위 그림과 같습니다.&lt;br&gt;
크게 &lt;strong&gt;&lt;code&gt;클래스 로더&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;메모리 영역&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;실행 엔진&lt;/code&gt;&lt;/strong&gt; 등으로 구성되어 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;클래스-로더class-loader&#34; &gt;클래스 로더(Class Loader)
&lt;span&gt;
    &lt;a href=&#34;#%ed%81%b4%eb%9e%98%ec%8a%a4-%eb%a1%9c%eb%8d%94class-loader&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;클래스 로더는 클래스 파일을 로드하는데 사용되는 JVM의 하위 시스템입니다. &lt;code&gt;로딩(Loading)&lt;/code&gt;, &lt;code&gt;링킹(Linking)&lt;/code&gt;, &lt;code&gt;초기화(Initialization)&lt;/code&gt; 세 가지 동작을 담당합니다.&lt;/p&gt;
&lt;h4 id=&#34;로딩loading&#34; &gt;로딩(Loading)
&lt;span&gt;
    &lt;a href=&#34;#%eb%a1%9c%eb%94%a9loading&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;클래스 로더가 &lt;code&gt;.class&lt;/code&gt; 파일을 읽고, 대응되는 binary data를 생성해 JVM 메모리내의 &lt;code&gt;메서드 영역&lt;/code&gt;에 &lt;strong&gt;저장&lt;/strong&gt;합니다.&lt;br&gt;
불러온 class와 해당 class의 바로 위 부모 클래스의 &lt;strong&gt;정규화된 이름&lt;/strong&gt;, &lt;code&gt;.class&lt;/code&gt; 파일이 클래스/인터페이스/Enum 중 어느것과 관련 있는지, &lt;strong&gt;접근 제어자&lt;/strong&gt;, &lt;strong&gt;변수 및 메서드 정보&lt;/strong&gt; 등 을 저장합니다.&lt;br&gt;
&lt;code&gt;.class&lt;/code&gt; 파일을 불러온 뒤, JVM은 Heap 메모리에 해당 파일을 표현하기 위해 &lt;strong&gt;&lt;code&gt;Class(java.lang)&lt;/code&gt;&lt;/strong&gt; 타입의 객체를 생성합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발자는 해당 클래스를 통해 &lt;em&gt;클래스의 이름, 부모 클래스의 이름, 변수 및 메서드 정보 등&lt;/em&gt;을 얻을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;링킹linking&#34; &gt;링킹(Linking)
&lt;span&gt;
    &lt;a href=&#34;#%eb%a7%81%ed%82%b9linking&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;검증(Verification)&lt;/code&gt;, &lt;code&gt;준비(Preparation)&lt;/code&gt;, &lt;code&gt;해결(Resolution)&lt;/code&gt; 작업을 수행합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;검증(Verification)&lt;/code&gt;: &lt;code&gt;ByteCodeVerifier&lt;/code&gt;에 의해 &lt;code&gt;.class&lt;/code&gt; 파일이 올바른 컴파일러에 의해 적절하게 포맷되고 생성되었는지 &lt;strong&gt;확인&lt;/strong&gt;합니다.&lt;br&gt;
만약 실패한다면 &lt;code&gt;java.lang.VerifyError&lt;/code&gt; 라는 런타임 예외가 발생하게 됩니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;준비(Preparation)&lt;/code&gt;: 클래스 정적 변수(class static variable)에 대한 메모리를 할당하고, 메모리를 기본값으로 초기화합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;해결(Resolution)&lt;/code&gt;: 객체를 이름으로 참조(&lt;strong&gt;&lt;code&gt;Symbolic References&lt;/code&gt;&lt;/strong&gt;)하는 것을 직접 주소 값을 참조하도록 대체합니다.&lt;br&gt;
이 과정에서 이름으로 참조된 객체를 찾기 위해 JVM 메모리 내 &lt;code&gt;메서드 영역&lt;/code&gt;을 검색합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;클래스-로더의-종류&#34; &gt;클래스 로더의 종류
&lt;span&gt;
    &lt;a href=&#34;#%ed%81%b4%eb%9e%98%ec%8a%a4-%eb%a1%9c%eb%8d%94%ec%9d%98-%ec%a2%85%eb%a5%98&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;클래스 로더는 3가지 종류가 있고, 각 클래스 로더들은 JVM의 &lt;strong&gt;&lt;code&gt;위임-계층 원칙(Delegation-Hierarchy Principle)&lt;/code&gt;&lt;/strong&gt; 을 따릅니다.&lt;br&gt;
따라서, (클래스 로딩 요청) -&amp;gt; 시스템 -&amp;gt; 확장 -&amp;gt; 부트스트랩 순으로 클래스 로딩 요청을 위임하게 됩니다.&lt;br&gt;
부트스트랩 경로에서 클래스가 발견되지 않으면 확장 클래스 로더에게 요청을 전송하고, 확장 클래스 로더도 찾지 못하면 시스템 클래스 로더에게 전송됩니다. 시스템 클래스 로더도 발견하지 못하면 런타임 에러(&lt;code&gt;java.lang.ClassNotFoundException&lt;/code&gt;) 가 발생합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;부트스트랩 클래스 로더(Bootstrap class loader)&lt;/code&gt;: &lt;code&gt;%JAVA_HOME%/jre/lib&lt;/code&gt;에 존재하는 &lt;strong&gt;코어 Java API 클래스&lt;/strong&gt;들을 불러옵니다. C/C++과 같은 네이티브 언어로 구현됩니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;확장 클래스 로더(Extension class loader)&lt;/code&gt;: &lt;code&gt;부트스트랩 클래스 로더&lt;/code&gt;의 자식으로, &lt;code&gt;%JAVA_HOME%/jre/lib/ext&lt;/code&gt; 또는 &lt;code&gt;java.ext.dirs&lt;/code&gt;  속성에 의해 정의된 디렉토리에 존재하는 클래스들을 불러옵니다. Java의 &lt;code&gt;sun.misc.Launcher$ExtClassLoader&lt;/code&gt; 클래스로 구현됩니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;시스템 클래스 로더(System/Application class loader)&lt;/code&gt;: &lt;code&gt;확장 클래스 로더&lt;/code&gt;의 자식으로, 애플리케이션 &lt;code&gt;classpath&lt;/code&gt;(&lt;em&gt;내부적으로 &lt;code&gt;java.class.path&lt;/code&gt;에 매핑된 환경 변수 사용&lt;/em&gt;)에 존재하는 클래스들을 불러옵니다. Java의 &lt;code&gt;sun.misc.Launcher$AppClassLoader&lt;/code&gt;클래스로 구현됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;초기화initialization&#34; &gt;초기화(Initialization)
&lt;span&gt;
    &lt;a href=&#34;#%ec%b4%88%ea%b8%b0%ed%99%94initialization&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;&lt;em&gt;부모 클래스에서 자식 클래스로&lt;/em&gt;, &lt;em&gt;클래스 내에서는 위에서 아래로&lt;/em&gt; 진행하며 &lt;strong&gt;모든 정적 변수(static variable)들&lt;/strong&gt;을 코드 및 정적 블럭에 정의된 값으로 할당합니다.&lt;/p&gt;
&lt;h3 id=&#34;jvm-메모리-영역jvm-memory-runtime-data-area&#34; &gt;JVM 메모리 영역(JVM Memory, Runtime Data Area)
&lt;span&gt;
    &lt;a href=&#34;#jvm-%eb%a9%94%eb%aa%a8%eb%a6%ac-%ec%98%81%ec%97%adjvm-memory-runtime-data-area&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;메서드 영역(Method Area)&lt;/code&gt;, &lt;code&gt;힙 영역(Heap Area)&lt;/code&gt;, &lt;code&gt;스택 영역(Stack Area)&lt;/code&gt;, &lt;code&gt;PC 레지스터(PC Registers)&lt;/code&gt;, &lt;code&gt;네이티브 메서드 스택(Native Method Stacks)&lt;/code&gt;으로 구성되어 있습니다.&lt;/p&gt;
&lt;h4 id=&#34;공유-자원&#34; &gt;공유 자원
&lt;span&gt;
    &lt;a href=&#34;#%ea%b3%b5%ec%9c%a0-%ec%9e%90%ec%9b%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;메서드 영역(Method Area)&lt;/code&gt;: &lt;em&gt;클래스 이름, 직속 부모 클래스 이름, 메서드 및 변수&lt;/em&gt;(&lt;em&gt;정적 변수 포함&lt;/em&gt;)와 같은 모든 &lt;code&gt;&lt;strong&gt;클래스 레벨 정보&lt;/strong&gt;&lt;/code&gt;들이 저장됩니다. JVM 당 하나만 존재하며, 공유됩니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;힙 영역(Heap Area)&lt;/code&gt;: 모든 &lt;code&gt;동적으로 생성된 객체(즉, 인스턴스)의 정보&lt;/code&gt;가 저장되어 있습니다. JVM 당 하나만 존재하며, 공유됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;개별-자원&#34; &gt;개별 자원
&lt;span&gt;
    &lt;a href=&#34;#%ea%b0%9c%eb%b3%84-%ec%9e%90%ec%9b%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;스택 영역(Stack Area)&lt;/code&gt;: JVM이 각 스레드마다 사용할 런타임 스택을 생성하는 공간입니다. 런타임 스택의 모든 블록은 &lt;code&gt;활성화 레코드(Activation Record)&lt;/code&gt; 또는 &lt;code&gt;스택 프레임(Stack Frame)&lt;/code&gt;이라고 부르는 &lt;code&gt;&lt;strong&gt;메서드 호출&lt;/strong&gt;&lt;/code&gt;을 저장하는 블록입니다.&lt;br&gt;
프레임에는 해당 &lt;code&gt;&lt;strong&gt;메서드에서 사용되는 모든 로컬 변수&lt;/strong&gt;&lt;/code&gt;가 저장됩니다. 런타임 스택을 사용하던 스레드가 종료되면 JVM에 의해 스택이 파괴됩니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PC 레지스터(PC Registers)&lt;/code&gt;: 각 스레드 별로 존재하며, &lt;code&gt;&lt;strong&gt;스레드의 현재 실행 명령의 주소&lt;/strong&gt;&lt;/code&gt;를 저장합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;네이티브 메서드 스택(Native Method Stacks)&lt;/code&gt;: 각 스레드 별로 존재하며, &lt;code&gt;&lt;strong&gt;네이티브 메서드 정보&lt;/strong&gt;&lt;/code&gt;를 저장합니다. 만약 네이티브 메서드를 호출할 때 매개변수를 넘겼다면 해당 매개변수를 저장합니다.
네이티브 메서드가 실행되면 스레드는 자바 스택에서 네이티브 메서드 스택으로 전환합니다.&lt;br&gt;
&lt;img src=&#34;switch_native_method_stacks.png&#34; alt=&#34;switch_native_method_stacks.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;실행-엔진execution-engine&#34; &gt;실행 엔진(Execution Engine)
&lt;span&gt;
    &lt;a href=&#34;#%ec%8b%a4%ed%96%89-%ec%97%94%ec%a7%84execution-engine&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;바이트 코드로 변환된 &lt;code&gt;.class&lt;/code&gt; 파일을 한 줄씩 읽고 메모리 영역에 존재하는 데이터와 정보를 이용해 명령어를 실행합니다.&lt;br&gt;
&lt;code&gt;인터프리터(Interpreter)&lt;/code&gt;, &lt;code&gt;JIT 컴파일러(Just-In-Time Compiler)&lt;/code&gt;, &lt;code&gt;가비지 컬렉터(Garbage Collector)&lt;/code&gt; 로 구성되어 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;인터프리터(Interpreter)&lt;/code&gt;: 바이트 코드를 한 줄씩 해석하고 실행합니다. 인터프리터이기 때문에 한 메서드가 여러 번 호출될 떄 마다 매번 코드를 다시 해석합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JIT 컴파일러(Just-In-Time Compiler)&lt;/code&gt;: 인터프리터의 효율을 높이기 위해, 반복되는 메서드 호출에 대해 런타임에 바이트 코드를 컴파일해 네이티브 코드로 바꾼 뒤 직접 네이티브 코드를 제공합니다.&lt;br&gt;
따라서 한 메서드를 여러 번 해석하지 않아 효율성이 향상됩니다.&lt;br&gt;
JVM이 내부적으로 함수가 호출될 때 마다 호출 횟수를 카운트하다가, 임계점 이상 호출되는 경우 JIT 컴파일러를 통한 컴파일이 진행됩니다. &lt;a href=&#34;https://www.ibm.com/docs/en/sdk-java-technology/8?topic=reference-jit-compiler&#34;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;가비지 컬렉터(Garbage Collector)&lt;/code&gt;: 더 이상 참조되지 않는 객체들을 파괴합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;자바-네이티브-인터페이스java-native-interface-jni&#34; &gt;자바 네이티브 인터페이스(Java Native Interface, JNI)
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%90%eb%b0%94-%eb%84%a4%ec%9d%b4%ed%8b%b0%eb%b8%8c-%ec%9d%b8%ed%84%b0%ed%8e%98%ec%9d%b4%ec%8a%a4java-native-interface-jni&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;네이티브 메서드 라이브러라와 상호작용하고, 실행에 필요한 네이티브 라이브러리(C/C++)를 제공하는 인터페이스 입니다.&lt;br&gt;
JVM이 C/C++ 라이브러리를 호출하거나, 특정 하드웨어에서는 C/C++ 라이브러리에 의해 호출될 수 있도록 해줍니다.&lt;/p&gt;
&lt;h3 id=&#34;네이티브-메서드-라이브러리native-method-libraries&#34; &gt;네이티브 메서드 라이브러리(Native Method Libraries)
&lt;span&gt;
    &lt;a href=&#34;#%eb%84%a4%ec%9d%b4%ed%8b%b0%eb%b8%8c-%eb%a9%94%ec%84%9c%eb%93%9c-%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9f%ac%eb%a6%acnative-method-libraries&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;실행 엔진에 필요한 네이티브 라이브러리(C/C++)의 집합입니다.&lt;/p&gt;
&lt;h2 id=&#34;jvm의-기능&#34; &gt;JVM의 기능
&lt;span&gt;
    &lt;a href=&#34;#jvm%ec%9d%98-%ea%b8%b0%eb%8a%a5&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;바이트 코드를 포함하고 있는 .class 형태의 파일를 읽고, 검증한 뒤 실행합니다. 또한 해당 코드가 동작할 수 있는 런타임 환경을 제공합니다.&lt;/p&gt;
&lt;h2 id=&#34;jvm-위에선-java만-동작할-수-있나&#34; &gt;JVM 위에선 Java만 동작할 수 있나?
&lt;span&gt;
    &lt;a href=&#34;#jvm-%ec%9c%84%ec%97%90%ec%84%a0-java%eb%a7%8c-%eb%8f%99%ec%9e%91%ed%95%a0-%ec%88%98-%ec%9e%88%eb%82%98&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;자바 이외에도 &lt;code&gt;Scala&lt;/code&gt;, &lt;code&gt;Kotlin&lt;/code&gt;, &lt;code&gt;Groovy&lt;/code&gt;, &lt;code&gt;Clojure&lt;/code&gt; 등 다른 언어들을 실행할 수 있습니다.&lt;br&gt;
JVM에 의해 호스팅 될 수 있는 유효한 class 파일로 표현할 수 있는 &lt;code&gt;기능(Functionality)&lt;/code&gt;를 가진 언어라면 JVM 상에서 실행될 수 있습니다.&lt;br&gt;
또한 이들은 호환 가능한데, Scala의 라이브러리를 Java 프로그램에서 사용할 수 있는것이 그 예 입니다. &lt;a href=&#34;https://en.wikipedia.org/wiki/Java_virtual_machine#JVM_languages&#34;&gt;#위키피디아 문서의 설명&lt;/a&gt; &lt;a href=&#34;https://pinnsg.com/using-java-libraries-scala/&#34;&gt;#Scala에서 Java 라이브러리 사용하기&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;jvm-계열-언어를-기계어로-컴파일해서-쓸-순-없나&#34; &gt;JVM 계열 언어를 기계어로 컴파일해서 쓸 순 없나?
&lt;span&gt;
    &lt;a href=&#34;#jvm-%ea%b3%84%ec%97%b4-%ec%96%b8%ec%96%b4%eb%a5%bc-%ea%b8%b0%ea%b3%84%ec%96%b4%eb%a1%9c-%ec%bb%b4%ed%8c%8c%ec%9d%bc%ed%95%b4%ec%84%9c-%ec%93%b8-%ec%88%9c-%ec%97%86%eb%82%98&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;가능&lt;/strong&gt;은 합니다. Java의 경우 GNU Project에서 만든 &lt;a href=&#34;https://en.wikipedia.org/wiki/GNU_Compiler_Collection&#34;&gt;GCC(GNU Compiler Collection)&lt;/a&gt;의 Java 컴파일러를 이용하면 네이티브 기계어로 컴파일해 사용할 수 있습니다.&lt;br&gt;
하지만 가비지 콜렉터와 같은 런타임 지원을 받을 수 없기 때문에 정확하게 동작하지 않을 수 있습니다. &lt;a href=&#34;https://www.quora.com/Can-a-Java-program-run-without-JVM&#34;&gt;#&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;jvm을-사용함으로써-얻을-수-있는-장단점&#34; &gt;JVM을 사용함으로써 얻을 수 있는 장/단점
&lt;span&gt;
    &lt;a href=&#34;#jvm%ec%9d%84-%ec%82%ac%ec%9a%a9%ed%95%a8%ec%9c%bc%eb%a1%9c%ec%8d%a8-%ec%96%bb%ec%9d%84-%ec%88%98-%ec%9e%88%eb%8a%94-%ec%9e%a5%eb%8b%a8%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;장점&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;하드웨어-및-운영체제-독립성&#34; &gt;하드웨어 및 운영체제 독립성
&lt;span&gt;
    &lt;a href=&#34;#%ed%95%98%eb%93%9c%ec%9b%a8%ec%96%b4-%eb%b0%8f-%ec%9a%b4%ec%98%81%ec%b2%b4%ec%a0%9c-%eb%8f%85%eb%a6%bd%ec%84%b1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;C/C++과 같은 언어로 작성된 프로그램은&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU마다 기계어가 다르고,&lt;/li&gt;
&lt;li&gt;운영체제마다 API와 실행파일 형식이 다르기 때문에&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;프로그램이 개발된 환경과 다른 환경에서 실행하려하면 실행되지 않습니다.&lt;br&gt;
반면 Java의 경우 JVM을 이용해 동일한 자바 실행 환경을 제공하므로 WORA(Write Once Run Anywhere), 즉 한 번 프로그램을 작성하기만 하면 어느 환경에서든 실행 할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다만 JVM 자체는 플랫폼에 종속적이므로 각 플랫폼마다 작성됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;자동-메모리-관리&#34; &gt;자동 메모리 관리
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%90%eb%8f%99-%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b4%80%eb%a6%ac&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;JVM 내부의 가비지 컬렉터가 계속해서 참조되지 않는 객체를 인식하고 파괴해 메모리 공간을 확보해줍니다.   따라서 개발자는 메모리 할당/할당 해제를 위해 별다른 작업을 수행하지 않아도 되고, 실수로 메모리 누수가 일어나거나 &lt;code&gt;댕글링 포인터&lt;/code&gt;, &lt;code&gt;더블 프리&lt;/code&gt;와 같은 메모리 관련 오류를 줄일 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;댕글링 포인터(Dangling Pointer)&lt;/code&gt;: 포인터가 참조중인 객체가 포인터의 수정 없이 삭제, 또는 할당 해제되어 포인터가 계속 할당해제된 메모리를 가리키는 메모리 보안 위반 현상입니다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/cpp/sanitizers/error-double-free?view=msvc-170&#34;&gt;&lt;code&gt;더블 프리(Double Free)&lt;/code&gt;&lt;/a&gt;: 동일한 heap 메모리 공간에 대해 free(메모리 해제)를 두 번 시도해 발생하는 취약점입니다.&lt;br&gt;
같은 인수로 free 함수를 두 번 호출할 경우, 메모리 관련 데이터 구조가 손상되어 프로그램이 중단되거나, 이후 두 번의 &lt;code&gt;malloc()&lt;/code&gt; 명령에 대해 똑같은 포인터를 반환 할 수 있습니다. 이는 프로그램을 버퍼 오버 플로 공격에 취약하게 만듭니다. &lt;a href=&#34;https://cwe.mitre.org/data/definitions/415.html&#34;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;코드-가독성-및-유지보수성-향상&#34; &gt;코드 가독성 및 유지보수성 향상
&lt;span&gt;
    &lt;a href=&#34;#%ec%bd%94%eb%93%9c-%ea%b0%80%eb%8f%85%ec%84%b1-%eb%b0%8f-%ec%9c%a0%ec%a7%80%eb%b3%b4%ec%88%98%ec%84%b1-%ed%96%a5%ec%83%81&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;개발자가 로우-레벨 메모리 세부 사항에 대해 신경 쓸 필요가 없기 때문에 코드 가독성과 유지보수성이 향상됩니다.&lt;/p&gt;
&lt;h3 id=&#34;단점&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;성능&#34; &gt;성능
&lt;span&gt;
    &lt;a href=&#34;#%ec%84%b1%eb%8a%a5&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Java의 &lt;em&gt;하드웨어 및 운영체제 독립성에 의해&lt;/em&gt;, 바이트 코드를 특정 하드웨어나 시스템에 맞게 최적화시킬 수 없습니다.&lt;br&gt;
또한 클래스에서 바이트 코드로, 바이트 코드에서 기계 코드로 &lt;strong&gt;두 번 변환하는 과정&lt;/strong&gt;을 거쳐야 하기 때문에 C/C++과 같은 언어에 비해 느릴 수 밖에 없습니다.&lt;br&gt;
또한 계속해서 객체 생성/삭제를 추적하고, 사용하지 않는 메모리를 회수하기 위해 &lt;strong&gt;가비지 컬렉터를 주기적으로 수행&lt;/strong&gt;해 &lt;strong&gt;오버헤드가 발생&lt;/strong&gt;합니다.&lt;br&gt;
또한 GC 과정에서 자바 애플리케이션의 스레드가 멈출 수 있어 해당 어플리케이션의 응답 및 대기 시간에 영향을 미칠 수 있습니다.&lt;/p&gt;
&lt;h4 id=&#34;jvm-자체&#34; &gt;JVM 자체
&lt;span&gt;
    &lt;a href=&#34;#jvm-%ec%9e%90%ec%b2%b4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Java 프로그램이 JVM 자체에 의존하기 때문에, 희박한 확률이지만 JVM 자체가 오작동을 일으켜 에러가 발생할 수도 있습니다.&lt;/p&gt;
&lt;h4 id=&#34;메모리-관리&#34; &gt;메모리 관리
&lt;span&gt;
    &lt;a href=&#34;#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b4%80%eb%a6%ac&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;JVM에서 메모리 할당 밎 관리를 수행하기 때문에, 수동으로 메모리 할당/할당 해제를 할 수 없습니다.&lt;/p&gt;
&lt;h2 id=&#34;jvm과-그-위에서-실행되는-프로그램은-부모-자식-관계인가&#34; &gt;JVM과 그 위에서 실행되는 프로그램은 부모-자식 관계인가?
&lt;span&gt;
    &lt;a href=&#34;#jvm%ea%b3%bc-%ea%b7%b8-%ec%9c%84%ec%97%90%ec%84%9c-%ec%8b%a4%ed%96%89%eb%90%98%eb%8a%94-%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%a8%ec%9d%80-%eb%b6%80%eb%aa%a8-%ec%9e%90%ec%8b%9d-%ea%b4%80%ea%b3%84%ec%9d%b8%ea%b0%80&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;JVM과 그 위에 실행되는 프로그램은 부모 - 자식 관계를 갖는다고 보기 &lt;strong&gt;힘듭니다&lt;/strong&gt;. &lt;strong&gt;JVM에서 관리하는 스레드를 통해 동작&lt;/strong&gt;한다고 봐야 합니다.&lt;br&gt;
JVM은 Java Application 코드를 실행하기 위해 &lt;em&gt;&lt;code&gt;main()&lt;/code&gt; 메서드를 실행하는 스레드를 포함해&lt;/em&gt; 하나 이상의 &lt;strong&gt;스레드를 관리&lt;/strong&gt;합니다.&lt;br&gt;
또한 자식 프로세스가 부모로 부터 완전히 독립적인 &amp;lsquo;부모 - 자식 프로세스&amp;rsquo; 관계와 달리, Java Application은 JVM과 긴밀하고 JVM으로부터 메모리 할당, GC 등의 지원을 받습니다.
따라서 프로세스 - 스레드 관계에 있다고 봐야합니다.&lt;/p&gt;
&lt;h1 id=&#34;참고-문서&#34; &gt;참고 문서
&lt;span&gt;
    &lt;a href=&#34;#%ec%b0%b8%ea%b3%a0-%eb%ac%b8%ec%84%9c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.artima.com/insidejvm/ed2/jvm.html&#34;&gt;The Java Virtual Machine by Bill Venners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/jvm-works-jvm-architecture/&#34;&gt;How JVM Works – JVM Architecture? - GeeksForGeeks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Java_virtual_machine&#34;&gt;Java virtual machine - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se8/html/&#34;&gt;The Java® Virtual Machine Specification Java SE 8 Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>빌더 패턴</title>
      <link>https://cloudsoswift.github.io/post/develop/java/builder-pattern/</link>
      <pubDate>Thu, 26 Oct 2023 02:22:40 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/develop/java/builder-pattern/</guid>
      <description>&lt;p&gt;디자인 패턴에서의 빌더 패턴과, Java에서의 빌더 패턴에 대해 알아보고자 한다.&lt;/p&gt;
&lt;h2 id=&#34;디자인-패턴에서의-빌더-패턴&#34; &gt;디자인 패턴에서의 빌더 패턴
&lt;span&gt;
    &lt;a href=&#34;#%eb%94%94%ec%9e%90%ec%9d%b8-%ed%8c%a8%ed%84%b4%ec%97%90%ec%84%9c%ec%9d%98-%eb%b9%8c%eb%8d%94-%ed%8c%a8%ed%84%b4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;빌더 패턴은 복잡한 객체의 &amp;lsquo;구성&amp;rsquo;과 &amp;lsquo;표현&amp;rsquo;을 분리하여, 동일한 생성 절차가 다른 표현을 생성할 수 있도록 하는 패턴이다.&lt;br&gt;
한 마디로, 복잡한 객체의 생성을 단계적이고, 관리 가능하며, 상호 교환 가능한 작업들로 분해하는 것이다.&lt;/p&gt;
&lt;h3 id=&#34;구성-요소&#34; &gt;구성 요소
&lt;span&gt;
    &lt;a href=&#34;#%ea%b5%ac%ec%84%b1-%ec%9a%94%ec%86%8c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;디렉터director&#34; &gt;디렉터(Director)
&lt;span&gt;
    &lt;a href=&#34;#%eb%94%94%eb%a0%89%ed%84%b0director&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;빌더 인터페이스를 사용해 객체의 생성을 조절하는 요소. 객체 생성의 순서를 명시함.&lt;/p&gt;
&lt;h4 id=&#34;빌더-인터페이스builder-interface&#34; &gt;빌더 인터페이스(Builder Interface)
&lt;span&gt;
    &lt;a href=&#34;#%eb%b9%8c%eb%8d%94-%ec%9d%b8%ed%84%b0%ed%8e%98%ec%9d%b4%ec%8a%a4builder-interface&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;생성 단계에 대해 개략적으로 설명하는 요소.&lt;/p&gt;
&lt;h4 id=&#34;콘크리트-빌더concrete-builder&#34; &gt;콘크리트 빌더(Concrete Builder)
&lt;span&gt;
    &lt;a href=&#34;#%ec%bd%98%ed%81%ac%eb%a6%ac%ed%8a%b8-%eb%b9%8c%eb%8d%94concrete-builder&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;빌더 인터페이스를 구현하여, 각 생성 단계별 세부 사항을 제공하며 조합을 관리함.&lt;/p&gt;
&lt;h4 id=&#34;프로덕트product&#34; &gt;프로덕트(Product)
&lt;span&gt;
    &lt;a href=&#34;#%ed%94%84%eb%a1%9c%eb%8d%95%ed%8a%b8product&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;생성 중인 복잡한 객체. 일반적으로 시스템은 디렉터와 프로덕트와만 접촉하고, 콘크리트 빌더의 존재는 알지못함.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gofpattern.com/creational/patterns/builder-pattern.php&#34;&gt;Builder Pattern (Seperate construction of complex object : GofPatterns(gofpattern.com))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Builder_pattern&#34;&gt;Builder pattern - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java에서의-빌더-패턴&#34; &gt;Java에서의 빌더 패턴
&lt;span&gt;
    &lt;a href=&#34;#java%ec%97%90%ec%84%9c%ec%9d%98-%eb%b9%8c%eb%8d%94-%ed%8c%a8%ed%84%b4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;점층적 생성자 패턴&lt;/code&gt;의 &lt;strong&gt;안정성&lt;/strong&gt;과 &lt;code&gt;자바빈즈 패턴&lt;/code&gt;의 &lt;strong&gt;가독성&lt;/strong&gt;을 겸비한 패턴.&lt;br&gt;
빌더 클래스는 보통 생성할 클래스 안에 정적 멤버 클래스로 만들어 두며, 이러한 빌드 패턴은 &lt;code&gt;명명된 선택적 매개변수(Named Optional Parameters)&lt;/code&gt;를 흉내낸 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;명명된 선택적 매개변수(Named Optional Parameters)&lt;/code&gt; : &lt;code&gt;위치 매개변수(Positional Parameters)&lt;/code&gt; 와 달리 값이 전달 될 때, &lt;strong&gt;이름도 함께 전달&lt;/strong&gt;되어야 하는 매개변수.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;사용하게-된-배경&#34; &gt;사용하게 된 배경
&lt;span&gt;
    &lt;a href=&#34;#%ec%82%ac%ec%9a%a9%ed%95%98%ea%b2%8c-%eb%90%9c-%eb%b0%b0%ea%b2%bd&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;../static-factory-method/&#34;&gt;정적 팩토리 메서드&lt;/a&gt;와 &lt;code&gt;public 생성자&lt;/code&gt;의 공통적인 단점인 &amp;lsquo;선택적 매개변수(Optional Parameter)&amp;lsquo;가 많은 경우 적절한 대응이 힘들다는 점을 대처하기 위해 여러 패턴이 만들어지게 되었다.&lt;/p&gt;
&lt;h4 id=&#34;점층적-생성자-패턴telescoping-constructor-pattern&#34; &gt;점층적 생성자 패턴(Telescoping Constructor Pattern)
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%90%ec%b8%b5%ec%a0%81-%ec%83%9d%ec%84%b1%ec%9e%90-%ed%8c%a8%ed%84%b4telescoping-constructor-pattern&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;필수 매개변수만 받는 생성자, 필수 매개변수와 선택 매개변수 1개를 받는 생성자, &amp;hellip; 형태로 선택 매개변수를 모두 받는 생성자까지 모든 경우의 수를 충족하는 방식이다.&lt;/p&gt;
&lt;h5 id=&#34;단점&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;h6 id=&#34;1-사용자가-설정하기-원치않는-매개변수까지-포함하기-쉽다&#34; &gt;1. 사용자가 설정하기 원치않는 매개변수까지 포함하기 쉽다.
&lt;span&gt;
    &lt;a href=&#34;#1-%ec%82%ac%ec%9a%a9%ec%9e%90%ea%b0%80-%ec%84%a4%ec%a0%95%ed%95%98%ea%b8%b0-%ec%9b%90%ec%b9%98%ec%95%8a%eb%8a%94-%eb%a7%a4%ea%b0%9c%eb%b3%80%ec%88%98%ea%b9%8c%ec%a7%80-%ed%8f%ac%ed%95%a8%ed%95%98%ea%b8%b0-%ec%89%bd%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;h6 id=&#34;2-매개변수-개수가-많아지면-코드를-작성읽는게-힘들다&#34; &gt;2. 매개변수 개수가 많아지면, 코드를 작성/읽는게 힘들다.
&lt;span&gt;
    &lt;a href=&#34;#2-%eb%a7%a4%ea%b0%9c%eb%b3%80%ec%88%98-%ea%b0%9c%ec%88%98%ea%b0%80-%eb%a7%8e%ec%95%84%ec%a7%80%eb%a9%b4-%ec%bd%94%eb%93%9c%eb%a5%bc-%ec%9e%91%ec%84%b1%ec%9d%bd%eb%8a%94%ea%b2%8c-%ed%9e%98%eb%93%a4%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;p&gt;코드를 읽을 때, 각 값이 무엇을 의미하는지, 몇 개인지 파악하기 힘들고 실수로 순서가 바뀌면 런타임에 에러가 발생할 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;자바빈즈-패턴javabeans-pattern&#34; &gt;자바빈즈 패턴(JavaBeans Pattern)
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%90%eb%b0%94%eb%b9%88%ec%a6%88-%ed%8c%a8%ed%84%b4javabeans-pattern&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;매개변수가 없는 기본 생성자로 객체를 만든 뒤, setter 메서드를 호출해 원하는 필드의 값을 설정하는 방식이다.&lt;/p&gt;
&lt;h5 id=&#34;장점&#34; &gt;장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%9e%a5%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;h6 id=&#34;1-인스턴스를-만들기-쉽고-가독성도-좋다&#34; &gt;1. 인스턴스를 만들기 쉽고, 가독성도 좋다.
&lt;span&gt;
    &lt;a href=&#34;#1-%ec%9d%b8%ec%8a%a4%ed%84%b4%ec%8a%a4%eb%a5%bc-%eb%a7%8c%eb%93%a4%ea%b8%b0-%ec%89%bd%ea%b3%a0-%ea%b0%80%eb%8f%85%ec%84%b1%eb%8f%84-%ec%a2%8b%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;h5 id=&#34;단점-1&#34; &gt;단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%8b%a8%ec%a0%90-1&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;h6 id=&#34;1-객체-하나를-만들기-위해-여러-메서드-호출이-필요하다&#34; &gt;1. 객체 하나를 만들기 위해 여러 메서드 호출이 필요하다.
&lt;span&gt;
    &lt;a href=&#34;#1-%ea%b0%9d%ec%b2%b4-%ed%95%98%eb%82%98%eb%a5%bc-%eb%a7%8c%eb%93%a4%ea%b8%b0-%ec%9c%84%ed%95%b4-%ec%97%ac%eb%9f%ac-%eb%a9%94%ec%84%9c%eb%93%9c-%ed%98%b8%ec%b6%9c%ec%9d%b4-%ed%95%84%ec%9a%94%ed%95%98%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;h6 id=&#34;2-객체가-완전히-생성되기-전에는-일관성이-무너진-상태에-놓이게-된다&#34; &gt;2. 객체가 완전히 생성되기 전에는 일관성이 무너진 상태에 놓이게 된다.
&lt;span&gt;
    &lt;a href=&#34;#2-%ea%b0%9d%ec%b2%b4%ea%b0%80-%ec%99%84%ec%a0%84%ed%9e%88-%ec%83%9d%ec%84%b1%eb%90%98%ea%b8%b0-%ec%a0%84%ec%97%90%eb%8a%94-%ec%9d%bc%ea%b4%80%ec%84%b1%ec%9d%b4-%eb%ac%b4%eb%84%88%ec%a7%84-%ec%83%81%ed%83%9c%ec%97%90-%eb%86%93%ec%9d%b4%ea%b2%8c-%eb%90%9c%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h6&gt;&lt;p&gt;&lt;code&gt;점층적 생성자 패턴&lt;/code&gt;에서는 매개변수들의 유효 여부만 확인하면 일관성이 유지 되었지만, 자바빈즈 패턴에서는 그렇지 않음.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일관성 : 객체의 모든 프로퍼티들이 정상적으로 값들로 채워져 있는지 여부.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 특성 때문에 자바빈즈 패턴에서는 불변 클래스를 만들 수 없고, 스레드 안정성을 위한 추가 작업이 수반된다.&lt;/p&gt;
&lt;p&gt;이러한 단점을 보완하기 위해 객체를 freezing 하는 방법도 있지만, 개발자가 &lt;code&gt;freeze&lt;/code&gt;를 호출했는지를 컴파일러가 보증할 수 없어 런타임 오류에 취약하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체를 freeze하면, 속성 값을 수정하거나 삭제하는 것이 불가능해 진다. &lt;a href=&#34;https://ui.toast.com/posts/ko_20220420&#34;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;객체-생성과정&#34; &gt;객체 생성과정
&lt;span&gt;
    &lt;a href=&#34;#%ea%b0%9d%ec%b2%b4-%ec%83%9d%ec%84%b1%ea%b3%bc%ec%a0%95&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;필수 매개변수로 &lt;strong&gt;생성자&lt;/strong&gt;(&lt;em&gt;또는 정적 팩토리 메서드&lt;/em&gt;)를 호출해 빌더 객체를 얻는다.&lt;/li&gt;
&lt;li&gt;빌더 객체가 제공하는 setter 메서들로 원하는 선택 매개변수들을 설정한다.&lt;/li&gt;
&lt;li&gt;매개변수가 없는 &lt;code&gt;build&lt;/code&gt; 메서드를 호출해 (&lt;em&gt;웬만하면 불변인&lt;/em&gt;)객체를 얻는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;빌더의 setter 메서드들은 &lt;strong&gt;빌더 자신을 반환&lt;/strong&gt;해, 연쇄적으로 호출하는 플루언트API(&lt;em&gt;또는 메서드 연쇄&lt;/em&gt;)의 형태를 띈다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;플루언트 API(Fluent API)&lt;/code&gt; / &lt;code&gt;메서드 연쇄(Method Chaining)&lt;/code&gt; : 메서드 호출이 흐르듯 연결되는 형태. &lt;strong&gt;소스 코드의 가독성&lt;/strong&gt;을 &lt;em&gt;산문과 유사하게&lt;/em&gt; 만드는 것이 목적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;유효성-검사&#34; &gt;유효성 검사
&lt;span&gt;
    &lt;a href=&#34;#%ec%9c%a0%ed%9a%a8%ec%84%b1-%ea%b2%80%ec%82%ac&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;빌더 패턴을 사용할 땐 생성자 내에서, 그리고 &lt;code&gt;build&lt;/code&gt; 메서드 내에서도 유효성 검사가 필요하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;빌더 클래스는 생성할 클래스 내에 멤버 클래스로 존재하므로 클래스의 &lt;code&gt;private 생성자&lt;/code&gt;에 접근할 수 있고, &lt;code&gt;build&lt;/code&gt; 메서드는 보통 &lt;code&gt;private 생성자&lt;/code&gt;를 호출하므로 해당 &lt;code&gt;private 생성자&lt;/code&gt; 내에서 객체가 유효한 상태를 갖고 생성되는지 확인해야 한다.&lt;/li&gt;
&lt;li&gt;빌더는 필드 값들이 복사 될 때 변형될 수 있어, 빌더의 필드가 아닌 &lt;code&gt;defensive copy&lt;/code&gt;를 생성해 이 새로운 객체의 필드 값을 검증 해야한다. &lt;a href=&#34;https://stackoverflow.com/questions/38173274/builder-pattern-validation-effective-java&#34;&gt;#&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;방어적 복사(Defensive Copy)&lt;/code&gt;&lt;/strong&gt; : &lt;code&gt;가변적인 객체(Mutable Object)&lt;/code&gt;의 단점인 &lt;strong&gt;&lt;code&gt;검사시점/사용시점 공격(TOC/TOU)&lt;/code&gt;&lt;/strong&gt; 의 위험을 방지하기 위해, 직접 필드 값을 반환하지 않고 매 번 생성자를 활용해 필드 값을 새로운 객체로 반환하는 것. &lt;a href=&#34;https://abcstudyguide.com/java-defensive-copying/&#34;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;빌더와-계층적으로-설계된-클래스&#34; &gt;빌더와 계층적으로 설계된 클래스
&lt;span&gt;
    &lt;a href=&#34;#%eb%b9%8c%eb%8d%94%ec%99%80-%ea%b3%84%ec%b8%b5%ec%a0%81%ec%9c%bc%eb%a1%9c-%ec%84%a4%ea%b3%84%eb%90%9c-%ed%81%b4%eb%9e%98%ec%8a%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;빌더 패턴은 계층적으로 설계된 클래스와 조합이 좋다.&lt;br&gt;
각 계층의 클래스에 관한 빌더를 멤버로 정의한다.&lt;br&gt;
즉, &lt;mark style=&#34;background: #ADCCFFA6;&#34;&gt;추상 클래스&lt;/mark&gt;는 &lt;mark style=&#34;background: #ADCCFFA6;&#34;&gt;추상 빌더&lt;/mark&gt;를, &lt;code&gt;구체 클래스(Concrete Class)&lt;/code&gt;는 &lt;code&gt;구체 빌더&lt;/code&gt;를 갖게 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;구체 클래스(Concrete Class)&lt;/code&gt;: 모든 메서드가 구현되어 있는, 즉 &lt;code&gt;new&lt;/code&gt; 키워드를 통해 인스턴스를 만들 수 있는 클래스.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 추상 클래스
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pizza&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 추상 빌더
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Builder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 구체 클래스
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NyPizza&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Pizza &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 구체 빌더
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Pizza&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Builder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이때, 추상 빌더 클래스는 &lt;strong&gt;&lt;code&gt;재귀적 타입 한정(Recirsive Type Bound)&lt;/code&gt;&lt;/strong&gt; 을 이용하는 제네릭 타입이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;재귀적 타입 한정(Recursive Type Bound)&lt;/code&gt;&lt;/strong&gt; : 타입 매개변수가 자신을 포함하는 수식에 의해 한정되는 것.
&lt;ul&gt;
&lt;li&gt;ex) &lt;code&gt;Builder&amp;lt;T extends Builder&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;추상 빌더에서 추상 메서드인 &lt;code&gt;self&lt;/code&gt;를 하위 클래스에서 재정의(하위 클래스의 &lt;code&gt;this&lt;/code&gt; 반환하도록)하게 해 상위&amp;lt;-&amp;gt;하위 형변환 없이 메서드 연쇄를 할 수 있도록 한다. 이러한 방식을 &lt;strong&gt;&lt;code&gt;시뮬레이트한 셀프 타입(Simulated Self-Type)&lt;/code&gt;&lt;/strong&gt; 관용구라 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 추상 클래스
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pizza&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Builder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;Pizza&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; build&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 하위 클래스는 이 메서드를 재정의(overriding)하여
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;this&amp;#34;를 반환하도록 해야 한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; T &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;()**;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 구체 클래스
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NyPizza&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Pizza &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Pizza&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Builder&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;NyPizza&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; build&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NyPizza&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 재정의해 &amp;#34;this&amp;#34; 반환
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Builder &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;()**&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;또한, 하위 클래스의 빌더가 정의한 &lt;code&gt;build&lt;/code&gt; 메서드는 해당하는 구체 하위 클래스를 반환하는, &lt;code&gt;공변반환 타이핑(Covariant Return Typing)&lt;/code&gt;을 이용해 &lt;mark style=&#34;background: #FFB86CA6;&#34;&gt;형변환에 신경쓰지 않고 빌더를 사용&lt;/mark&gt; 가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;공변반환 타이핑(Covariant Return Typing)&lt;/code&gt; : 하위 클래스 메서드가 override 대상 메서드(상위 클래스의 메서드)가 정의한 반환 타입이 아닌, 그 하위 타입을 반환하는 기능.
&lt;ul&gt;
&lt;li&gt;즉, 위 코드처럼 &lt;code&gt;NyPizza.Builder&lt;/code&gt;는 &lt;code&gt;NyPizza&lt;/code&gt;를 반환.
빌더를 이용하면 &lt;code&gt;가변인수(varargs)&lt;/code&gt; 매개변수를 여러 개 사용 가능하다. 이는 두 가지 방법이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;각각을 메서드들로 나눠서 선언한다.&lt;/li&gt;
&lt;li&gt;다른 매개변수들로 여러 번 호출한 뒤 이를 한 필드로 모은다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;빌더-패턴의-단점&#34; &gt;빌더 패턴의 단점
&lt;span&gt;
    &lt;a href=&#34;#%eb%b9%8c%eb%8d%94-%ed%8c%a8%ed%84%b4%ec%9d%98-%eb%8b%a8%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;h4 id=&#34;1-객체를-만들기-전-먼저-빌더부터-만들어야-한다&#34; &gt;1. 객체를 만들기 전 먼저 빌더부터 만들어야 한다.
&lt;span&gt;
    &lt;a href=&#34;#1-%ea%b0%9d%ec%b2%b4%eb%a5%bc-%eb%a7%8c%eb%93%a4%ea%b8%b0-%ec%a0%84-%eb%a8%bc%ec%a0%80-%eb%b9%8c%eb%8d%94%eb%b6%80%ed%84%b0-%eb%a7%8c%eb%93%a4%ec%96%b4%ec%95%bc-%ed%95%9c%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;h4 id=&#34;2-성능에-민감한-경우-문제가-될-수-있다&#34; &gt;2. 성능에 민감한 경우 문제가 될 수 있다.
&lt;span&gt;
    &lt;a href=&#34;#2-%ec%84%b1%eb%8a%a5%ec%97%90-%eb%af%bc%ea%b0%90%ed%95%9c-%ea%b2%bd%ec%9a%b0-%eb%ac%b8%ec%a0%9c%ea%b0%80-%eb%90%a0-%ec%88%98-%ec%9e%88%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;h4 id=&#34;3-매개변수가-4개-이상은-되야-값어치를-한다&#34; &gt;3. 매개변수가 4개 이상은 되야 값어치를 한다.
&lt;span&gt;
    &lt;a href=&#34;#3-%eb%a7%a4%ea%b0%9c%eb%b3%80%ec%88%98%ea%b0%80-4%ea%b0%9c-%ec%9d%b4%ec%83%81%ec%9d%80-%eb%90%98%ec%95%bc-%ea%b0%92%ec%96%b4%ec%b9%98%eb%a5%bc-%ed%95%9c%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;점층적 생성자 패턴보다 코드가 장황해지기 때문에 제대로 값어치를 하려면 매개변수가 4개 이상은 되어야 한다.&lt;/p&gt;
&lt;h2 id=&#34;정리&#34; &gt;정리
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%95%eb%a6%ac&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;API는 대게 시간이 갈수록 매개변수가 많아지는 경향을 띄므로 애초에 빌더로 시작하는 편이 나은 경우가 많다.&lt;br&gt;
다시 말하자면, 처리해야 할  매개변수가 많고 특히, 개중에 Optional한 매개변수가 많다면 빌더 패턴을 사용하는게 생성자, 정적 팩토리 메서드 보다 낫다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>정적 팩토리 메서드(Static Factory Method)</title>
      <link>https://cloudsoswift.github.io/post/develop/java/static-factory-method/</link>
      <pubDate>Wed, 25 Oct 2023 00:55:00 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/develop/java/static-factory-method/</guid>
      <description>&lt;p&gt;정적 팩토리 메서드란 무엇인지, 그리고 어떤 장점과 단점이 있는지를 정리해보고자 한다.&lt;/p&gt;
&lt;h2 id=&#34;정적-팩토리-메서드static-factory-method&#34; &gt;정적 팩토리 메서드(Static Factory Method)
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%95%ec%a0%81-%ed%8c%a9%ed%86%a0%eb%a6%ac-%eb%a9%94%ec%84%9c%eb%93%9cstatic-factory-method&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;클래스 인스턴스를 반환하는 단순한 정적 메서드이다.&lt;br&gt;
&lt;code&gt;public 생성자&lt;/code&gt;를 사용하는 방법과 함께 클래스의 인스턴스를 생성하는 대표적인 방법 중 하나이다.&lt;/p&gt;
&lt;h3 id=&#34;예시---boolean클래스의-valueof&#34; &gt;예시 - &lt;code&gt;Boolean&lt;/code&gt;클래스의 &lt;code&gt;valueOf&lt;/code&gt;
&lt;span&gt;
    &lt;a href=&#34;#%ec%98%88%ec%8b%9c---boolean%ed%81%b4%eb%9e%98%ec%8a%a4%ec%9d%98-valueof&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Boolean &lt;span style=&#34;color:#a6e22e&#34;&gt;valueOf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 인자로 받은 boolean 값에 따라 Boolean 클래스 인스턴스를 반환한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; Boolean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Boolean&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FALSE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Effective Java의 Item.2.에 따르면 &lt;strong&gt;&lt;code&gt;생성자 대신 정적 팩터리 메서드를 고려하라&lt;/code&gt;&lt;/strong&gt; 라는데, 이를 통해 얻는 이점과 실은 무엇일까?&lt;/p&gt;
&lt;h2 id=&#34;정적-팩토리-메서드의-장점&#34; &gt;정적 팩토리 메서드의 장점
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%95%ec%a0%81-%ed%8c%a9%ed%86%a0%eb%a6%ac-%eb%a9%94%ec%84%9c%eb%93%9c%ec%9d%98-%ec%9e%a5%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;1-이름을-가질-수-있다&#34; &gt;1. 이름을 가질 수 있다.
&lt;span&gt;
    &lt;a href=&#34;#1-%ec%9d%b4%eb%a6%84%ec%9d%84-%ea%b0%80%ec%a7%88-%ec%88%98-%ec%9e%88%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;&lt;em&gt;반환될 객체의 특성을 제대로 설명하지 못하는&lt;/em&gt; &lt;mark style=&#34;background: #ADCCFFA6;&#34;&gt;생성자&lt;/mark&gt;와 달리, &lt;mark style=&#34;background: #FFB86CA6;&#34;&gt;정적 팩토리 메서드&lt;/mark&gt;는 &lt;mark style=&#34;background: #FFB86CA6;&#34;&gt;이름만 잘 지으면 어떤 특성을 지녔는지를 쉽게 묘사&lt;/mark&gt; 할 수 있다.&lt;br&gt;
또한, 생성자는 &lt;mark style=&#34;background: #ADCCFFA6;&#34;&gt;&lt;b&gt;한 시그니처에 하나의 생성자&lt;/b&gt;&lt;/mark&gt;만 만들 수 있다. 이와 달리, 정적 팩토리 메서드는 &lt;em&gt;이름을 가질 수 있기 때문에&lt;/em&gt; 시그니처가 같은 생성자가 여러 개 필요한 경우 &lt;mark style=&#34;background: #FFB86CA6;&#34;&gt;이름을 통해 구분&lt;/mark&gt;지을 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;mark style=&#34;background: #ADCCFFA6;&#34;&gt;&lt;b&gt;시그니처&lt;/b&gt;&lt;/mark&gt;: 함수의 &lt;em&gt;이름, 공개 범위, 매개 변수&lt;/em&gt; 같은 함수에 대한 일반적인 정보. &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Signature/Function&#34;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// O
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// X : 이미 같은 시그니처의 생성자가 존재해 선언 불가
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-호출될-때마다-인스턴스를-새로-생성하지-않아도-된다&#34; &gt;2. 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.
&lt;span&gt;
    &lt;a href=&#34;#2-%ed%98%b8%ec%b6%9c%eb%90%a0-%eb%95%8c%eb%a7%88%eb%8b%a4-%ec%9d%b8%ec%8a%a4%ed%84%b4%ec%8a%a4%eb%a5%bc-%ec%83%88%eb%a1%9c-%ec%83%9d%ec%84%b1%ed%95%98%ec%a7%80-%ec%95%8a%ec%95%84%eb%8f%84-%eb%90%9c%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;이러한 특성 덕분에 &lt;code&gt;불변 클래스(immutable class)&lt;/code&gt;의 경우, (1)인스턴스를 미리 만들어 놓거나 (2)새로 생성한 인스턴스를 캐싱해 재활용하는 식으로 불필요한 객체 생성을 피할 수 있다.&lt;br&gt;
이를 활용해 같은 객체(&lt;em&gt;특히 생성비용이 큰&lt;/em&gt;)가 자주 요청되는 상황에 성능을 끌어올릴 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;불변 객체(Immuntable Objects)&lt;/code&gt;: &lt;strong&gt;모든 필드가 final, private&lt;/strong&gt;이고, setter를 제공하지 않는 객체. 대표적인 예시론 &lt;code&gt;String&lt;/code&gt; 클래스가 있다. &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html&#34;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;또한, 언제 어느 인스턴스가 살아 있게 할지를 통제하는 &lt;strong&gt;&lt;code&gt;인스턴스 통제 클래스(instance-controlled class)&lt;/code&gt;&lt;/strong&gt; 와 같이 작동할 수 있다.
인스턴스를 통제하면 클래스를 &lt;code&gt;싱글턴&lt;/code&gt;, &lt;code&gt;인스턴스화 불가&lt;/code&gt;로 만들 수 있다. 또한 불변 클래스에서 &lt;strong&gt;동치인 인스턴스가 단 하나임을 보장&lt;/strong&gt;할 수 있다.&lt;br&gt;
인스턴스 통제는 열거 타입이 인스턴스가 하나만 만들어짐을 보장한다.&lt;/p&gt;
&lt;h3 id=&#34;3-반환-타입의-하위-타입-객체를-반환-가능하다&#34; &gt;3. 반환 타입의 &lt;code&gt;하위 타입 객체&lt;/code&gt;를 반환 가능하다.
&lt;span&gt;
    &lt;a href=&#34;#3-%eb%b0%98%ed%99%98-%ed%83%80%ec%9e%85%ec%9d%98-%ed%95%98%ec%9c%84-%ed%83%80%ec%9e%85-%ea%b0%9d%ec%b2%b4%eb%a5%bc-%eb%b0%98%ed%99%98-%ea%b0%80%eb%8a%a5%ed%95%98%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;반환할 객체 클래스를 &lt;strong&gt;자유롭게 선택&lt;/strong&gt; 할 수 있다. 이러한 유연함을 바탕으로 &lt;strong&gt;&lt;code&gt;인터페이스 기반 프레임워크&lt;/code&gt;&lt;/strong&gt; 를 만들 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;인터페이스 기반 프레임워크&lt;/code&gt;&lt;/strong&gt; : 인터페이스와 그 구현으로 설계된 프레임워크로, &lt;mark style=&#34;background: lightskyblue;&#34;&gt;구현자(implementor)에겐 구현에 대한 완전한 제어권을 제공&lt;/mark&gt;하고, &lt;mark style=&#34;background: lightsalmon;&#34;&gt;클라이언트에게는 안정적인 API를 제공&lt;/mark&gt;하는 이점이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Java 8&lt;/code&gt;&lt;/strong&gt; 이전에는 &lt;em&gt;인터페이스에 정적 메서드를 선언할 수 없어서&lt;/em&gt; 인터페이스 &lt;code&gt;XXX&lt;/code&gt;를 반환하는 정적 메서드가 필요하면, &lt;code&gt;XXXs&lt;/code&gt;라는 &lt;strong&gt;&lt;code&gt;동반 클래스&lt;/code&gt;&lt;/strong&gt; (&lt;em&gt;companion class, 인스턴스화 불가한 클래스&lt;/em&gt;)를 만들어 그 안에 정의해왔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Collection&lt;/code&gt;(인터페이스) 과 &lt;code&gt;Collections&lt;/code&gt;(동반 클래스)가 대표적인 예시다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Collection&lt;/code&gt;의 경우 &lt;em&gt;부가 기능들을 포함한 유틸리티 구현체들&lt;/em&gt;이 &lt;strong&gt;인터페이스대로 동작할 것임을 예상할 수 있기 때문&lt;/strong&gt;에 구현체들을 공개하지 않았고, API를 작고 가볍게 만들 수 있었다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Java 8 이후&lt;/code&gt;&lt;/strong&gt; 로는 &lt;strong&gt;인터페이스&lt;/strong&gt;가 디폴트 메서드와 &lt;strong&gt;정적 메서드를 가질 수 있게&lt;/strong&gt; 되므로써 동반 클래스를 둘 이유가 없어졌다.&lt;br&gt;
다만, &lt;code&gt;public static&lt;/code&gt;만 가능하므로 별도의 package-private 클래스에 둬야 할 수도 있다.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;Java 9&lt;/code&gt;&lt;/strong&gt; 에서는 &lt;code&gt;private static&lt;/code&gt; 메서드도 지원하지만, &lt;strong&gt;static 필드&lt;/strong&gt;와 &lt;strong&gt;static 멤버 클래스&lt;/strong&gt;는 &lt;strong&gt;여전히 공개&lt;/strong&gt;되어 있어야 한다.&lt;/p&gt;
&lt;h3 id=&#34;4-입력-매개변수에-따라-매번-다른-클래스의-객체를-반환할-수-있다&#34; &gt;4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.
&lt;span&gt;
    &lt;a href=&#34;#4-%ec%9e%85%eb%a0%a5-%eb%a7%a4%ea%b0%9c%eb%b3%80%ec%88%98%ec%97%90-%eb%94%b0%eb%9d%bc-%eb%a7%a4%eb%b2%88-%eb%8b%a4%eb%a5%b8-%ed%81%b4%eb%9e%98%ec%8a%a4%ec%9d%98-%ea%b0%9d%ec%b2%b4%eb%a5%bc-%eb%b0%98%ed%99%98%ed%95%a0-%ec%88%98-%ec%9e%88%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;반환 타입의 하위 타입이기만 하면 어떤 클래스의 객체건 상관없다.&lt;br&gt;
일례로 &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html&#34;&gt;EnumSet&lt;/a&gt; 클래스의 경우, public 생성자 없이 정적 팩토리만 제공하는데 원소의 수(64개 이하, 초과)에 따라 두 하위 클래스(&lt;code&gt;RegularEnumSet&lt;/code&gt;, &lt;code&gt;JumboEnumSet&lt;/code&gt;) 중 하나의 인스턴스를 반환한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고로, &lt;code&gt;RegularEnumSet&lt;/code&gt;과 &lt;code&gt;JumboEnumSet&lt;/code&gt;은 java 레퍼런스 사이트에는 명세되어 있지 않지만, IDE를 통해 EnumSet의 Declaration을 들어가보면 확인 가능하다.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// EnumSet.class
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;E &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; Enum&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; EnumSet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;noneOf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Class&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; elementType&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Enum&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; universe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getUniverse&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elementType&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;universe &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ClassCastException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;elementType &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; not an enum&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;universe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 원소의 개수가 64개 이하면 RegularEnumSet을 반환.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RegularEnumSet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;elementType&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; universe&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 원소의 개수가 64개 초과면 JumboEnumSet을 반환.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; JumboEnumSet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;elementType&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; universe&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;클라이언트는 정적 팩토리가 반환하는 객체가 &lt;strong&gt;어떤 클래스의 인스턴스인지 알 수도, 알 필요도 없다&lt;/strong&gt;.&lt;br&gt;
오직 반환 타입인 &lt;code&gt;EnumSet&lt;/code&gt;의 하위 클래스이기만 하면 된다.&lt;/p&gt;
&lt;h3 id=&#34;5-정적-팩토리-메서드를-작성할-당시엔-반환할-객체의-클래스가-존재하지-않아도-된다&#34; &gt;5. 정적 팩토리 메서드를 작성할 당시엔 반환할 객체의 클래스가 존재하지 않아도 된다.
&lt;span&gt;
    &lt;a href=&#34;#5-%ec%a0%95%ec%a0%81-%ed%8c%a9%ed%86%a0%eb%a6%ac-%eb%a9%94%ec%84%9c%eb%93%9c%eb%a5%bc-%ec%9e%91%ec%84%b1%ed%95%a0-%eb%8b%b9%ec%8b%9c%ec%97%94-%eb%b0%98%ed%99%98%ed%95%a0-%ea%b0%9d%ec%b2%b4%ec%9d%98-%ed%81%b4%eb%9e%98%ec%8a%a4%ea%b0%80-%ec%a1%b4%ec%9e%ac%ed%95%98%ec%a7%80-%ec%95%8a%ec%95%84%eb%8f%84-%eb%90%9c%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;이런 유연함이 &lt;code&gt;JDBC&lt;/code&gt;와 같은 &lt;code&gt;서비스 제공자 프레임워크(Service Provider Framework)&lt;/code&gt;를 만드는데 근간이 된다.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;서비스 제공자 프레임워크&lt;/code&gt;&lt;/strong&gt; 는 서드파티가 &lt;em&gt;서비스를 implement 하거나 extend&lt;/em&gt;해 &lt;strong&gt;제공자(provider, 서비스의 구현체)&lt;/strong&gt; 를 &lt;strong&gt;구현&lt;/strong&gt;하도록 &lt;strong&gt;의도된 API&lt;/strong&gt;이며, 클라이언트에 구현체 제공하는것을 통제해 클라이언트 / 구현체를 분리한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;구현체의 동작 정의된 &lt;strong&gt;&lt;code&gt;서비스 인터페이스(Service Interface)&lt;/code&gt;&lt;/strong&gt; 를 구현하는 구현체를 만든다.&lt;/li&gt;
&lt;li&gt;제공자가 구현체를 &lt;strong&gt;&lt;code&gt;제공자 등록 API(Provider Registration API)&lt;/code&gt;&lt;/strong&gt; 를 통해 등록한다.&lt;/li&gt;
&lt;li&gt;클라이언트가 &lt;strong&gt;&lt;code&gt;서비스 접근 API(Service Access API, 정적 팩터리 메서드)&lt;/code&gt;&lt;/strong&gt; 를 이용해 서비스 인스턴스를 얻는다. 이때, &lt;em&gt;어떤 구현체를 원하는지 조건을 명시&lt;/em&gt;할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이러한 방식을 통해, 제공자가 추후 구현체를 작성하여 프레임워크에 제공해도 정상적으로 작동할 수 있다.&lt;/p&gt;
&lt;p&gt;이렇듯 다양한 장점이 있는 정적 팩토리 메서드이지만, 단점 역시 존재한다.&lt;/p&gt;
&lt;h2 id=&#34;정적-팩토리-메서드의-단점&#34; &gt;정적 팩토리 메서드의 단점
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%95%ec%a0%81-%ed%8c%a9%ed%86%a0%eb%a6%ac-%eb%a9%94%ec%84%9c%eb%93%9c%ec%9d%98-%eb%8b%a8%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;h3 id=&#34;1-정적-팩토리-메서드만-제공하면-하위-클래스-생성이-불가능하다&#34; &gt;1. 정적 팩토리 메서드만 제공하면 하위 클래스 생성이 불가능하다.
&lt;span&gt;
    &lt;a href=&#34;#1-%ec%a0%95%ec%a0%81-%ed%8c%a9%ed%86%a0%eb%a6%ac-%eb%a9%94%ec%84%9c%eb%93%9c%eb%a7%8c-%ec%a0%9c%ea%b3%b5%ed%95%98%eb%a9%b4-%ed%95%98%ec%9c%84-%ed%81%b4%eb%9e%98%ec%8a%a4-%ec%83%9d%ec%84%b1%ec%9d%b4-%eb%b6%88%ea%b0%80%eb%8a%a5%ed%95%98%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;상속을 하려면 &lt;code&gt;public&lt;/code&gt; 또는 &lt;code&gt;protected&lt;/code&gt; 생성자가 필요하기 때문이다.&lt;br&gt;
따라서 개발자는 상속보다 &lt;strong&gt;&lt;code&gt;컴포지션&lt;/code&gt;&lt;/strong&gt; 을 사용하도록 유도된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;컴포지션(Composition)&lt;/code&gt;&lt;/strong&gt; : &lt;strong&gt;has-a 관계&lt;/strong&gt;를 구현하기 위한 설계 기법으로, 객체가 다른 객체를 참조하는 인스턴스 변수를 사용하는 방법이다. &lt;a href=&#34;https://www.geeksforgeeks.org/composition-in-java/&#34;&gt;#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-네이밍이-정확하지-않으면-다른-사람이-한-번에-알아채기-힘들다&#34; &gt;2. 네이밍이 정확하지 않으면 다른 사람이 한 번에 알아채기 힘들다.
&lt;span&gt;
    &lt;a href=&#34;#2-%eb%84%a4%ec%9d%b4%eb%b0%8d%ec%9d%b4-%ec%a0%95%ed%99%95%ed%95%98%ec%a7%80-%ec%95%8a%ec%9c%bc%eb%a9%b4-%eb%8b%a4%eb%a5%b8-%ec%82%ac%eb%9e%8c%ec%9d%b4-%ed%95%9c-%eb%b2%88%ec%97%90-%ec%95%8c%ec%95%84%ec%b1%84%ea%b8%b0-%ed%9e%98%eb%93%a4%eb%8b%a4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;생성자 같이 API에 대한 설명이 명확히 드러나지 않아, 클라이언트는 &lt;strong&gt;정적 팩터리 메서드 방식을 채용한 클래스&lt;/strong&gt; 의 인스턴스화 방법을 알아내야 한다.&lt;br&gt;
따라서, &lt;strong&gt;API 문서의 명확한 작성&lt;/strong&gt;과 &lt;strong&gt;적절한 네이밍 규칙&lt;/strong&gt;을 통해 이를 방지해야 한다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js 스터디 1주차 - Node.js의 Thread에 대하여</title>
      <link>https://cloudsoswift.github.io/post/develop/nodejs/about-thread-of-node-js/</link>
      <pubDate>Fri, 04 Aug 2023 05:16:01 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/develop/nodejs/about-thread-of-node-js/</guid>
      <description>&lt;h1 id=&#34;발단&#34; &gt;발단
&lt;span&gt;
    &lt;a href=&#34;#%eb%b0%9c%eb%8b%a8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Node.js의 경우 Multi-Thread이지만 하나의 Thread만 유저가 사용가능하게 하고, 나머지는 내부적으로 사용&lt;/li&gt;
&lt;li&gt;최근에는 worker_thread와 같은 기능으로 유저도 Multi-Thread 환경에서 개발할 수 있도록 하는것으로 알고있음.&lt;/li&gt;
&lt;li&gt;여기서 Node.js의 Thread는 어떻게 구성되어 있고, 어떻게 작동하는지, 왜 하나의 Thread만 유저가 사용할 수 있게 한건지, worker_thread 기능은 또 뭔지 궁금해졌음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;궁금한-점&#34; &gt;궁금한 점
&lt;span&gt;
    &lt;a href=&#34;#%ea%b6%81%ea%b8%88%ed%95%9c-%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Node.js의 &lt;strong&gt;Thread 구조&lt;/strong&gt;는 어떻게 될 까?&lt;/li&gt;
&lt;li&gt;Node.js의 &lt;strong&gt;Thread는 어떻게 작동&lt;/strong&gt;할까?&lt;/li&gt;
&lt;li&gt;왜 Node.js는 하나의 Thread만 유저가 사용할 수 있게 한걸까?(&lt;strong&gt;왜 싱글스레드 모델을 선택&lt;/strong&gt;했을까?)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;worker_threads&lt;/strong&gt; 기능은 무엇일까?&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;진행&#34; &gt;진행
&lt;span&gt;
    &lt;a href=&#34;#%ec%a7%84%ed%96%89&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;h2 id=&#34;1-nodejs의-thread-구조는-어떻게-될까&#34; &gt;1. Node.js의 Thread 구조는 어떻게 될까?
&lt;span&gt;
    &lt;a href=&#34;#1-nodejs%ec%9d%98-thread-%ea%b5%ac%ec%a1%b0%eb%8a%94-%ec%96%b4%eb%96%bb%ea%b2%8c-%eb%90%a0%ea%b9%8c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Node.js는 Event-Driven Architecture를 채용해 &lt;mark style=&#34;background: #FFF3A3A6;&#34;&gt;(1) 오케스트레이션을 위한 Event Loop&lt;/mark&gt;와 &lt;mark style=&#34;background: #FFF3A3A6;&#34;&gt;(2)고비용 작업을 위한 Worker Pool&lt;/mark&gt;을 포함하고 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;event-loop&#34; &gt;Event Loop
&lt;span&gt;
    &lt;a href=&#34;#event-loop&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;main loop, main thread, event thread 라고도 부릅니다.&lt;br&gt;
간단히 말하면 Event에 등록된 Javascript callback 함수를 실행하고, Non-Blocking 비동기 요청(ex. 네트워크 I/O) 역시 처리하는 스레드 입니다.&lt;br&gt;
Node.js 애플리케이션이 시작되면 먼저 초기화 phase를 완료하고, module들을 require하고 Event에 대한 callback들을 등록합니다.&lt;br&gt;
그 다음 Node.js 애플리케이션은 Event Loop에 진입해 들어오는 Client 요청들에 대해 그에 해당하는 callback들을 실행시키므로써 응답합니다. 이러한 callback들은 동기적으로 실행되며, 완료된 후에도 계속 처리하기 위해 비동기 요청들을 등록할 수도 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;worker-poolthread-pool&#34; &gt;Worker Pool(Thread Pool)
&lt;span&gt;
    &lt;a href=&#34;#worker-poolthread-pool&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Task를 처리하는 Worker로 이루어진 Pool 입니다.&lt;br&gt;
Node.js의 Worker Pool은 &lt;a href=&#34;https://docs.libuv.org/en/v1.x/threadpool.html&#34;&gt;libuv&lt;/a&gt;의 구현체로, libuv는 일반적인 Task Submission API(&lt;code&gt;uv_queue_work&lt;/code&gt;)를 노출하고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int uv_queue_work(*loop, *req, work_cb, after_work_cb)&lt;/code&gt; : threadpool의 스레드에서,  &lt;code&gt;work_cb&lt;/code&gt;를 실행하는 작업 request를 initialize 합니다. &lt;code&gt;work_cb&lt;/code&gt;가 완료되고 나면, loop thread에서 &lt;code&gt;after_work_cb&lt;/code&gt;를 호출합니다.&lt;br&gt;
Node.js에서는 Worker Pool을 &lt;strong&gt;&amp;ldquo;비싼&amp;rdquo;&lt;/strong&gt; 작업을 처리하기 위해 사용합니다. &lt;strong&gt;&amp;ldquo;비싼&amp;rdquo;&lt;/strong&gt; 작업으로는 OS단에서 non-blocking 버전을 제공하지 않는 I/O 작업(특히 CPU 집약적인 작업)이 있습니다.&lt;br&gt;
Worker Pool을 사용하는 Node.js Module API는 다음과 같습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;io-집약적인-api&#34; &gt;I/O-집약적인 API
&lt;span&gt;
    &lt;a href=&#34;#io-%ec%a7%91%ec%95%bd%ec%a0%81%ec%9d%b8-api&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/dns.html&#34;&gt;DNS&lt;/a&gt; : Node.js에서 Name Resolution을 가능케 해주는 Module로, host name의 IP 주소를 조회하는 등의 작업을 수행할 때 사용할 수 있습니다.&lt;br&gt;
(조회시 항상 DNS 프로토콜을 사용하는 건 아니고, OS 기능을 이용해 이름 확인을 할 수도 있습니다.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/fs.html#fs_threadpool_usage&#34;&gt;File System&lt;/a&gt; : (&lt;code&gt;fs.FSWatcher()&lt;/code&gt;와 명시적으로 동기 방식인 API를 제외한) 대부분의 File System API가 libuv의 threadpool을 사용합니다.
&lt;ul&gt;
&lt;li&gt;참고로 libuv이 제공하는 threadpool은 내부적으로 모든 File System 작업과 &lt;code&gt;getaddrinfo&lt;/code&gt;, &lt;code&gt;getnameinfo&lt;/code&gt;와 같은 요청을 실행하는데 사용됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;cpu-집약적인-api&#34; &gt;CPU-집약적인 API
&lt;span&gt;
    &lt;a href=&#34;#cpu-%ec%a7%91%ec%95%bd%ec%a0%81%ec%9d%b8-api&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/crypto.html&#34;&gt;Crypto&lt;/a&gt;: Node.js에서 암호화를 위해 사용하는 Module로, 주로 Hashing같은 고비용 작업을 처리하는데에 libuv의 threadpool을 사용합니다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;crypto.pbkdf2()&lt;/code&gt;, &lt;code&gt;crypto.scrypt()&lt;/code&gt;, &lt;code&gt;crypto.randomBytes()&lt;/code&gt;,&lt;br&gt;
&lt;code&gt;crypto.randomFill()&lt;/code&gt;, &lt;code&gt;crypto.generateKeyPair()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/zlib.html#zlib_threadpool_usage&#34;&gt;Zlib&lt;/a&gt;: Node.js에서 파일 압축을 위해 사용하는 Module로, 명시적으로 동기적인 몇몇을 제외하면 대부분의 작업이 libuv의 threadpool을 사용합니다.&lt;br&gt;
이러한 API들만이 Worker Pool의 task 원천입니다.&lt;br&gt;
&lt;a href=&#34;https://nodejs.org/api/addons.html&#34;&gt;C++ add-on&lt;/a&gt;을 사용하는 애플리케이션과 모듈은 다른 task들을 Worker Pool에 submit 할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-nodejs의-thread는-어떻게-작동할까&#34; &gt;2. Node.js의 Thread는 어떻게 작동할까?
&lt;span&gt;
    &lt;a href=&#34;#2-nodejs%ec%9d%98-thread%eb%8a%94-%ec%96%b4%eb%96%bb%ea%b2%8c-%ec%9e%91%eb%8f%99%ed%95%a0%ea%b9%8c&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&#34;api-호출과-task-submit&#34; &gt;API 호출과 task submit
&lt;span&gt;
    &lt;a href=&#34;#api-%ed%98%b8%ec%b6%9c%ea%b3%bc-task-submit&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;위에서 언급한 API들 중 하나를 Event Loop의 callback 에서 호출한다면, Event Loop는 해당 API에 대한 Node.js C++ bindings에 들어가 task를 submit할 때 약간의 설정 비용(setup cost)를 지불합니다.&lt;br&gt;
설정 비용들은 task의 전체 비용에 비해 무시할 수 있는 수준이라 Event Loop는 이를 &lt;code&gt;offloading&lt;/code&gt; 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offloading&lt;/code&gt;: 리소스 집약적인 컴퓨팅 작업을 하드웨어 가속기와 같은 별도의 프로세서나 클러스터, 그리드 또는 클라우드와 같은 외부 플랫폼으로 전송하는 것.&lt;br&gt;
task를 submit할 때, Node.js는 Node.js C++ bindings 내부의 해당 C++ 함수에 대한 Pointer를 제공합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nodejs가-다음으로-실행할-code를-정하는-방법&#34; &gt;Node.js가 다음으로 실행할 code를 정하는 방법
&lt;span&gt;
    &lt;a href=&#34;#nodejs%ea%b0%80-%eb%8b%a4%ec%9d%8c%ec%9c%bc%eb%a1%9c-%ec%8b%a4%ed%96%89%ed%95%a0-code%eb%a5%bc-%ec%a0%95%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;Event Loop와 Worker Pool은 각각 대기중인 event, 대기중인 task들 위한 Queue를 추상적으로 유지합니다.&lt;br&gt;
&lt;strong&gt;추상적&lt;/strong&gt;이라고 말한 이유는, 사실 Event Loop는 queue를 유지하고 있지 않습니다.&lt;br&gt;
대신 OS에 요청한 file descriptor들의 집합을 갖고 있는데, 이를 통해 OS에 OS별 메커니즘(epoll (linux), kqueue (OSX), event ports (Solaris), IOCP (Windows))을 이용해 모니터링을 요청합니다.&lt;br&gt;
file descriptor로는 &lt;strong&gt;network socket&lt;/strong&gt;, &lt;strong&gt;감시중인 파일&lt;/strong&gt;들이 있습니다.&lt;br&gt;
OS가 이들 중 하나 준비되었다고 말하면, Event Loop는 이를 적절한 Event로 변환하고 해당 Event와 관련된 callback을 호출합니다.&lt;br&gt;
반면 이와 대조적으로 Worker Pool은 실행되어야 하는 Task들에 대한 실제 Queue를 사용합니다. Worker는 queue에서 task를 pop하여 처리한 뒤, task가 완료되면 &lt;em&gt;&amp;ldquo;적어도 하나의 작업이 완료되었음(At least one task is finished)&amp;rdquo;&lt;/em&gt; event를 Event Loop에 발생시킵니다.&lt;/p&gt;
&lt;h3 id=&#34;개발자가-구현시-중요하게-생각해야-할-점&#34; &gt;개발자가 구현시 중요하게 생각해야 할 점
&lt;span&gt;
    &lt;a href=&#34;#%ea%b0%9c%eb%b0%9c%ec%9e%90%ea%b0%80-%ea%b5%ac%ed%98%84%ec%8b%9c-%ec%a4%91%ec%9a%94%ed%95%98%ea%b2%8c-%ec%83%9d%ea%b0%81%ed%95%b4%ec%95%bc-%ed%95%a0-%ec%a0%90&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;위에서 언급한 (적은 thread로 많은 client를 처리하는)Node.js의 구조상, thread가 어떤 request 때문에 block될 경우 끼치는 피해가 더 막대하므로 공정한 스케줄링(fair scheduling)을 개발자가 보장할 필요가 있게 됩니다.&lt;br&gt;
따라서 개발자는 구현시 requset에 대한 scheduling에 좀 더 신경써야 합니다.&lt;br&gt;
다시 한 번 말하면, 모든 들어오는 요청과 나가는 응답이 Event Loop를 통과하므로 Event Loop가 한 작업에 대해 너무 오래걸리지 않도록, 즉 &lt;strong&gt;Block&lt;/strong&gt;되지 않도록 Javascript callback들이 빠르게 처리되도록 해야합니다.&lt;br&gt;
따라서 개발자는 input에 제한을 걸고, input이 너무 긴 작업은 거절하는 것을 고려해야 합니다.&lt;br&gt;
이를 통해 callback의 복잡성이 크더라도, input을 제한하여 callback이 worst-case 작업시간보다 오래 걸리지 않도록 할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사실 뒤에 block을 유발할 수 있는 작업들에 대한 내용이 있는데, 이러한 내용은 공식 문서를 정리하는 것만 해도 길어질 것 같아 추후 따로 글을 작성하도록 하겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-nodejs의-싱글-스레드-모델-선택-이유&#34; &gt;3. Node.js의 싱글-스레드 모델 선택 이유
&lt;span&gt;
    &lt;a href=&#34;#3-nodejs%ec%9d%98-%ec%8b%b1%ea%b8%80-%ec%8a%a4%eb%a0%88%eb%93%9c-%eb%aa%a8%eb%8d%b8-%ec%84%a0%ed%83%9d-%ec%9d%b4%ec%9c%a0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/about&#34;&gt;Node.js 공식문서&lt;/a&gt;에 따르면, Node.js는 &lt;em&gt;(싱글 스레드 모델을 선택하므로써)&lt;/em&gt; &lt;strong&gt;현대의 일반적인 동시성 모델들과 달리&lt;/strong&gt;&lt;mark style=&#34;background: #FFF3A3A6;&#34;&gt; 비효율적이고 사용하기 어려운 &amp;lsquo;스레드-기반 네트워킹&amp;rsquo;&lt;/mark&gt;을 피할 수 있으며, lock이 발생하지 않아 사용자들이 dead-lock의 위험으로 부터 자유로울 수 있게 됐다고 말하고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js에서는 적은 수의 Thread를 사용하므로써, Thread의 Memory, Context Switching으로 인해 발생하는 공간과 시간 Overhead를 줄일 수 있다고 말합니다.&lt;br&gt;
그를 통해 시스템에서는 더 많은 시간과 메모리를 클라이언트들에게 사용할 수 있다는 이점을 얻을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;영향-받은-모델&#34; &gt;영향 받은 모델
&lt;span&gt;
    &lt;a href=&#34;#%ec%98%81%ed%96%a5-%eb%b0%9b%ec%9d%80-%eb%aa%a8%eb%8d%b8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;또한 Node.js의 Event Loop Runtime 구조는 Ruby의 &lt;code&gt;Event Machine&lt;/code&gt;과 Python의 &lt;code&gt;Twisted&lt;/code&gt;로 부터 영향을 받았으며, 유사한 설계를 갖고있다고 말합니다.&lt;/p&gt;
&lt;h4 id=&#34;event-machine&#34; &gt;Event Machine
&lt;span&gt;
    &lt;a href=&#34;#event-machine&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Ruby를 위한 Event-Driven IO 및 경량 동시성 라이브러리로, Node.js, libev와 마찬가지로 &lt;strong&gt;&lt;code&gt;Reactor&lt;/code&gt;&lt;/strong&gt; 패턴을 사용해 Event-Driven I/O를 제공합니다.&lt;br&gt;
Event Machine은 &amp;lsquo;높은 확장성, 성능, 안정성&amp;rsquo; 그리고 &amp;lsquo;개발자가 애플리케이션의 로직에 집중할 수 있도록 하는 API(스레드 네트워크 프로그래밍의 복잡성을 제거한)&amp;rsquo; 이라는 두 핵심 요구사항을 만족하도록 설계되어 있습니다.&lt;br&gt;
정리하자면,  &amp;lsquo;&lt;em&gt;Scalable해서 규모를 증감&lt;/em&gt;시킬 수 있으면서, &lt;strong&gt;Thread에 대해 신경쓰지 않고 개발&lt;/strong&gt;할 수 있는 &lt;strong&gt;동시성을 지닌 API&lt;/strong&gt;를 만들도록 돕는 라이브러리&amp;rsquo; 라고 정리할 수 있을 것 같습니다.&lt;/p&gt;
&lt;h5 id=&#34;reactor-패턴&#34; &gt;&lt;strong&gt;&lt;code&gt;Reactor 패턴&lt;/code&gt;&lt;/strong&gt;
&lt;span&gt;
    &lt;a href=&#34;#reactor-%ed%8c%a8%ed%84%b4&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;참고 문서
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dre.vanderbilt.edu/~schmidt/PDF/reactor-siemens.pdf&#34;&gt;Reactor - An Object Behavioral Pattern for Demultiplexing and Dispatching Handles for Synchronous Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Reactor_pattern&#34;&gt;Reactor pattern - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service Handler에 &lt;em&gt;동시에 전달&lt;/em&gt;되는 Request를 처리하기 위한 &lt;strong&gt;Event Handling 패턴&lt;/strong&gt;.&lt;br&gt;
Service Handler는 들어오는 요청을 &lt;strong&gt;역다중화&lt;/strong&gt;(Demultiplex)한 뒤, 관련된 Request Handler(service provider)에게 동기적으로 전송합니다.&lt;br&gt;
모든 Reactor 시스템은 정의대로라면 싱글-스레드이지만, 멀티스레드 환경에서도 존재할 수 있습니다.&lt;br&gt;
애플리케이션 부분 코드를 Reactor 구현과 분리해 코드를 모듈화해 재사용이 가능하다는 장점이 있지만, 제어의 흐름이 역전되어 있어 절차적 패턴(Procedural Pattern)보다 디버깅하기 힘들고 Request Handler 호출이 동기적이라는 점과 Demultiplexer 때문에 최대 동시성이 제한(&lt;em&gt;대칭형 멀티프로세싱 하드웨어에서 특히&lt;/em&gt;) 된다는 한계가 존재합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;역다중화&lt;/strong&gt; : 물리적 장치의 효율성을 높이기 위해 최소한의 물리적 요소를 사용해 최대한 데이터를 전달하는 &lt;strong&gt;다중화(Multiplex)&lt;/strong&gt; 작업을 거쳐 전달받은 데이터를 다시 합치는 작업. &lt;a href=&#34;https://dbehdrhs.tistory.com/98&#34;&gt;#&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Event Demultiplexer의 경우 &lt;code&gt;Handles&lt;/code&gt;에서 발생하는 이벤트를 Block하며, Blocking 없이 Handle에 대한 작업을 시작할 수 있을 때 반환됩니다.&lt;/li&gt;
&lt;li&gt;I/O Event에 대한 일반적인 Demultiplexer는 &lt;code&gt;select&lt;/code&gt;라는, UNIX 및 WIN32 OS에서 제공되는 Event Demultiplexing System Call 입니다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt; call은 어떤 handles가 &lt;em&gt;애플리케이션 프로세스를 Block하지 않고&lt;/em&gt; &lt;mark style=&#34;background: #FFF3A3A6;&#34;&gt;동시에&lt;/mark&gt; 작업을 호출할 수 있는지를 나타내는 작업입니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Handles&lt;/code&gt; : 일반적으로 OS에서 관리하는 자원을 식별합니다. Logging Server에서 Socket Endpoint를 식별하여, Synchronous Event Demultiplexer가 Endpoint에서 이벤트가 발생할 때 까지 기다리도록 해줍니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;참고할만한 글
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/leveraging-event-multiplexing-even-driven-guillermo-wrba/&#34;&gt;Leveraging Event Multiplexing in Even-Driven Architectures | Guillermo Wrba&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.linecorp.com/ko/blog/do-not-block-the-event-loop-part1&#34;&gt;비동기 서버에서 이벤트 루프를 블록하면 안 되는 이유 1부 - 멀티플렉싱 기반의 다중 접속 서버로 가기까지 (linecorp.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.naver.com/n_cloudplatform/222189669084&#34;&gt;[네이버클라우드 기술&amp;amp;경험] IO Multip.. : 네이버블로그 (naver.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dbehdrhs.tistory.com/98&#34;&gt;12장 IO 멀티플렉싱(Multiplexing) (tistory.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/what-is-a-demultiplexer/&#34;&gt;What is a demultiplexer ? - GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;twisted&#34; &gt;Twisted
&lt;span&gt;
    &lt;a href=&#34;#twisted&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;p&gt;Python으로 작성된 Event-Driven Networking Engine으로  Event-Driven Web Server는 물론 mail, SSH Client 등을 포함하고 있어 웹 애플리케이션이 구현 가능합니다.&lt;br&gt;
Event Engine과 마찬가지로 &lt;code&gt;Reactor&lt;/code&gt; 패턴이 적용되어 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고할만한 글
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dataonair.or.kr/db-tech-reference/d-lounge/expert-column/?mod=document&amp;amp;uid=53875&#34;&gt;네트워크 프로그램 개발을 위한 파이썬 프레임워크 – DATA ON-AIR (dataonair.or.kr)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.twisted.org/en/stable/&#34;&gt;Twisted 22.10.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-worker_threads&#34; &gt;4. worker_threads
&lt;span&gt;
    &lt;a href=&#34;#4-worker_threads&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;worker_threads&lt;/code&gt;는 Javascript를 병렬 실행하는 Thread를 사용할 수 있게 해주는 모듈입니다.&lt;br&gt;
Node.js에 내장되어 있는 동기 I/O 작업이 더 효율적이므로 I/O-집약적인 작업보다 CPU-집약적인 연산을 수행하는 Javascript 실행에 더 유용합니다.&lt;br&gt;
&lt;code&gt;isMainThread&lt;/code&gt;, &lt;code&gt;Worker&lt;/code&gt;, &lt;code&gt;parentPort&lt;/code&gt;등을 통해 메인 스레드로 부터 Worker들을 만들고, Worker들이 어떤 작업을 수행할 지를 지정할 수 있습니다.&lt;br&gt;
또한 메인 스레드 &amp;lt;-&amp;gt; Worker 간 &lt;code&gt;message&lt;/code&gt; 이벤트를 발생시키거나, 메시지를 송수신할 port(&lt;code&gt;MessageChannel&lt;/code&gt;)를 만들어 데이터를 주고받을 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;worker_threads 역시 이 문서에서 다루면 너무 길어질 것 같아 추후 따로 글을 작성하겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;정리-후기&#34; &gt;정리 후기
&lt;span&gt;
    &lt;a href=&#34;#%ec%a0%95%eb%a6%ac-%ed%9b%84%ea%b8%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;공식 문서를 찾기보다 검색을 먼저 하는 습관이 어느순간부터 들어있었는데, 이번에 여러 공식 문서들을 찾아보며 공식 문서만 잘 찾아봐도 검색할 일이 많이 줄겠다는 생각이 들었다.&lt;/li&gt;
&lt;li&gt;개인적으로 역다중화, 다중화와 같은 개념부터 I/O Blocking, Non-Blocking 등 모르던 개념들을 많이 알게 되어서 나중에 이들에 대해 따로 정리하는 글을 작성해보고 싶어졌다.&lt;/li&gt;
&lt;li&gt;FE만 공부하던 입장에서 이런 동시성 관련된 문제에 공부하니 머리가 많이 깨질것 같지만(&amp;hellip;) 흥미도 많이 생기게 되었다!&lt;/li&gt;
&lt;li&gt;다음 주는 주제를 하나만 잡던가 좀 쉬운걸로 잡아야겠다.. 다른 것들도 하면서 글 정리하려니 한 주 가지고는 택도 없을 것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;이외-참고한-문서-및-블로그-포스트&#34; &gt;이외 참고한 문서 및 블로그 포스트
&lt;span&gt;
    &lt;a href=&#34;#%ec%9d%b4%ec%99%b8-%ec%b0%b8%ea%b3%a0%ed%95%9c-%eb%ac%b8%ec%84%9c-%eb%b0%8f-%eb%b8%94%eb%a1%9c%ea%b7%b8-%ed%8f%ac%ec%8a%a4%ed%8a%b8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/worker_threads.html&#34;&gt;Worker threads | Node.js v20.5.0 Documentation (nodejs.org)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/docs/guides/dont-block-the-event-loop&#34;&gt;Don&amp;rsquo;t Block the Event Loop (or the Worker Pool) | Node.js (nodejs.org)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.dev/en/learn/introduction-to-nodejs/&#34;&gt;Introduction to Node.js (nodejs.dev)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick&#34;&gt;The Node.js Event Loop, Timers, and process.nextTick() | Node.js (nodejs.org)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/leveraging-event-multiplexing-even-driven-guillermo-wrba/&#34;&gt;Leveraging Event Multiplexing in Even-Driven Architectures | LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.linecorp.com/ko/blog/do-not-block-the-event-loop-part1&#34;&gt;비동기 서버에서 이벤트 루프를 블록하면 안 되는 이유 1부 - 멀티플렉싱 기반의 다중 접속 서버로 가기까지 (linecorp.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.linecorp.com/ko/blog/do-not-block-the-event-loop-part3&#34;&gt;비동기 서버에서 이벤트 루프를 블록하면 안 되는 이유 3부 - Reactor 패턴과 이벤트 루프 (linecorp.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.naver.com/n_cloudplatform/222189669084&#34;&gt;[네이버클라우드 기술&amp;amp;경험] IO Multiplexing (IO 멀티플렉싱) 기본 개념부터 심화까지 -1부- : 네이버블로그 (naver.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dbehdrhs.tistory.com/98&#34;&gt;12장 IO 멀티플렉싱(Multiplexing) (tistory.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://plummmm.tistory.com/68&#34;&gt;입출력 다중화 (I/O Multiplexing) (tistory.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>[Javascript] 순환 참조 (Circular Import)</title>
      <link>https://cloudsoswift.github.io/post/develop/230219/circular_import/</link>
      <pubDate>Sun, 19 Feb 2023 11:22:33 +0900</pubDate>
      
      <guid>https://cloudsoswift.github.io/post/develop/230219/circular_import/</guid>
      <description>&lt;p&gt;오늘은 Javascript, Python같은 언어에서 import시 발생할 수 있는 순환 참조 에러에 대한 포스트를 작성하고자 한다.&lt;/p&gt;
&lt;h1 id=&#34;순환-참조&#34; &gt;순환 참조
&lt;span&gt;
    &lt;a href=&#34;#%ec%88%9c%ed%99%98-%ec%b0%b8%ec%a1%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h1&gt;&lt;h2 id=&#34;메모리-관점에서의-순환-참조--in-javascript-&#34; &gt;메모리 관점에서의 순환 참조 ( In Javascript )
&lt;span&gt;
    &lt;a href=&#34;#%eb%a9%94%eb%aa%a8%eb%a6%ac-%ea%b4%80%ec%a0%90%ec%97%90%ec%84%9c%ec%9d%98-%ec%88%9c%ed%99%98-%ec%b0%b8%ec%a1%b0--in-javascript-&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;간단히 요약하자면, 서로 다른 두 객체가 서로를 참조하여, 가비지 컬렉션 알고리즘의 대상에 포함되지 않아 해당 객체들이 불필요해져도 메모리 회수되지 않고 존속하게되는 문제이다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management&#34;&gt;Mozilla Developer Network의 문서&lt;/a&gt;의 예시를 드는게 이해하기 쉽다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;;         &lt;span style=&#34;color:#75715e&#34;&gt;// x는 y를 참조합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;;         &lt;span style=&#34;color:#75715e&#34;&gt;// y는 x를 참조합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azerty&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;다음 예제에서는 두 객체가 서로 참조하는 속성으로 생성되어 순환 구조를 생성합니다.&lt;br&gt;
함수 호출이 완료되면 이 두 객체는 스코프를 벗어나게 될 것이며, 그 시점에서 두 객체는 불필요해지므로 할당된 메모리는 회수되어야 합니다.&lt;br&gt;
그러나 두 객체가 서로를 참조하고 있으므로, &lt;strong&gt;참조-세기 알고리즘&lt;/strong&gt;은 둘 다 가비지 컬렉션의 대상으로 표시하지 않습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;참조-세기(Reference-counting) 알고리즘&lt;/strong&gt; : 가비지 컬렉션시 사용하는 알고리즘으로, &amp;ldquo;어떤 다른 객체도 참조하지 않는 객체&amp;quot;를 더 이상 필요없는 객체로 인식하고 가비지 컬렉션을 수행.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;import에서의-순환-참조circular-dependencies-in-javascript&#34; &gt;import에서의 순환 참조(Circular Dependencies) (In Javascript)
&lt;span&gt;
    &lt;a href=&#34;#import%ec%97%90%ec%84%9c%ec%9d%98-%ec%88%9c%ed%99%98-%ec%b0%b8%ec%a1%b0circular-dependencies-in-javascript&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2가지 이상의 모듈에서 import가 꼬리의 꼬리를 물어 순환 구조를 이루어 에러가 발생하는 경우.&lt;/li&gt;
&lt;li&gt;예시
&lt;img src=&#34;https://cloudsoswift.github.io/post/develop/230219/circular.png&#34; alt=&#34;circular import&#34;&gt;&lt;/li&gt;
&lt;li&gt;위와 같이 참조의 순환 고리가 발생하게 될 경우, 그 고리의 어느 한 모듈(&lt;em&gt;순환 고리안의 다른 모듈을 참조하는&lt;/em&gt;)을 이용하려 하면&lt;br&gt;
&lt;code&gt;ReferenceError: Cannot access &#39;모듈 이름&#39; before initialization&lt;/code&gt;&lt;br&gt;
라며 에러가 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;나의-사례&#34; &gt;나의 사례
&lt;span&gt;
    &lt;a href=&#34;#%eb%82%98%ec%9d%98-%ec%82%ac%eb%a1%80&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;본인은 &lt;em&gt;Axios 모듈&lt;/em&gt;, &lt;em&gt;Redux 객체(store)를 export 하는 모듈&lt;/em&gt;, &lt;em&gt;Redux Toolkit의 slice 객체를 export하는 모듈&lt;/em&gt;를 사용하며 React 프로젝트를 개발하고 있었다.&lt;/li&gt;
&lt;li&gt;개발 초-중반기에만 해도 &lt;em&gt;&lt;strong&gt;&amp;lsquo;Redux 객체 -&amp;gt; Redux Toolkit의 Slice 객체&amp;rsquo;&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;&amp;lsquo;Slice 객체 -&amp;gt; Axios 모듈&amp;rsquo;&lt;/strong&gt;&lt;/em&gt; 로의 참조 외에는 모듈간의 연관관계가 존재하지 않아 순환 참조가 발생하지 않아 에러가 발생하지 않았다.
&lt;img src=&#34;https://cloudsoswift.github.io/post/develop/230219/before_circular_import.png&#34; alt=&#34;before_circular_import&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;&amp;lsquo;Redux 객체 -&amp;gt; Redux Toolkit의 Slice 객체&amp;rsquo;&lt;/strong&gt;&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;Redux Toolkit Slice들의 Reducer를 모은 rootReducer를 메인 Redux객체(store)에 할당하기 위해 Slice 객체를 참조.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;&amp;lsquo;Slice 객체 -&amp;gt; Axios 모듈&amp;rsquo;&lt;/strong&gt;&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;비동기 작업 후 state를 update하는 로직을 위해, Redux 액션 생성함수(Action Creator)를 만들어서 사용하였다.&lt;/li&gt;
&lt;li&gt;이 때, 비동기 작업을 위해 Axios 모듈을 사용했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;사건의-발단&#34; &gt;사건의 발단
&lt;span&gt;
    &lt;a href=&#34;#%ec%82%ac%ea%b1%b4%ec%9d%98-%eb%b0%9c%eb%8b%a8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;그러다 Axios 모듈에 interceptor를 설정해, request를 보내기 전 &amp;lsquo;유저 Slice&amp;rsquo;에 저장된 AccessToken을 불러와 Header에 첨부해주려 했는데 순환 참조 에러가 발생했다.&lt;br&gt;
&lt;code&gt;Uncaught ReferenceError: Cannot access &#39;__WEBPACK_DEFAULT_EXPORT__&#39; before initialization&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;해당 에러를 맞닥들인 당시, 나는 &amp;lsquo;순환 참조&amp;rsquo;라는 개념도 잘 알지 못했고 이러한 행위가 에러를 발생시킨다는 것 역시 알지 못했다.&lt;/li&gt;
&lt;li&gt;그리고 여러 글들을 찾아 보다가, 관련된 &lt;a href=&#34;https://stackoverflow.com/questions/65038253/uncaught-referenceerror-cannot-access-webpack-default-export-before-initi&#34;&gt;stackoverflow 글&lt;/a&gt;을 보고 어느정도 왜 에러를 발생시키는 행위인지 알 수 있었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;원인&#34; &gt;원인
&lt;span&gt;
    &lt;a href=&#34;#%ec%9b%90%ec%9d%b8&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;request를 보내기 전에 Redux Store를 확인하고 만약 AccessToken이 존재하면 해당 값 가져와서 &lt;em&gt;Header의 Authorization&lt;/em&gt;으로 설정한 뒤 요청을 보내는 로직을 수행하는 interceptor를 Axios 모듈에다 달아주고 싶었다.&lt;/li&gt;
&lt;li&gt;React에서 자주 쓰던것 처럼, &lt;code&gt;useDispatch()&lt;/code&gt;훅을 통해 dispatch 함수를 반환 받아, Action Creator를 통해 만든 Action을 dispatch하는 방식으로 AccessToken을 가져오는 것이 원래 계획이었다.&lt;/li&gt;
&lt;li&gt;그러나 &lt;em&gt;Axios 모듈&lt;/em&gt;은 React Component가 아니기 때문에, React Component 외부에서는 &lt;em&gt;Redux Store 모듈&lt;/em&gt;을 불러와 Store 객체가 갖고있는 dispatch 함수를 호출해야 했다.&lt;/li&gt;
&lt;li&gt;그래서 &lt;em&gt;Redux Store 모듈&lt;/em&gt;을 불러와 dispatch를 함수를 호출하려 했는데, Redux Store를 불러오는 로직을 추가하니 상기한 내용의 에러를 내놓고 있었다.&lt;/li&gt;
&lt;li&gt;즉, &lt;em&gt;Axios 모듈&lt;/em&gt;에서 &lt;em&gt;Redux Store 모듈&lt;/em&gt;을 import함으로써 아래와 같은 구조가 형성되어 버린것이었다.
&lt;img src=&#34;https://cloudsoswift.github.io/post/develop/230219/after_circular_import.png&#34; alt=&#34;after_circular_import&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;store 객체를 생성하려면 &lt;em&gt;user-slice의 reducer가 필요&lt;/em&gt;해 &lt;em&gt;&lt;strong&gt;user-slice.js를 import&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;user-slice.js 내부에 정의된 Action Creator 함수는 비동기 작업을 처리하기 위해 &lt;em&gt;Axios 모듈이 필요&lt;/em&gt;해 &lt;em&gt;&lt;strong&gt;http.js를 import&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Axios 모듈에서는 store 객체 안에 저장된 AccessToken을 가져오기 위해 &lt;em&gt;store 객체가 필요&lt;/em&gt;해 &lt;em&gt;&lt;strong&gt;store.js를 import&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;해결&#34; &gt;해결?
&lt;span&gt;
    &lt;a href=&#34;#%ed%95%b4%ea%b2%b0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Action Creator 함수&lt;/em&gt;, Store에 접근하는 &lt;em&gt;interceptor&lt;/em&gt;, Slice들의 reducer를 combine해 사용하는 &lt;em&gt;store 객체&lt;/em&gt; 모두 놓치고 싶지 않았지만, 에러를 해결해야 해 어쩔 수 없이 &lt;em&gt;&lt;strong&gt;Action Creator 함수&lt;/strong&gt;&lt;/em&gt;를 사용하지 않는 방향으로 코드를 수정했다.
&lt;ul&gt;
&lt;li&gt;Axios 모듈을 사용하는 Action Creator 함수로 로그인, 로그아웃이 있었는데, 해당 작업을 각 기능을 사용하는 component(로그인 - 로그인 페이지, 로그아웃 - 네비게이션 바)에서 정의하도록 하여 순환 관계를 끊었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;결론&#34; &gt;결론?
&lt;span&gt;
    &lt;a href=&#34;#%ea%b2%b0%eb%a1%a0&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;순환 참조가 발생할 경우, 순환 고리에 포함된 모듈(객체)들은 생성이 안 되어 사용이 불가능하므로 순환 참조가 발생하지 않도록 코드를 짜는것이 중요하다는걸 몇 시간의 실랑이 끝에 알 수 있었다&amp;hellip;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
